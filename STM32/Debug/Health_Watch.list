
Health_Watch.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004de0  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08004f80  08004f80  00005f80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004fd8  08004fd8  00006068  2**0
                  CONTENTS
  4 .ARM          00000008  08004fd8  08004fd8  00005fd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004fe0  08004fe0  00006068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004fe0  08004fe0  00005fe0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004fe4  08004fe4  00005fe4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08004fe8  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000314  20000068  08005050  00006068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000037c  08005050  0000637c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bd61  00000000  00000000  00006098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c95  00000000  00000000  00011df9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ab0  00000000  00000000  00013a90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000084b  00000000  00000000  00014540  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016cd7  00000000  00000000  00014d8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d611  00000000  00000000  0002ba62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089c25  00000000  00000000  00039073  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c2c98  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003534  00000000  00000000  000c2cdc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007a  00000000  00000000  000c6210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004f68 	.word	0x08004f68

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	08004f68 	.word	0x08004f68

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2uiz>:
 8000a1c:	004a      	lsls	r2, r1, #1
 8000a1e:	d211      	bcs.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a20:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a24:	d211      	bcs.n	8000a4a <__aeabi_d2uiz+0x2e>
 8000a26:	d50d      	bpl.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a28:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a30:	d40e      	bmi.n	8000a50 <__aeabi_d2uiz+0x34>
 8000a32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a36:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a3e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a42:	4770      	bx	lr
 8000a44:	f04f 0000 	mov.w	r0, #0
 8000a48:	4770      	bx	lr
 8000a4a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a4e:	d102      	bne.n	8000a56 <__aeabi_d2uiz+0x3a>
 8000a50:	f04f 30ff 	mov.w	r0, #4294967295
 8000a54:	4770      	bx	lr
 8000a56:	f04f 0000 	mov.w	r0, #0
 8000a5a:	4770      	bx	lr

08000a5c <__aeabi_uldivmod>:
 8000a5c:	b953      	cbnz	r3, 8000a74 <__aeabi_uldivmod+0x18>
 8000a5e:	b94a      	cbnz	r2, 8000a74 <__aeabi_uldivmod+0x18>
 8000a60:	2900      	cmp	r1, #0
 8000a62:	bf08      	it	eq
 8000a64:	2800      	cmpeq	r0, #0
 8000a66:	bf1c      	itt	ne
 8000a68:	f04f 31ff 	movne.w	r1, #4294967295
 8000a6c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a70:	f000 b96a 	b.w	8000d48 <__aeabi_idiv0>
 8000a74:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a78:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a7c:	f000 f806 	bl	8000a8c <__udivmoddi4>
 8000a80:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a88:	b004      	add	sp, #16
 8000a8a:	4770      	bx	lr

08000a8c <__udivmoddi4>:
 8000a8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a90:	9d08      	ldr	r5, [sp, #32]
 8000a92:	460c      	mov	r4, r1
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d14e      	bne.n	8000b36 <__udivmoddi4+0xaa>
 8000a98:	4694      	mov	ip, r2
 8000a9a:	458c      	cmp	ip, r1
 8000a9c:	4686      	mov	lr, r0
 8000a9e:	fab2 f282 	clz	r2, r2
 8000aa2:	d962      	bls.n	8000b6a <__udivmoddi4+0xde>
 8000aa4:	b14a      	cbz	r2, 8000aba <__udivmoddi4+0x2e>
 8000aa6:	f1c2 0320 	rsb	r3, r2, #32
 8000aaa:	4091      	lsls	r1, r2
 8000aac:	fa20 f303 	lsr.w	r3, r0, r3
 8000ab0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ab4:	4319      	orrs	r1, r3
 8000ab6:	fa00 fe02 	lsl.w	lr, r0, r2
 8000aba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000abe:	fa1f f68c 	uxth.w	r6, ip
 8000ac2:	fbb1 f4f7 	udiv	r4, r1, r7
 8000ac6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000aca:	fb07 1114 	mls	r1, r7, r4, r1
 8000ace:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ad2:	fb04 f106 	mul.w	r1, r4, r6
 8000ad6:	4299      	cmp	r1, r3
 8000ad8:	d90a      	bls.n	8000af0 <__udivmoddi4+0x64>
 8000ada:	eb1c 0303 	adds.w	r3, ip, r3
 8000ade:	f104 30ff 	add.w	r0, r4, #4294967295
 8000ae2:	f080 8112 	bcs.w	8000d0a <__udivmoddi4+0x27e>
 8000ae6:	4299      	cmp	r1, r3
 8000ae8:	f240 810f 	bls.w	8000d0a <__udivmoddi4+0x27e>
 8000aec:	3c02      	subs	r4, #2
 8000aee:	4463      	add	r3, ip
 8000af0:	1a59      	subs	r1, r3, r1
 8000af2:	fa1f f38e 	uxth.w	r3, lr
 8000af6:	fbb1 f0f7 	udiv	r0, r1, r7
 8000afa:	fb07 1110 	mls	r1, r7, r0, r1
 8000afe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b02:	fb00 f606 	mul.w	r6, r0, r6
 8000b06:	429e      	cmp	r6, r3
 8000b08:	d90a      	bls.n	8000b20 <__udivmoddi4+0x94>
 8000b0a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b0e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b12:	f080 80fc 	bcs.w	8000d0e <__udivmoddi4+0x282>
 8000b16:	429e      	cmp	r6, r3
 8000b18:	f240 80f9 	bls.w	8000d0e <__udivmoddi4+0x282>
 8000b1c:	4463      	add	r3, ip
 8000b1e:	3802      	subs	r0, #2
 8000b20:	1b9b      	subs	r3, r3, r6
 8000b22:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b26:	2100      	movs	r1, #0
 8000b28:	b11d      	cbz	r5, 8000b32 <__udivmoddi4+0xa6>
 8000b2a:	40d3      	lsrs	r3, r2
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	e9c5 3200 	strd	r3, r2, [r5]
 8000b32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b36:	428b      	cmp	r3, r1
 8000b38:	d905      	bls.n	8000b46 <__udivmoddi4+0xba>
 8000b3a:	b10d      	cbz	r5, 8000b40 <__udivmoddi4+0xb4>
 8000b3c:	e9c5 0100 	strd	r0, r1, [r5]
 8000b40:	2100      	movs	r1, #0
 8000b42:	4608      	mov	r0, r1
 8000b44:	e7f5      	b.n	8000b32 <__udivmoddi4+0xa6>
 8000b46:	fab3 f183 	clz	r1, r3
 8000b4a:	2900      	cmp	r1, #0
 8000b4c:	d146      	bne.n	8000bdc <__udivmoddi4+0x150>
 8000b4e:	42a3      	cmp	r3, r4
 8000b50:	d302      	bcc.n	8000b58 <__udivmoddi4+0xcc>
 8000b52:	4290      	cmp	r0, r2
 8000b54:	f0c0 80f0 	bcc.w	8000d38 <__udivmoddi4+0x2ac>
 8000b58:	1a86      	subs	r6, r0, r2
 8000b5a:	eb64 0303 	sbc.w	r3, r4, r3
 8000b5e:	2001      	movs	r0, #1
 8000b60:	2d00      	cmp	r5, #0
 8000b62:	d0e6      	beq.n	8000b32 <__udivmoddi4+0xa6>
 8000b64:	e9c5 6300 	strd	r6, r3, [r5]
 8000b68:	e7e3      	b.n	8000b32 <__udivmoddi4+0xa6>
 8000b6a:	2a00      	cmp	r2, #0
 8000b6c:	f040 8090 	bne.w	8000c90 <__udivmoddi4+0x204>
 8000b70:	eba1 040c 	sub.w	r4, r1, ip
 8000b74:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b78:	fa1f f78c 	uxth.w	r7, ip
 8000b7c:	2101      	movs	r1, #1
 8000b7e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000b82:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b86:	fb08 4416 	mls	r4, r8, r6, r4
 8000b8a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b8e:	fb07 f006 	mul.w	r0, r7, r6
 8000b92:	4298      	cmp	r0, r3
 8000b94:	d908      	bls.n	8000ba8 <__udivmoddi4+0x11c>
 8000b96:	eb1c 0303 	adds.w	r3, ip, r3
 8000b9a:	f106 34ff 	add.w	r4, r6, #4294967295
 8000b9e:	d202      	bcs.n	8000ba6 <__udivmoddi4+0x11a>
 8000ba0:	4298      	cmp	r0, r3
 8000ba2:	f200 80cd 	bhi.w	8000d40 <__udivmoddi4+0x2b4>
 8000ba6:	4626      	mov	r6, r4
 8000ba8:	1a1c      	subs	r4, r3, r0
 8000baa:	fa1f f38e 	uxth.w	r3, lr
 8000bae:	fbb4 f0f8 	udiv	r0, r4, r8
 8000bb2:	fb08 4410 	mls	r4, r8, r0, r4
 8000bb6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bba:	fb00 f707 	mul.w	r7, r0, r7
 8000bbe:	429f      	cmp	r7, r3
 8000bc0:	d908      	bls.n	8000bd4 <__udivmoddi4+0x148>
 8000bc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000bc6:	f100 34ff 	add.w	r4, r0, #4294967295
 8000bca:	d202      	bcs.n	8000bd2 <__udivmoddi4+0x146>
 8000bcc:	429f      	cmp	r7, r3
 8000bce:	f200 80b0 	bhi.w	8000d32 <__udivmoddi4+0x2a6>
 8000bd2:	4620      	mov	r0, r4
 8000bd4:	1bdb      	subs	r3, r3, r7
 8000bd6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bda:	e7a5      	b.n	8000b28 <__udivmoddi4+0x9c>
 8000bdc:	f1c1 0620 	rsb	r6, r1, #32
 8000be0:	408b      	lsls	r3, r1
 8000be2:	fa22 f706 	lsr.w	r7, r2, r6
 8000be6:	431f      	orrs	r7, r3
 8000be8:	fa20 fc06 	lsr.w	ip, r0, r6
 8000bec:	fa04 f301 	lsl.w	r3, r4, r1
 8000bf0:	ea43 030c 	orr.w	r3, r3, ip
 8000bf4:	40f4      	lsrs	r4, r6
 8000bf6:	fa00 f801 	lsl.w	r8, r0, r1
 8000bfa:	0c38      	lsrs	r0, r7, #16
 8000bfc:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c00:	fbb4 fef0 	udiv	lr, r4, r0
 8000c04:	fa1f fc87 	uxth.w	ip, r7
 8000c08:	fb00 441e 	mls	r4, r0, lr, r4
 8000c0c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c10:	fb0e f90c 	mul.w	r9, lr, ip
 8000c14:	45a1      	cmp	r9, r4
 8000c16:	fa02 f201 	lsl.w	r2, r2, r1
 8000c1a:	d90a      	bls.n	8000c32 <__udivmoddi4+0x1a6>
 8000c1c:	193c      	adds	r4, r7, r4
 8000c1e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000c22:	f080 8084 	bcs.w	8000d2e <__udivmoddi4+0x2a2>
 8000c26:	45a1      	cmp	r9, r4
 8000c28:	f240 8081 	bls.w	8000d2e <__udivmoddi4+0x2a2>
 8000c2c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c30:	443c      	add	r4, r7
 8000c32:	eba4 0409 	sub.w	r4, r4, r9
 8000c36:	fa1f f983 	uxth.w	r9, r3
 8000c3a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000c3e:	fb00 4413 	mls	r4, r0, r3, r4
 8000c42:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c46:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c4a:	45a4      	cmp	ip, r4
 8000c4c:	d907      	bls.n	8000c5e <__udivmoddi4+0x1d2>
 8000c4e:	193c      	adds	r4, r7, r4
 8000c50:	f103 30ff 	add.w	r0, r3, #4294967295
 8000c54:	d267      	bcs.n	8000d26 <__udivmoddi4+0x29a>
 8000c56:	45a4      	cmp	ip, r4
 8000c58:	d965      	bls.n	8000d26 <__udivmoddi4+0x29a>
 8000c5a:	3b02      	subs	r3, #2
 8000c5c:	443c      	add	r4, r7
 8000c5e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000c62:	fba0 9302 	umull	r9, r3, r0, r2
 8000c66:	eba4 040c 	sub.w	r4, r4, ip
 8000c6a:	429c      	cmp	r4, r3
 8000c6c:	46ce      	mov	lr, r9
 8000c6e:	469c      	mov	ip, r3
 8000c70:	d351      	bcc.n	8000d16 <__udivmoddi4+0x28a>
 8000c72:	d04e      	beq.n	8000d12 <__udivmoddi4+0x286>
 8000c74:	b155      	cbz	r5, 8000c8c <__udivmoddi4+0x200>
 8000c76:	ebb8 030e 	subs.w	r3, r8, lr
 8000c7a:	eb64 040c 	sbc.w	r4, r4, ip
 8000c7e:	fa04 f606 	lsl.w	r6, r4, r6
 8000c82:	40cb      	lsrs	r3, r1
 8000c84:	431e      	orrs	r6, r3
 8000c86:	40cc      	lsrs	r4, r1
 8000c88:	e9c5 6400 	strd	r6, r4, [r5]
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	e750      	b.n	8000b32 <__udivmoddi4+0xa6>
 8000c90:	f1c2 0320 	rsb	r3, r2, #32
 8000c94:	fa20 f103 	lsr.w	r1, r0, r3
 8000c98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c9c:	fa24 f303 	lsr.w	r3, r4, r3
 8000ca0:	4094      	lsls	r4, r2
 8000ca2:	430c      	orrs	r4, r1
 8000ca4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ca8:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cac:	fa1f f78c 	uxth.w	r7, ip
 8000cb0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cb4:	fb08 3110 	mls	r1, r8, r0, r3
 8000cb8:	0c23      	lsrs	r3, r4, #16
 8000cba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cbe:	fb00 f107 	mul.w	r1, r0, r7
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d908      	bls.n	8000cd8 <__udivmoddi4+0x24c>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f100 36ff 	add.w	r6, r0, #4294967295
 8000cce:	d22c      	bcs.n	8000d2a <__udivmoddi4+0x29e>
 8000cd0:	4299      	cmp	r1, r3
 8000cd2:	d92a      	bls.n	8000d2a <__udivmoddi4+0x29e>
 8000cd4:	3802      	subs	r0, #2
 8000cd6:	4463      	add	r3, ip
 8000cd8:	1a5b      	subs	r3, r3, r1
 8000cda:	b2a4      	uxth	r4, r4
 8000cdc:	fbb3 f1f8 	udiv	r1, r3, r8
 8000ce0:	fb08 3311 	mls	r3, r8, r1, r3
 8000ce4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ce8:	fb01 f307 	mul.w	r3, r1, r7
 8000cec:	42a3      	cmp	r3, r4
 8000cee:	d908      	bls.n	8000d02 <__udivmoddi4+0x276>
 8000cf0:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf4:	f101 36ff 	add.w	r6, r1, #4294967295
 8000cf8:	d213      	bcs.n	8000d22 <__udivmoddi4+0x296>
 8000cfa:	42a3      	cmp	r3, r4
 8000cfc:	d911      	bls.n	8000d22 <__udivmoddi4+0x296>
 8000cfe:	3902      	subs	r1, #2
 8000d00:	4464      	add	r4, ip
 8000d02:	1ae4      	subs	r4, r4, r3
 8000d04:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d08:	e739      	b.n	8000b7e <__udivmoddi4+0xf2>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	e6f0      	b.n	8000af0 <__udivmoddi4+0x64>
 8000d0e:	4608      	mov	r0, r1
 8000d10:	e706      	b.n	8000b20 <__udivmoddi4+0x94>
 8000d12:	45c8      	cmp	r8, r9
 8000d14:	d2ae      	bcs.n	8000c74 <__udivmoddi4+0x1e8>
 8000d16:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d1a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d1e:	3801      	subs	r0, #1
 8000d20:	e7a8      	b.n	8000c74 <__udivmoddi4+0x1e8>
 8000d22:	4631      	mov	r1, r6
 8000d24:	e7ed      	b.n	8000d02 <__udivmoddi4+0x276>
 8000d26:	4603      	mov	r3, r0
 8000d28:	e799      	b.n	8000c5e <__udivmoddi4+0x1d2>
 8000d2a:	4630      	mov	r0, r6
 8000d2c:	e7d4      	b.n	8000cd8 <__udivmoddi4+0x24c>
 8000d2e:	46d6      	mov	lr, sl
 8000d30:	e77f      	b.n	8000c32 <__udivmoddi4+0x1a6>
 8000d32:	4463      	add	r3, ip
 8000d34:	3802      	subs	r0, #2
 8000d36:	e74d      	b.n	8000bd4 <__udivmoddi4+0x148>
 8000d38:	4606      	mov	r6, r0
 8000d3a:	4623      	mov	r3, r4
 8000d3c:	4608      	mov	r0, r1
 8000d3e:	e70f      	b.n	8000b60 <__udivmoddi4+0xd4>
 8000d40:	3e02      	subs	r6, #2
 8000d42:	4463      	add	r3, ip
 8000d44:	e730      	b.n	8000ba8 <__udivmoddi4+0x11c>
 8000d46:	bf00      	nop

08000d48 <__aeabi_idiv0>:
 8000d48:	4770      	bx	lr
 8000d4a:	bf00      	nop

08000d4c <__io_putchar>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */
int __io_putchar(int ch)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b084      	sub	sp, #16
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  uint8_t temp = ch;
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	b2db      	uxtb	r3, r3
 8000d58:	73fb      	strb	r3, [r7, #15]
  HAL_UART_Transmit(&huart2, &temp, 1, HAL_MAX_DELAY);
 8000d5a:	f107 010f 	add.w	r1, r7, #15
 8000d5e:	f04f 33ff 	mov.w	r3, #4294967295
 8000d62:	2201      	movs	r2, #1
 8000d64:	4803      	ldr	r0, [pc, #12]	@ (8000d74 <__io_putchar+0x28>)
 8000d66:	f002 fdf5 	bl	8003954 <HAL_UART_Transmit>
  return ch;
 8000d6a:	687b      	ldr	r3, [r7, #4]
}
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	3710      	adds	r7, #16
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	200000d8 	.word	0x200000d8

08000d78 <max30102_plot>:

void max30102_plot(uint32_t ir_sample, uint32_t red_sample)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b082      	sub	sp, #8
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
 8000d80:	6039      	str	r1, [r7, #0]
    // printf("ir:%u\n", ir_sample);                  // Print IR only
    // printf("r:%u\n", red_sample);                  // Print Red only
    printf("ir:%u,r:%u\n", ir_sample, red_sample);    // Print IR and Red
 8000d82:	683a      	ldr	r2, [r7, #0]
 8000d84:	6879      	ldr	r1, [r7, #4]
 8000d86:	4803      	ldr	r0, [pc, #12]	@ (8000d94 <max30102_plot+0x1c>)
 8000d88:	f003 fb20 	bl	80043cc <iprintf>
}
 8000d8c:	bf00      	nop
 8000d8e:	3708      	adds	r7, #8
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	08004f80 	.word	0x08004f80

08000d98 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b082      	sub	sp, #8
 8000d9c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d9e:	f000 fe0b 	bl	80019b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000da2:	f000 f855 	bl	8000e50 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000da6:	f000 f90b 	bl	8000fc0 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000daa:	f000 f8b1 	bl	8000f10 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8000dae:	f000 f8dd 	bl	8000f6c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */
  // Initiation
   max30102_init(&max30102, &hi2c1);
 8000db2:	4924      	ldr	r1, [pc, #144]	@ (8000e44 <main+0xac>)
 8000db4:	4824      	ldr	r0, [pc, #144]	@ (8000e48 <main+0xb0>)
 8000db6:	f000 fb20 	bl	80013fa <max30102_init>
   max30102_reset(&max30102);
 8000dba:	4823      	ldr	r0, [pc, #140]	@ (8000e48 <main+0xb0>)
 8000dbc:	f000 fb94 	bl	80014e8 <max30102_reset>
   max30102_clear_fifo(&max30102);
 8000dc0:	4821      	ldr	r0, [pc, #132]	@ (8000e48 <main+0xb0>)
 8000dc2:	f000 fd5f 	bl	8001884 <max30102_clear_fifo>
   max30102_set_fifo_config(&max30102, max30102_smp_ave_8, 1, 7);
 8000dc6:	2307      	movs	r3, #7
 8000dc8:	2201      	movs	r2, #1
 8000dca:	2103      	movs	r1, #3
 8000dcc:	481e      	ldr	r0, [pc, #120]	@ (8000e48 <main+0xb0>)
 8000dce:	f000 fd1f 	bl	8001810 <max30102_set_fifo_config>

   // Sensor settings
   max30102_set_led_pulse_width(&max30102, max30102_pw_16_bit);
 8000dd2:	2101      	movs	r1, #1
 8000dd4:	481c      	ldr	r0, [pc, #112]	@ (8000e48 <main+0xb0>)
 8000dd6:	f000 fc83 	bl	80016e0 <max30102_set_led_pulse_width>
   max30102_set_adc_resolution(&max30102, max30102_adc_2048);
 8000dda:	2100      	movs	r1, #0
 8000ddc:	481a      	ldr	r0, [pc, #104]	@ (8000e48 <main+0xb0>)
 8000dde:	f000 fca2 	bl	8001726 <max30102_set_adc_resolution>
   max30102_set_sampling_rate(&max30102, max30102_sr_800);
 8000de2:	2104      	movs	r1, #4
 8000de4:	4818      	ldr	r0, [pc, #96]	@ (8000e48 <main+0xb0>)
 8000de6:	f000 fc57 	bl	8001698 <max30102_set_sampling_rate>
   max30102_set_led_current_1(&max30102, 6.2);
 8000dea:	ed9f 0a18 	vldr	s0, [pc, #96]	@ 8000e4c <main+0xb4>
 8000dee:	4816      	ldr	r0, [pc, #88]	@ (8000e48 <main+0xb0>)
 8000df0:	f000 fcbe 	bl	8001770 <max30102_set_led_current_1>
   max30102_set_led_current_2(&max30102, 6.2);
 8000df4:	ed9f 0a15 	vldr	s0, [pc, #84]	@ 8000e4c <main+0xb4>
 8000df8:	4813      	ldr	r0, [pc, #76]	@ (8000e48 <main+0xb0>)
 8000dfa:	f000 fce1 	bl	80017c0 <max30102_set_led_current_2>

   // Enter SpO2 mode
   max30102_set_mode(&max30102, max30102_spo2);
 8000dfe:	2103      	movs	r1, #3
 8000e00:	4811      	ldr	r0, [pc, #68]	@ (8000e48 <main+0xb0>)
 8000e02:	f000 fc23 	bl	800164c <max30102_set_mode>
   max30102_set_a_full(&max30102, 1);
 8000e06:	2101      	movs	r1, #1
 8000e08:	480f      	ldr	r0, [pc, #60]	@ (8000e48 <main+0xb0>)
 8000e0a:	f000 fb7e 	bl	800150a <max30102_set_a_full>

   // Initiate 1 temperature measurement
   max30102_set_die_temp_en(&max30102, 1);
 8000e0e:	2101      	movs	r1, #1
 8000e10:	480d      	ldr	r0, [pc, #52]	@ (8000e48 <main+0xb0>)
 8000e12:	f000 fbba 	bl	800158a <max30102_set_die_temp_en>
   max30102_set_die_temp_rdy(&max30102, 1);
 8000e16:	2101      	movs	r1, #1
 8000e18:	480b      	ldr	r0, [pc, #44]	@ (8000e48 <main+0xb0>)
 8000e1a:	f000 fb9e 	bl	800155a <max30102_set_die_temp_rdy>


   uint8_t en_reg[2] = {0};
 8000e1e:	2300      	movs	r3, #0
 8000e20:	80bb      	strh	r3, [r7, #4]
   max30102_read(&max30102, 0x00, en_reg, 1);
 8000e22:	1d3a      	adds	r2, r7, #4
 8000e24:	2301      	movs	r3, #1
 8000e26:	2100      	movs	r1, #0
 8000e28:	4807      	ldr	r0, [pc, #28]	@ (8000e48 <main+0xb0>)
 8000e2a:	f000 fb38 	bl	800149e <max30102_read>
  /* USER CODE BEGIN WHILE */

  while (1)
  {
    /* USER CODE END WHILE */
	  if (max30102_has_interrupt(&max30102))
 8000e2e:	4806      	ldr	r0, [pc, #24]	@ (8000e48 <main+0xb0>)
 8000e30:	f000 fbd1 	bl	80015d6 <max30102_has_interrupt>
 8000e34:	4603      	mov	r3, r0
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d0f9      	beq.n	8000e2e <main+0x96>
	     {
	       max30102_interrupt_handler(&max30102);
 8000e3a:	4803      	ldr	r0, [pc, #12]	@ (8000e48 <main+0xb0>)
 8000e3c:	f000 fbd8 	bl	80015f0 <max30102_interrupt_handler>
	  if (max30102_has_interrupt(&max30102))
 8000e40:	e7f5      	b.n	8000e2e <main+0x96>
 8000e42:	bf00      	nop
 8000e44:	20000084 	.word	0x20000084
 8000e48:	20000120 	.word	0x20000120
 8000e4c:	40c66666 	.word	0x40c66666

08000e50 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b094      	sub	sp, #80	@ 0x50
 8000e54:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e56:	f107 0320 	add.w	r3, r7, #32
 8000e5a:	2230      	movs	r2, #48	@ 0x30
 8000e5c:	2100      	movs	r1, #0
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f003 fb09 	bl	8004476 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e64:	f107 030c 	add.w	r3, r7, #12
 8000e68:	2200      	movs	r2, #0
 8000e6a:	601a      	str	r2, [r3, #0]
 8000e6c:	605a      	str	r2, [r3, #4]
 8000e6e:	609a      	str	r2, [r3, #8]
 8000e70:	60da      	str	r2, [r3, #12]
 8000e72:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e74:	2300      	movs	r3, #0
 8000e76:	60bb      	str	r3, [r7, #8]
 8000e78:	4b23      	ldr	r3, [pc, #140]	@ (8000f08 <SystemClock_Config+0xb8>)
 8000e7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e7c:	4a22      	ldr	r2, [pc, #136]	@ (8000f08 <SystemClock_Config+0xb8>)
 8000e7e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e82:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e84:	4b20      	ldr	r3, [pc, #128]	@ (8000f08 <SystemClock_Config+0xb8>)
 8000e86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e88:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e8c:	60bb      	str	r3, [r7, #8]
 8000e8e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000e90:	2300      	movs	r3, #0
 8000e92:	607b      	str	r3, [r7, #4]
 8000e94:	4b1d      	ldr	r3, [pc, #116]	@ (8000f0c <SystemClock_Config+0xbc>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000e9c:	4a1b      	ldr	r2, [pc, #108]	@ (8000f0c <SystemClock_Config+0xbc>)
 8000e9e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000ea2:	6013      	str	r3, [r2, #0]
 8000ea4:	4b19      	ldr	r3, [pc, #100]	@ (8000f0c <SystemClock_Config+0xbc>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000eac:	607b      	str	r3, [r7, #4]
 8000eae:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000eb0:	2302      	movs	r3, #2
 8000eb2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000eb4:	2301      	movs	r3, #1
 8000eb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000eb8:	2310      	movs	r3, #16
 8000eba:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ec0:	f107 0320 	add.w	r3, r7, #32
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f002 f89d 	bl	8003004 <HAL_RCC_OscConfig>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d001      	beq.n	8000ed4 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000ed0:	f000 f8ba 	bl	8001048 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ed4:	230f      	movs	r3, #15
 8000ed6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000edc:	2300      	movs	r3, #0
 8000ede:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000ee8:	f107 030c 	add.w	r3, r7, #12
 8000eec:	2100      	movs	r1, #0
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f002 fb00 	bl	80034f4 <HAL_RCC_ClockConfig>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d001      	beq.n	8000efe <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000efa:	f000 f8a5 	bl	8001048 <Error_Handler>
  }
}
 8000efe:	bf00      	nop
 8000f00:	3750      	adds	r7, #80	@ 0x50
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	40023800 	.word	0x40023800
 8000f0c:	40007000 	.word	0x40007000

08000f10 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000f14:	4b12      	ldr	r3, [pc, #72]	@ (8000f60 <MX_I2C1_Init+0x50>)
 8000f16:	4a13      	ldr	r2, [pc, #76]	@ (8000f64 <MX_I2C1_Init+0x54>)
 8000f18:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000f1a:	4b11      	ldr	r3, [pc, #68]	@ (8000f60 <MX_I2C1_Init+0x50>)
 8000f1c:	4a12      	ldr	r2, [pc, #72]	@ (8000f68 <MX_I2C1_Init+0x58>)
 8000f1e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000f20:	4b0f      	ldr	r3, [pc, #60]	@ (8000f60 <MX_I2C1_Init+0x50>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000f26:	4b0e      	ldr	r3, [pc, #56]	@ (8000f60 <MX_I2C1_Init+0x50>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f2c:	4b0c      	ldr	r3, [pc, #48]	@ (8000f60 <MX_I2C1_Init+0x50>)
 8000f2e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000f32:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f34:	4b0a      	ldr	r3, [pc, #40]	@ (8000f60 <MX_I2C1_Init+0x50>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000f3a:	4b09      	ldr	r3, [pc, #36]	@ (8000f60 <MX_I2C1_Init+0x50>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f40:	4b07      	ldr	r3, [pc, #28]	@ (8000f60 <MX_I2C1_Init+0x50>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f46:	4b06      	ldr	r3, [pc, #24]	@ (8000f60 <MX_I2C1_Init+0x50>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f4c:	4804      	ldr	r0, [pc, #16]	@ (8000f60 <MX_I2C1_Init+0x50>)
 8000f4e:	f001 f85f 	bl	8002010 <HAL_I2C_Init>
 8000f52:	4603      	mov	r3, r0
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d001      	beq.n	8000f5c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000f58:	f000 f876 	bl	8001048 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000f5c:	bf00      	nop
 8000f5e:	bd80      	pop	{r7, pc}
 8000f60:	20000084 	.word	0x20000084
 8000f64:	40005400 	.word	0x40005400
 8000f68:	000186a0 	.word	0x000186a0

08000f6c <MX_USART2_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart2.Instance = USART2;
 8000f70:	4b11      	ldr	r3, [pc, #68]	@ (8000fb8 <MX_USART2_UART_Init+0x4c>)
 8000f72:	4a12      	ldr	r2, [pc, #72]	@ (8000fbc <MX_USART2_UART_Init+0x50>)
 8000f74:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000f76:	4b10      	ldr	r3, [pc, #64]	@ (8000fb8 <MX_USART2_UART_Init+0x4c>)
 8000f78:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000f7c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f7e:	4b0e      	ldr	r3, [pc, #56]	@ (8000fb8 <MX_USART2_UART_Init+0x4c>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f84:	4b0c      	ldr	r3, [pc, #48]	@ (8000fb8 <MX_USART2_UART_Init+0x4c>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f8a:	4b0b      	ldr	r3, [pc, #44]	@ (8000fb8 <MX_USART2_UART_Init+0x4c>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f90:	4b09      	ldr	r3, [pc, #36]	@ (8000fb8 <MX_USART2_UART_Init+0x4c>)
 8000f92:	220c      	movs	r2, #12
 8000f94:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f96:	4b08      	ldr	r3, [pc, #32]	@ (8000fb8 <MX_USART2_UART_Init+0x4c>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f9c:	4b06      	ldr	r3, [pc, #24]	@ (8000fb8 <MX_USART2_UART_Init+0x4c>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000fa2:	4805      	ldr	r0, [pc, #20]	@ (8000fb8 <MX_USART2_UART_Init+0x4c>)
 8000fa4:	f002 fc86 	bl	80038b4 <HAL_UART_Init>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d001      	beq.n	8000fb2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000fae:	f000 f84b 	bl	8001048 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000fb2:	bf00      	nop
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	200000d8 	.word	0x200000d8
 8000fbc:	40004400 	.word	0x40004400

08000fc0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b088      	sub	sp, #32
 8000fc4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fc6:	f107 030c 	add.w	r3, r7, #12
 8000fca:	2200      	movs	r2, #0
 8000fcc:	601a      	str	r2, [r3, #0]
 8000fce:	605a      	str	r2, [r3, #4]
 8000fd0:	609a      	str	r2, [r3, #8]
 8000fd2:	60da      	str	r2, [r3, #12]
 8000fd4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	60bb      	str	r3, [r7, #8]
 8000fda:	4b19      	ldr	r3, [pc, #100]	@ (8001040 <MX_GPIO_Init+0x80>)
 8000fdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fde:	4a18      	ldr	r2, [pc, #96]	@ (8001040 <MX_GPIO_Init+0x80>)
 8000fe0:	f043 0301 	orr.w	r3, r3, #1
 8000fe4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fe6:	4b16      	ldr	r3, [pc, #88]	@ (8001040 <MX_GPIO_Init+0x80>)
 8000fe8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fea:	f003 0301 	and.w	r3, r3, #1
 8000fee:	60bb      	str	r3, [r7, #8]
 8000ff0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	607b      	str	r3, [r7, #4]
 8000ff6:	4b12      	ldr	r3, [pc, #72]	@ (8001040 <MX_GPIO_Init+0x80>)
 8000ff8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ffa:	4a11      	ldr	r2, [pc, #68]	@ (8001040 <MX_GPIO_Init+0x80>)
 8000ffc:	f043 0302 	orr.w	r3, r3, #2
 8001000:	6313      	str	r3, [r2, #48]	@ 0x30
 8001002:	4b0f      	ldr	r3, [pc, #60]	@ (8001040 <MX_GPIO_Init+0x80>)
 8001004:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001006:	f003 0302 	and.w	r3, r3, #2
 800100a:	607b      	str	r3, [r7, #4]
 800100c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : Sensor_Interrupt_Pin */
  GPIO_InitStruct.Pin = Sensor_Interrupt_Pin;
 800100e:	2302      	movs	r3, #2
 8001010:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001012:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001016:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001018:	2300      	movs	r3, #0
 800101a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(Sensor_Interrupt_GPIO_Port, &GPIO_InitStruct);
 800101c:	f107 030c 	add.w	r3, r7, #12
 8001020:	4619      	mov	r1, r3
 8001022:	4808      	ldr	r0, [pc, #32]	@ (8001044 <MX_GPIO_Init+0x84>)
 8001024:	f000 fe4c 	bl	8001cc0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001028:	2200      	movs	r2, #0
 800102a:	2100      	movs	r1, #0
 800102c:	2007      	movs	r0, #7
 800102e:	f000 fe10 	bl	8001c52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001032:	2007      	movs	r0, #7
 8001034:	f000 fe29 	bl	8001c8a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001038:	bf00      	nop
 800103a:	3720      	adds	r7, #32
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	40023800 	.word	0x40023800
 8001044:	40020000 	.word	0x40020000

08001048 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800104c:	b672      	cpsid	i
}
 800104e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001050:	bf00      	nop
 8001052:	e7fd      	b.n	8001050 <Error_Handler+0x8>

08001054 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001054:	b480      	push	{r7}
 8001056:	b083      	sub	sp, #12
 8001058:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800105a:	2300      	movs	r3, #0
 800105c:	607b      	str	r3, [r7, #4]
 800105e:	4b10      	ldr	r3, [pc, #64]	@ (80010a0 <HAL_MspInit+0x4c>)
 8001060:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001062:	4a0f      	ldr	r2, [pc, #60]	@ (80010a0 <HAL_MspInit+0x4c>)
 8001064:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001068:	6453      	str	r3, [r2, #68]	@ 0x44
 800106a:	4b0d      	ldr	r3, [pc, #52]	@ (80010a0 <HAL_MspInit+0x4c>)
 800106c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800106e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001072:	607b      	str	r3, [r7, #4]
 8001074:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001076:	2300      	movs	r3, #0
 8001078:	603b      	str	r3, [r7, #0]
 800107a:	4b09      	ldr	r3, [pc, #36]	@ (80010a0 <HAL_MspInit+0x4c>)
 800107c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800107e:	4a08      	ldr	r2, [pc, #32]	@ (80010a0 <HAL_MspInit+0x4c>)
 8001080:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001084:	6413      	str	r3, [r2, #64]	@ 0x40
 8001086:	4b06      	ldr	r3, [pc, #24]	@ (80010a0 <HAL_MspInit+0x4c>)
 8001088:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800108a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800108e:	603b      	str	r3, [r7, #0]
 8001090:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001092:	bf00      	nop
 8001094:	370c      	adds	r7, #12
 8001096:	46bd      	mov	sp, r7
 8001098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109c:	4770      	bx	lr
 800109e:	bf00      	nop
 80010a0:	40023800 	.word	0x40023800

080010a4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b08a      	sub	sp, #40	@ 0x28
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ac:	f107 0314 	add.w	r3, r7, #20
 80010b0:	2200      	movs	r2, #0
 80010b2:	601a      	str	r2, [r3, #0]
 80010b4:	605a      	str	r2, [r3, #4]
 80010b6:	609a      	str	r2, [r3, #8]
 80010b8:	60da      	str	r2, [r3, #12]
 80010ba:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4a19      	ldr	r2, [pc, #100]	@ (8001128 <HAL_I2C_MspInit+0x84>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d12b      	bne.n	800111e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010c6:	2300      	movs	r3, #0
 80010c8:	613b      	str	r3, [r7, #16]
 80010ca:	4b18      	ldr	r3, [pc, #96]	@ (800112c <HAL_I2C_MspInit+0x88>)
 80010cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ce:	4a17      	ldr	r2, [pc, #92]	@ (800112c <HAL_I2C_MspInit+0x88>)
 80010d0:	f043 0302 	orr.w	r3, r3, #2
 80010d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80010d6:	4b15      	ldr	r3, [pc, #84]	@ (800112c <HAL_I2C_MspInit+0x88>)
 80010d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010da:	f003 0302 	and.w	r3, r3, #2
 80010de:	613b      	str	r3, [r7, #16]
 80010e0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80010e2:	23c0      	movs	r3, #192	@ 0xc0
 80010e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010e6:	2312      	movs	r3, #18
 80010e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ea:	2300      	movs	r3, #0
 80010ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010ee:	2303      	movs	r3, #3
 80010f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80010f2:	2304      	movs	r3, #4
 80010f4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010f6:	f107 0314 	add.w	r3, r7, #20
 80010fa:	4619      	mov	r1, r3
 80010fc:	480c      	ldr	r0, [pc, #48]	@ (8001130 <HAL_I2C_MspInit+0x8c>)
 80010fe:	f000 fddf 	bl	8001cc0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001102:	2300      	movs	r3, #0
 8001104:	60fb      	str	r3, [r7, #12]
 8001106:	4b09      	ldr	r3, [pc, #36]	@ (800112c <HAL_I2C_MspInit+0x88>)
 8001108:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800110a:	4a08      	ldr	r2, [pc, #32]	@ (800112c <HAL_I2C_MspInit+0x88>)
 800110c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001110:	6413      	str	r3, [r2, #64]	@ 0x40
 8001112:	4b06      	ldr	r3, [pc, #24]	@ (800112c <HAL_I2C_MspInit+0x88>)
 8001114:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001116:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800111a:	60fb      	str	r3, [r7, #12]
 800111c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800111e:	bf00      	nop
 8001120:	3728      	adds	r7, #40	@ 0x28
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	40005400 	.word	0x40005400
 800112c:	40023800 	.word	0x40023800
 8001130:	40020400 	.word	0x40020400

08001134 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b08a      	sub	sp, #40	@ 0x28
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800113c:	f107 0314 	add.w	r3, r7, #20
 8001140:	2200      	movs	r2, #0
 8001142:	601a      	str	r2, [r3, #0]
 8001144:	605a      	str	r2, [r3, #4]
 8001146:	609a      	str	r2, [r3, #8]
 8001148:	60da      	str	r2, [r3, #12]
 800114a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4a19      	ldr	r2, [pc, #100]	@ (80011b8 <HAL_UART_MspInit+0x84>)
 8001152:	4293      	cmp	r3, r2
 8001154:	d12b      	bne.n	80011ae <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001156:	2300      	movs	r3, #0
 8001158:	613b      	str	r3, [r7, #16]
 800115a:	4b18      	ldr	r3, [pc, #96]	@ (80011bc <HAL_UART_MspInit+0x88>)
 800115c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800115e:	4a17      	ldr	r2, [pc, #92]	@ (80011bc <HAL_UART_MspInit+0x88>)
 8001160:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001164:	6413      	str	r3, [r2, #64]	@ 0x40
 8001166:	4b15      	ldr	r3, [pc, #84]	@ (80011bc <HAL_UART_MspInit+0x88>)
 8001168:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800116a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800116e:	613b      	str	r3, [r7, #16]
 8001170:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001172:	2300      	movs	r3, #0
 8001174:	60fb      	str	r3, [r7, #12]
 8001176:	4b11      	ldr	r3, [pc, #68]	@ (80011bc <HAL_UART_MspInit+0x88>)
 8001178:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800117a:	4a10      	ldr	r2, [pc, #64]	@ (80011bc <HAL_UART_MspInit+0x88>)
 800117c:	f043 0301 	orr.w	r3, r3, #1
 8001180:	6313      	str	r3, [r2, #48]	@ 0x30
 8001182:	4b0e      	ldr	r3, [pc, #56]	@ (80011bc <HAL_UART_MspInit+0x88>)
 8001184:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001186:	f003 0301 	and.w	r3, r3, #1
 800118a:	60fb      	str	r3, [r7, #12]
 800118c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800118e:	230c      	movs	r3, #12
 8001190:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001192:	2302      	movs	r3, #2
 8001194:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001196:	2300      	movs	r3, #0
 8001198:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800119a:	2303      	movs	r3, #3
 800119c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800119e:	2307      	movs	r3, #7
 80011a0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011a2:	f107 0314 	add.w	r3, r7, #20
 80011a6:	4619      	mov	r1, r3
 80011a8:	4805      	ldr	r0, [pc, #20]	@ (80011c0 <HAL_UART_MspInit+0x8c>)
 80011aa:	f000 fd89 	bl	8001cc0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80011ae:	bf00      	nop
 80011b0:	3728      	adds	r7, #40	@ 0x28
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	40004400 	.word	0x40004400
 80011bc:	40023800 	.word	0x40023800
 80011c0:	40020000 	.word	0x40020000

080011c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80011c8:	bf00      	nop
 80011ca:	e7fd      	b.n	80011c8 <NMI_Handler+0x4>

080011cc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011d0:	bf00      	nop
 80011d2:	e7fd      	b.n	80011d0 <HardFault_Handler+0x4>

080011d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011d4:	b480      	push	{r7}
 80011d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011d8:	bf00      	nop
 80011da:	e7fd      	b.n	80011d8 <MemManage_Handler+0x4>

080011dc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011dc:	b480      	push	{r7}
 80011de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011e0:	bf00      	nop
 80011e2:	e7fd      	b.n	80011e0 <BusFault_Handler+0x4>

080011e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011e4:	b480      	push	{r7}
 80011e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011e8:	bf00      	nop
 80011ea:	e7fd      	b.n	80011e8 <UsageFault_Handler+0x4>

080011ec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011f0:	bf00      	nop
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr

080011fa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011fa:	b480      	push	{r7}
 80011fc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011fe:	bf00      	nop
 8001200:	46bd      	mov	sp, r7
 8001202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001206:	4770      	bx	lr

08001208 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800120c:	bf00      	nop
 800120e:	46bd      	mov	sp, r7
 8001210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001214:	4770      	bx	lr

08001216 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001216:	b580      	push	{r7, lr}
 8001218:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800121a:	f000 fc1f 	bl	8001a5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800121e:	bf00      	nop
 8001220:	bd80      	pop	{r7, pc}
	...

08001224 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */
	max30102_on_interrupt(&max30102);
 8001228:	4803      	ldr	r0, [pc, #12]	@ (8001238 <EXTI1_IRQHandler+0x14>)
 800122a:	f000 f9c6 	bl	80015ba <max30102_on_interrupt>

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Sensor_Interrupt_Pin);
 800122e:	2002      	movs	r0, #2
 8001230:	f000 feca 	bl	8001fc8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001234:	bf00      	nop
 8001236:	bd80      	pop	{r7, pc}
 8001238:	20000120 	.word	0x20000120

0800123c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b086      	sub	sp, #24
 8001240:	af00      	add	r7, sp, #0
 8001242:	60f8      	str	r0, [r7, #12]
 8001244:	60b9      	str	r1, [r7, #8]
 8001246:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001248:	2300      	movs	r3, #0
 800124a:	617b      	str	r3, [r7, #20]
 800124c:	e00a      	b.n	8001264 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800124e:	f3af 8000 	nop.w
 8001252:	4601      	mov	r1, r0
 8001254:	68bb      	ldr	r3, [r7, #8]
 8001256:	1c5a      	adds	r2, r3, #1
 8001258:	60ba      	str	r2, [r7, #8]
 800125a:	b2ca      	uxtb	r2, r1
 800125c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800125e:	697b      	ldr	r3, [r7, #20]
 8001260:	3301      	adds	r3, #1
 8001262:	617b      	str	r3, [r7, #20]
 8001264:	697a      	ldr	r2, [r7, #20]
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	429a      	cmp	r2, r3
 800126a:	dbf0      	blt.n	800124e <_read+0x12>
  }

  return len;
 800126c:	687b      	ldr	r3, [r7, #4]
}
 800126e:	4618      	mov	r0, r3
 8001270:	3718      	adds	r7, #24
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}

08001276 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001276:	b580      	push	{r7, lr}
 8001278:	b086      	sub	sp, #24
 800127a:	af00      	add	r7, sp, #0
 800127c:	60f8      	str	r0, [r7, #12]
 800127e:	60b9      	str	r1, [r7, #8]
 8001280:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001282:	2300      	movs	r3, #0
 8001284:	617b      	str	r3, [r7, #20]
 8001286:	e009      	b.n	800129c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001288:	68bb      	ldr	r3, [r7, #8]
 800128a:	1c5a      	adds	r2, r3, #1
 800128c:	60ba      	str	r2, [r7, #8]
 800128e:	781b      	ldrb	r3, [r3, #0]
 8001290:	4618      	mov	r0, r3
 8001292:	f7ff fd5b 	bl	8000d4c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001296:	697b      	ldr	r3, [r7, #20]
 8001298:	3301      	adds	r3, #1
 800129a:	617b      	str	r3, [r7, #20]
 800129c:	697a      	ldr	r2, [r7, #20]
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	429a      	cmp	r2, r3
 80012a2:	dbf1      	blt.n	8001288 <_write+0x12>
  }
  return len;
 80012a4:	687b      	ldr	r3, [r7, #4]
}
 80012a6:	4618      	mov	r0, r3
 80012a8:	3718      	adds	r7, #24
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}

080012ae <_close>:

int _close(int file)
{
 80012ae:	b480      	push	{r7}
 80012b0:	b083      	sub	sp, #12
 80012b2:	af00      	add	r7, sp, #0
 80012b4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80012b6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	370c      	adds	r7, #12
 80012be:	46bd      	mov	sp, r7
 80012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c4:	4770      	bx	lr

080012c6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80012c6:	b480      	push	{r7}
 80012c8:	b083      	sub	sp, #12
 80012ca:	af00      	add	r7, sp, #0
 80012cc:	6078      	str	r0, [r7, #4]
 80012ce:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80012d6:	605a      	str	r2, [r3, #4]
  return 0;
 80012d8:	2300      	movs	r3, #0
}
 80012da:	4618      	mov	r0, r3
 80012dc:	370c      	adds	r7, #12
 80012de:	46bd      	mov	sp, r7
 80012e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e4:	4770      	bx	lr

080012e6 <_isatty>:

int _isatty(int file)
{
 80012e6:	b480      	push	{r7}
 80012e8:	b083      	sub	sp, #12
 80012ea:	af00      	add	r7, sp, #0
 80012ec:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80012ee:	2301      	movs	r3, #1
}
 80012f0:	4618      	mov	r0, r3
 80012f2:	370c      	adds	r7, #12
 80012f4:	46bd      	mov	sp, r7
 80012f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fa:	4770      	bx	lr

080012fc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80012fc:	b480      	push	{r7}
 80012fe:	b085      	sub	sp, #20
 8001300:	af00      	add	r7, sp, #0
 8001302:	60f8      	str	r0, [r7, #12]
 8001304:	60b9      	str	r1, [r7, #8]
 8001306:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001308:	2300      	movs	r3, #0
}
 800130a:	4618      	mov	r0, r3
 800130c:	3714      	adds	r7, #20
 800130e:	46bd      	mov	sp, r7
 8001310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001314:	4770      	bx	lr
	...

08001318 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b086      	sub	sp, #24
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001320:	4a14      	ldr	r2, [pc, #80]	@ (8001374 <_sbrk+0x5c>)
 8001322:	4b15      	ldr	r3, [pc, #84]	@ (8001378 <_sbrk+0x60>)
 8001324:	1ad3      	subs	r3, r2, r3
 8001326:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001328:	697b      	ldr	r3, [r7, #20]
 800132a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800132c:	4b13      	ldr	r3, [pc, #76]	@ (800137c <_sbrk+0x64>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	2b00      	cmp	r3, #0
 8001332:	d102      	bne.n	800133a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001334:	4b11      	ldr	r3, [pc, #68]	@ (800137c <_sbrk+0x64>)
 8001336:	4a12      	ldr	r2, [pc, #72]	@ (8001380 <_sbrk+0x68>)
 8001338:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800133a:	4b10      	ldr	r3, [pc, #64]	@ (800137c <_sbrk+0x64>)
 800133c:	681a      	ldr	r2, [r3, #0]
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	4413      	add	r3, r2
 8001342:	693a      	ldr	r2, [r7, #16]
 8001344:	429a      	cmp	r2, r3
 8001346:	d207      	bcs.n	8001358 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001348:	f003 f8f4 	bl	8004534 <__errno>
 800134c:	4603      	mov	r3, r0
 800134e:	220c      	movs	r2, #12
 8001350:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001352:	f04f 33ff 	mov.w	r3, #4294967295
 8001356:	e009      	b.n	800136c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001358:	4b08      	ldr	r3, [pc, #32]	@ (800137c <_sbrk+0x64>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800135e:	4b07      	ldr	r3, [pc, #28]	@ (800137c <_sbrk+0x64>)
 8001360:	681a      	ldr	r2, [r3, #0]
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	4413      	add	r3, r2
 8001366:	4a05      	ldr	r2, [pc, #20]	@ (800137c <_sbrk+0x64>)
 8001368:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800136a:	68fb      	ldr	r3, [r7, #12]
}
 800136c:	4618      	mov	r0, r3
 800136e:	3718      	adds	r7, #24
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}
 8001374:	20018000 	.word	0x20018000
 8001378:	00000400 	.word	0x00000400
 800137c:	20000228 	.word	0x20000228
 8001380:	20000380 	.word	0x20000380

08001384 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001384:	b480      	push	{r7}
 8001386:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001388:	4b06      	ldr	r3, [pc, #24]	@ (80013a4 <SystemInit+0x20>)
 800138a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800138e:	4a05      	ldr	r2, [pc, #20]	@ (80013a4 <SystemInit+0x20>)
 8001390:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001394:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001398:	bf00      	nop
 800139a:	46bd      	mov	sp, r7
 800139c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a0:	4770      	bx	lr
 80013a2:	bf00      	nop
 80013a4:	e000ed00 	.word	0xe000ed00

080013a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80013a8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80013e0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 80013ac:	f7ff ffea 	bl	8001384 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80013b0:	480c      	ldr	r0, [pc, #48]	@ (80013e4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80013b2:	490d      	ldr	r1, [pc, #52]	@ (80013e8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80013b4:	4a0d      	ldr	r2, [pc, #52]	@ (80013ec <LoopFillZerobss+0x1a>)
  movs r3, #0
 80013b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013b8:	e002      	b.n	80013c0 <LoopCopyDataInit>

080013ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013be:	3304      	adds	r3, #4

080013c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013c4:	d3f9      	bcc.n	80013ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013c6:	4a0a      	ldr	r2, [pc, #40]	@ (80013f0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80013c8:	4c0a      	ldr	r4, [pc, #40]	@ (80013f4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80013ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013cc:	e001      	b.n	80013d2 <LoopFillZerobss>

080013ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013d0:	3204      	adds	r2, #4

080013d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013d4:	d3fb      	bcc.n	80013ce <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 80013d6:	f003 f8b3 	bl	8004540 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80013da:	f7ff fcdd 	bl	8000d98 <main>
  bx  lr    
 80013de:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80013e0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80013e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013e8:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80013ec:	08004fe8 	.word	0x08004fe8
  ldr r2, =_sbss
 80013f0:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80013f4:	2000037c 	.word	0x2000037c

080013f8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013f8:	e7fe      	b.n	80013f8 <ADC_IRQHandler>

080013fa <max30102_init>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param hi2c Pointer to I2C object handle
 */
void max30102_init(max30102_t *obj, I2C_HandleTypeDef *hi2c)
{
 80013fa:	b580      	push	{r7, lr}
 80013fc:	b082      	sub	sp, #8
 80013fe:	af00      	add	r7, sp, #0
 8001400:	6078      	str	r0, [r7, #4]
 8001402:	6039      	str	r1, [r7, #0]
    obj->_ui2c = hi2c;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	683a      	ldr	r2, [r7, #0]
 8001408:	601a      	str	r2, [r3, #0]
    obj->_interrupt_flag = 0;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	2200      	movs	r2, #0
 800140e:	f883 2104 	strb.w	r2, [r3, #260]	@ 0x104
    memset(obj->_ir_samples, 0, MAX30102_SAMPLE_LEN_MAX * sizeof(uint32_t));
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	3304      	adds	r3, #4
 8001416:	2280      	movs	r2, #128	@ 0x80
 8001418:	2100      	movs	r1, #0
 800141a:	4618      	mov	r0, r3
 800141c:	f003 f82b 	bl	8004476 <memset>
    memset(obj->_red_samples, 0, MAX30102_SAMPLE_LEN_MAX * sizeof(uint32_t));
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	3384      	adds	r3, #132	@ 0x84
 8001424:	2280      	movs	r2, #128	@ 0x80
 8001426:	2100      	movs	r1, #0
 8001428:	4618      	mov	r0, r3
 800142a:	f003 f824 	bl	8004476 <memset>
}
 800142e:	bf00      	nop
 8001430:	3708      	adds	r7, #8
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}

08001436 <max30102_write>:
 * @param reg Register address to write to.
 * @param buf Pointer containing the bytes to write.
 * @param buflen Number of bytes to write.
 */
void max30102_write(max30102_t *obj, uint8_t reg, uint8_t *buf, uint16_t buflen)
{
 8001436:	b580      	push	{r7, lr}
 8001438:	b088      	sub	sp, #32
 800143a:	af02      	add	r7, sp, #8
 800143c:	60f8      	str	r0, [r7, #12]
 800143e:	607a      	str	r2, [r7, #4]
 8001440:	461a      	mov	r2, r3
 8001442:	460b      	mov	r3, r1
 8001444:	72fb      	strb	r3, [r7, #11]
 8001446:	4613      	mov	r3, r2
 8001448:	813b      	strh	r3, [r7, #8]
    uint8_t *payload = (uint8_t *)malloc((buflen + 1) * sizeof(uint8_t));
 800144a:	893b      	ldrh	r3, [r7, #8]
 800144c:	3301      	adds	r3, #1
 800144e:	4618      	mov	r0, r3
 8001450:	f002 fe3c 	bl	80040cc <malloc>
 8001454:	4603      	mov	r3, r0
 8001456:	617b      	str	r3, [r7, #20]
    *payload = reg;
 8001458:	697b      	ldr	r3, [r7, #20]
 800145a:	7afa      	ldrb	r2, [r7, #11]
 800145c:	701a      	strb	r2, [r3, #0]
    if (buf != NULL && buflen != 0)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	2b00      	cmp	r3, #0
 8001462:	d009      	beq.n	8001478 <max30102_write+0x42>
 8001464:	893b      	ldrh	r3, [r7, #8]
 8001466:	2b00      	cmp	r3, #0
 8001468:	d006      	beq.n	8001478 <max30102_write+0x42>
        memcpy(payload + 1, buf, buflen);
 800146a:	697b      	ldr	r3, [r7, #20]
 800146c:	3301      	adds	r3, #1
 800146e:	893a      	ldrh	r2, [r7, #8]
 8001470:	6879      	ldr	r1, [r7, #4]
 8001472:	4618      	mov	r0, r3
 8001474:	f003 f88b 	bl	800458e <memcpy>
    HAL_I2C_Master_Transmit(obj->_ui2c, MAX30102_I2C_ADDR << 1, payload, buflen + 1, MAX30102_I2C_TIMEOUT);
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	6818      	ldr	r0, [r3, #0]
 800147c:	893b      	ldrh	r3, [r7, #8]
 800147e:	3301      	adds	r3, #1
 8001480:	b29b      	uxth	r3, r3
 8001482:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001486:	9200      	str	r2, [sp, #0]
 8001488:	697a      	ldr	r2, [r7, #20]
 800148a:	21ae      	movs	r1, #174	@ 0xae
 800148c:	f000 ff04 	bl	8002298 <HAL_I2C_Master_Transmit>
    free(payload);
 8001490:	6978      	ldr	r0, [r7, #20]
 8001492:	f002 fe23 	bl	80040dc <free>
}
 8001496:	bf00      	nop
 8001498:	3718      	adds	r7, #24
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}

0800149e <max30102_read>:
 * @param reg Register address to read from.
 * @param buf Pointer to the array to write to.
 * @param buflen Number of bytes to read.
 */
void max30102_read(max30102_t *obj, uint8_t reg, uint8_t *buf, uint16_t buflen)
{
 800149e:	b580      	push	{r7, lr}
 80014a0:	b088      	sub	sp, #32
 80014a2:	af02      	add	r7, sp, #8
 80014a4:	60f8      	str	r0, [r7, #12]
 80014a6:	607a      	str	r2, [r7, #4]
 80014a8:	461a      	mov	r2, r3
 80014aa:	460b      	mov	r3, r1
 80014ac:	72fb      	strb	r3, [r7, #11]
 80014ae:	4613      	mov	r3, r2
 80014b0:	813b      	strh	r3, [r7, #8]
    uint8_t reg_addr = reg;
 80014b2:	7afb      	ldrb	r3, [r7, #11]
 80014b4:	75fb      	strb	r3, [r7, #23]
    HAL_I2C_Master_Transmit(obj->_ui2c, MAX30102_I2C_ADDR << 1, &reg_addr, 1, MAX30102_I2C_TIMEOUT);
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	6818      	ldr	r0, [r3, #0]
 80014ba:	f107 0217 	add.w	r2, r7, #23
 80014be:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80014c2:	9300      	str	r3, [sp, #0]
 80014c4:	2301      	movs	r3, #1
 80014c6:	21ae      	movs	r1, #174	@ 0xae
 80014c8:	f000 fee6 	bl	8002298 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(obj->_ui2c, MAX30102_I2C_ADDR << 1, buf, buflen, MAX30102_I2C_TIMEOUT);
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	6818      	ldr	r0, [r3, #0]
 80014d0:	893b      	ldrh	r3, [r7, #8]
 80014d2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80014d6:	9200      	str	r2, [sp, #0]
 80014d8:	687a      	ldr	r2, [r7, #4]
 80014da:	21ae      	movs	r1, #174	@ 0xae
 80014dc:	f000 ffda 	bl	8002494 <HAL_I2C_Master_Receive>
}
 80014e0:	bf00      	nop
 80014e2:	3718      	adds	r7, #24
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}

080014e8 <max30102_reset>:
 * @brief Reset the sensor.
 *
 * @param obj Pointer to max30102_t object instance.
 */
void max30102_reset(max30102_t *obj)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b084      	sub	sp, #16
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
    uint8_t val = 0x40;
 80014f0:	2340      	movs	r3, #64	@ 0x40
 80014f2:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_MODE_CONFIG, &val, 1);
 80014f4:	f107 020f 	add.w	r2, r7, #15
 80014f8:	2301      	movs	r3, #1
 80014fa:	2109      	movs	r1, #9
 80014fc:	6878      	ldr	r0, [r7, #4]
 80014fe:	f7ff ff9a 	bl	8001436 <max30102_write>
}
 8001502:	bf00      	nop
 8001504:	3710      	adds	r7, #16
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}

0800150a <max30102_set_a_full>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param enable Enable (1) or disable (0).
 */
void max30102_set_a_full(max30102_t *obj, uint8_t enable)
{
 800150a:	b580      	push	{r7, lr}
 800150c:	b084      	sub	sp, #16
 800150e:	af00      	add	r7, sp, #0
 8001510:	6078      	str	r0, [r7, #4]
 8001512:	460b      	mov	r3, r1
 8001514:	70fb      	strb	r3, [r7, #3]
    uint8_t reg = 0;
 8001516:	2300      	movs	r3, #0
 8001518:	73fb      	strb	r3, [r7, #15]
    max30102_read(obj, MAX30102_INTERRUPT_ENABLE_1, &reg, 1);
 800151a:	f107 020f 	add.w	r2, r7, #15
 800151e:	2301      	movs	r3, #1
 8001520:	2102      	movs	r1, #2
 8001522:	6878      	ldr	r0, [r7, #4]
 8001524:	f7ff ffbb 	bl	800149e <max30102_read>
    reg &= ~(0x01 << MAX30102_INTERRUPT_A_FULL);
 8001528:	7bfb      	ldrb	r3, [r7, #15]
 800152a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800152e:	b2db      	uxtb	r3, r3
 8001530:	73fb      	strb	r3, [r7, #15]
    reg |= ((enable & 0x01) << MAX30102_INTERRUPT_A_FULL);
 8001532:	78fb      	ldrb	r3, [r7, #3]
 8001534:	01db      	lsls	r3, r3, #7
 8001536:	b25a      	sxtb	r2, r3
 8001538:	7bfb      	ldrb	r3, [r7, #15]
 800153a:	b25b      	sxtb	r3, r3
 800153c:	4313      	orrs	r3, r2
 800153e:	b25b      	sxtb	r3, r3
 8001540:	b2db      	uxtb	r3, r3
 8001542:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_INTERRUPT_ENABLE_1, &reg, 1);
 8001544:	f107 020f 	add.w	r2, r7, #15
 8001548:	2301      	movs	r3, #1
 800154a:	2102      	movs	r1, #2
 800154c:	6878      	ldr	r0, [r7, #4]
 800154e:	f7ff ff72 	bl	8001436 <max30102_write>
}
 8001552:	bf00      	nop
 8001554:	3710      	adds	r7, #16
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}

0800155a <max30102_set_die_temp_rdy>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param enable Enable (1) or disable (0).
 */
void max30102_set_die_temp_rdy(max30102_t *obj, uint8_t enable)
{
 800155a:	b580      	push	{r7, lr}
 800155c:	b084      	sub	sp, #16
 800155e:	af00      	add	r7, sp, #0
 8001560:	6078      	str	r0, [r7, #4]
 8001562:	460b      	mov	r3, r1
 8001564:	70fb      	strb	r3, [r7, #3]
    uint8_t reg = (enable & 0x01) << MAX30102_INTERRUPT_DIE_TEMP_RDY;
 8001566:	78fb      	ldrb	r3, [r7, #3]
 8001568:	005b      	lsls	r3, r3, #1
 800156a:	b2db      	uxtb	r3, r3
 800156c:	f003 0302 	and.w	r3, r3, #2
 8001570:	b2db      	uxtb	r3, r3
 8001572:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_INTERRUPT_ENABLE_2, &reg, 1);
 8001574:	f107 020f 	add.w	r2, r7, #15
 8001578:	2301      	movs	r3, #1
 800157a:	2103      	movs	r1, #3
 800157c:	6878      	ldr	r0, [r7, #4]
 800157e:	f7ff ff5a 	bl	8001436 <max30102_write>
}
 8001582:	bf00      	nop
 8001584:	3710      	adds	r7, #16
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}

0800158a <max30102_set_die_temp_en>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param enable Enable (1) or disable (0).
 */
void max30102_set_die_temp_en(max30102_t *obj, uint8_t enable)
{
 800158a:	b580      	push	{r7, lr}
 800158c:	b084      	sub	sp, #16
 800158e:	af00      	add	r7, sp, #0
 8001590:	6078      	str	r0, [r7, #4]
 8001592:	460b      	mov	r3, r1
 8001594:	70fb      	strb	r3, [r7, #3]
    uint8_t reg = (enable & 0x01) << MAX30102_DIE_TEMP_EN;
 8001596:	78fb      	ldrb	r3, [r7, #3]
 8001598:	005b      	lsls	r3, r3, #1
 800159a:	b2db      	uxtb	r3, r3
 800159c:	f003 0302 	and.w	r3, r3, #2
 80015a0:	b2db      	uxtb	r3, r3
 80015a2:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_DIE_TEMP_CONFIG, &reg, 1);
 80015a4:	f107 020f 	add.w	r2, r7, #15
 80015a8:	2301      	movs	r3, #1
 80015aa:	2121      	movs	r1, #33	@ 0x21
 80015ac:	6878      	ldr	r0, [r7, #4]
 80015ae:	f7ff ff42 	bl	8001436 <max30102_write>
}
 80015b2:	bf00      	nop
 80015b4:	3710      	adds	r7, #16
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}

080015ba <max30102_on_interrupt>:
 * @brief Set interrupt flag on interrupt. To be called in the corresponding external interrupt handler.
 *
 * @param obj Pointer to max30102_t object instance.
 */
void max30102_on_interrupt(max30102_t *obj)
{
 80015ba:	b480      	push	{r7}
 80015bc:	b083      	sub	sp, #12
 80015be:	af00      	add	r7, sp, #0
 80015c0:	6078      	str	r0, [r7, #4]
    obj->_interrupt_flag = 1;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	2201      	movs	r2, #1
 80015c6:	f883 2104 	strb.w	r2, [r3, #260]	@ 0x104
}
 80015ca:	bf00      	nop
 80015cc:	370c      	adds	r7, #12
 80015ce:	46bd      	mov	sp, r7
 80015d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d4:	4770      	bx	lr

080015d6 <max30102_has_interrupt>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @return uint8_t Active (1) or inactive (0).
 */
uint8_t max30102_has_interrupt(max30102_t *obj)
{
 80015d6:	b480      	push	{r7}
 80015d8:	b083      	sub	sp, #12
 80015da:	af00      	add	r7, sp, #0
 80015dc:	6078      	str	r0, [r7, #4]
    return obj->_interrupt_flag;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
}
 80015e4:	4618      	mov	r0, r3
 80015e6:	370c      	adds	r7, #12
 80015e8:	46bd      	mov	sp, r7
 80015ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ee:	4770      	bx	lr

080015f0 <max30102_interrupt_handler>:
 * @brief Read interrupt status registers (0x00 and 0x01) and perform corresponding tasks.
 *
 * @param obj Pointer to max30102_t object instance.
 */
void max30102_interrupt_handler(max30102_t *obj)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b084      	sub	sp, #16
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
    uint8_t reg[2] = {0x00};
 80015f8:	2300      	movs	r3, #0
 80015fa:	81bb      	strh	r3, [r7, #12]
    // Interrupt flag in registers 0x00 and 0x01 are cleared on read
    max30102_read(obj, MAX30102_INTERRUPT_STATUS_1, reg, 2);
 80015fc:	f107 020c 	add.w	r2, r7, #12
 8001600:	2302      	movs	r3, #2
 8001602:	2100      	movs	r1, #0
 8001604:	6878      	ldr	r0, [r7, #4]
 8001606:	f7ff ff4a 	bl	800149e <max30102_read>

    if ((reg[0] >> MAX30102_INTERRUPT_A_FULL) & 0x01)
 800160a:	7b3b      	ldrb	r3, [r7, #12]
 800160c:	09db      	lsrs	r3, r3, #7
 800160e:	b2db      	uxtb	r3, r3
 8001610:	f003 0301 	and.w	r3, r3, #1
 8001614:	2b00      	cmp	r3, #0
 8001616:	d002      	beq.n	800161e <max30102_interrupt_handler+0x2e>
    {
        // FIFO almost full
        max30102_read_fifo(obj);
 8001618:	6878      	ldr	r0, [r7, #4]
 800161a:	f000 f952 	bl	80018c2 <max30102_read_fifo>
    if ((reg[0] >> MAX30102_INTERRUPT_ALC_OVF) & 0x01)
    {
        // Ambient light overflow
    }

    if ((reg[1] >> MAX30102_INTERRUPT_DIE_TEMP_RDY) & 0x01)
 800161e:	7b7b      	ldrb	r3, [r7, #13]
 8001620:	085b      	lsrs	r3, r3, #1
 8001622:	b2db      	uxtb	r3, r3
 8001624:	f003 0301 	and.w	r3, r3, #1
 8001628:	2b00      	cmp	r3, #0
 800162a:	d007      	beq.n	800163c <max30102_interrupt_handler+0x4c>
    {
        // Temperature data ready
        int8_t temp_int;
        uint8_t temp_frac;
        max30102_read_temp(obj, &temp_int, &temp_frac);
 800162c:	f107 020a 	add.w	r2, r7, #10
 8001630:	f107 030b 	add.w	r3, r7, #11
 8001634:	4619      	mov	r1, r3
 8001636:	6878      	ldr	r0, [r7, #4]
 8001638:	f000 f9a8 	bl	800198c <max30102_read_temp>
        // float temp = temp_int + 0.0625f * temp_frac;
    }

    // Reset interrupt flag
    obj->_interrupt_flag = 0;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	2200      	movs	r2, #0
 8001640:	f883 2104 	strb.w	r2, [r3, #260]	@ 0x104
}
 8001644:	bf00      	nop
 8001646:	3710      	adds	r7, #16
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}

0800164c <max30102_set_mode>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param mode Measurement mode enum (max30102_mode_t).
 */
void max30102_set_mode(max30102_t *obj, max30102_mode_t mode)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b084      	sub	sp, #16
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
 8001654:	460b      	mov	r3, r1
 8001656:	70fb      	strb	r3, [r7, #3]
    uint8_t config;
    max30102_read(obj, MAX30102_MODE_CONFIG, &config, 1);
 8001658:	f107 020f 	add.w	r2, r7, #15
 800165c:	2301      	movs	r3, #1
 800165e:	2109      	movs	r1, #9
 8001660:	6878      	ldr	r0, [r7, #4]
 8001662:	f7ff ff1c 	bl	800149e <max30102_read>
    config = (config & 0xf8) | mode;
 8001666:	7bfb      	ldrb	r3, [r7, #15]
 8001668:	b25b      	sxtb	r3, r3
 800166a:	f023 0307 	bic.w	r3, r3, #7
 800166e:	b25a      	sxtb	r2, r3
 8001670:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001674:	4313      	orrs	r3, r2
 8001676:	b25b      	sxtb	r3, r3
 8001678:	b2db      	uxtb	r3, r3
 800167a:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_MODE_CONFIG, &config, 1);
 800167c:	f107 020f 	add.w	r2, r7, #15
 8001680:	2301      	movs	r3, #1
 8001682:	2109      	movs	r1, #9
 8001684:	6878      	ldr	r0, [r7, #4]
 8001686:	f7ff fed6 	bl	8001436 <max30102_write>
    max30102_clear_fifo(obj);
 800168a:	6878      	ldr	r0, [r7, #4]
 800168c:	f000 f8fa 	bl	8001884 <max30102_clear_fifo>
}
 8001690:	bf00      	nop
 8001692:	3710      	adds	r7, #16
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}

08001698 <max30102_set_sampling_rate>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param sr Sampling rate enum (max30102_spo2_st_t).
 */
void max30102_set_sampling_rate(max30102_t *obj, max30102_sr_t sr)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b084      	sub	sp, #16
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
 80016a0:	460b      	mov	r3, r1
 80016a2:	70fb      	strb	r3, [r7, #3]
    uint8_t config;
    max30102_read(obj, MAX30102_SPO2_CONFIG, &config, 1);
 80016a4:	f107 020f 	add.w	r2, r7, #15
 80016a8:	2301      	movs	r3, #1
 80016aa:	210a      	movs	r1, #10
 80016ac:	6878      	ldr	r0, [r7, #4]
 80016ae:	f7ff fef6 	bl	800149e <max30102_read>
    config = (config & 0x63) | (sr << MAX30102_SPO2_SR);
 80016b2:	7bfb      	ldrb	r3, [r7, #15]
 80016b4:	b25b      	sxtb	r3, r3
 80016b6:	f003 0363 	and.w	r3, r3, #99	@ 0x63
 80016ba:	b25a      	sxtb	r2, r3
 80016bc:	78fb      	ldrb	r3, [r7, #3]
 80016be:	009b      	lsls	r3, r3, #2
 80016c0:	b25b      	sxtb	r3, r3
 80016c2:	4313      	orrs	r3, r2
 80016c4:	b25b      	sxtb	r3, r3
 80016c6:	b2db      	uxtb	r3, r3
 80016c8:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_SPO2_CONFIG, &config, 1);
 80016ca:	f107 020f 	add.w	r2, r7, #15
 80016ce:	2301      	movs	r3, #1
 80016d0:	210a      	movs	r1, #10
 80016d2:	6878      	ldr	r0, [r7, #4]
 80016d4:	f7ff feaf 	bl	8001436 <max30102_write>
}
 80016d8:	bf00      	nop
 80016da:	3710      	adds	r7, #16
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd80      	pop	{r7, pc}

080016e0 <max30102_set_led_pulse_width>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param pw Pulse width enum (max30102_led_pw_t).
 */
void max30102_set_led_pulse_width(max30102_t *obj, max30102_led_pw_t pw)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b084      	sub	sp, #16
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
 80016e8:	460b      	mov	r3, r1
 80016ea:	70fb      	strb	r3, [r7, #3]
    uint8_t config;
    max30102_read(obj, MAX30102_SPO2_CONFIG, &config, 1);
 80016ec:	f107 020f 	add.w	r2, r7, #15
 80016f0:	2301      	movs	r3, #1
 80016f2:	210a      	movs	r1, #10
 80016f4:	6878      	ldr	r0, [r7, #4]
 80016f6:	f7ff fed2 	bl	800149e <max30102_read>
    config = (config & 0x7c) | (pw << MAX30102_SPO2_LEW_PW);
 80016fa:	7bfb      	ldrb	r3, [r7, #15]
 80016fc:	b25b      	sxtb	r3, r3
 80016fe:	f003 037c 	and.w	r3, r3, #124	@ 0x7c
 8001702:	b25a      	sxtb	r2, r3
 8001704:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001708:	4313      	orrs	r3, r2
 800170a:	b25b      	sxtb	r3, r3
 800170c:	b2db      	uxtb	r3, r3
 800170e:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_SPO2_CONFIG, &config, 1);
 8001710:	f107 020f 	add.w	r2, r7, #15
 8001714:	2301      	movs	r3, #1
 8001716:	210a      	movs	r1, #10
 8001718:	6878      	ldr	r0, [r7, #4]
 800171a:	f7ff fe8c 	bl	8001436 <max30102_write>
}
 800171e:	bf00      	nop
 8001720:	3710      	adds	r7, #16
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}

08001726 <max30102_set_adc_resolution>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param adc ADC resolution enum (max30102_adc_t).
 */
void max30102_set_adc_resolution(max30102_t *obj, max30102_adc_t adc)
{
 8001726:	b580      	push	{r7, lr}
 8001728:	b084      	sub	sp, #16
 800172a:	af00      	add	r7, sp, #0
 800172c:	6078      	str	r0, [r7, #4]
 800172e:	460b      	mov	r3, r1
 8001730:	70fb      	strb	r3, [r7, #3]
    uint8_t config;
    max30102_read(obj, MAX30102_SPO2_CONFIG, &config, 1);
 8001732:	f107 020f 	add.w	r2, r7, #15
 8001736:	2301      	movs	r3, #1
 8001738:	210a      	movs	r1, #10
 800173a:	6878      	ldr	r0, [r7, #4]
 800173c:	f7ff feaf 	bl	800149e <max30102_read>
    config = (config & 0x1f) | (adc << MAX30102_SPO2_ADC_RGE);
 8001740:	7bfb      	ldrb	r3, [r7, #15]
 8001742:	b25b      	sxtb	r3, r3
 8001744:	f003 031f 	and.w	r3, r3, #31
 8001748:	b25a      	sxtb	r2, r3
 800174a:	78fb      	ldrb	r3, [r7, #3]
 800174c:	015b      	lsls	r3, r3, #5
 800174e:	b25b      	sxtb	r3, r3
 8001750:	4313      	orrs	r3, r2
 8001752:	b25b      	sxtb	r3, r3
 8001754:	b2db      	uxtb	r3, r3
 8001756:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_SPO2_CONFIG, &config, 1);
 8001758:	f107 020f 	add.w	r2, r7, #15
 800175c:	2301      	movs	r3, #1
 800175e:	210a      	movs	r1, #10
 8001760:	6878      	ldr	r0, [r7, #4]
 8001762:	f7ff fe68 	bl	8001436 <max30102_write>
}
 8001766:	bf00      	nop
 8001768:	3710      	adds	r7, #16
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}
	...

08001770 <max30102_set_led_current_1>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param ma LED current float (0 < ma < 51.0).
 */
void max30102_set_led_current_1(max30102_t *obj, float ma)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b084      	sub	sp, #16
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
 8001778:	ed87 0a00 	vstr	s0, [r7]
    uint8_t pa = ma / 0.2;
 800177c:	6838      	ldr	r0, [r7, #0]
 800177e:	f7fe fee3 	bl	8000548 <__aeabi_f2d>
 8001782:	a30d      	add	r3, pc, #52	@ (adr r3, 80017b8 <max30102_set_led_current_1+0x48>)
 8001784:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001788:	f7ff f860 	bl	800084c <__aeabi_ddiv>
 800178c:	4602      	mov	r2, r0
 800178e:	460b      	mov	r3, r1
 8001790:	4610      	mov	r0, r2
 8001792:	4619      	mov	r1, r3
 8001794:	f7ff f942 	bl	8000a1c <__aeabi_d2uiz>
 8001798:	4603      	mov	r3, r0
 800179a:	b2db      	uxtb	r3, r3
 800179c:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_LED_IR_PA1, &pa, 1);
 800179e:	f107 020f 	add.w	r2, r7, #15
 80017a2:	2301      	movs	r3, #1
 80017a4:	210c      	movs	r1, #12
 80017a6:	6878      	ldr	r0, [r7, #4]
 80017a8:	f7ff fe45 	bl	8001436 <max30102_write>
}
 80017ac:	bf00      	nop
 80017ae:	3710      	adds	r7, #16
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}
 80017b4:	f3af 8000 	nop.w
 80017b8:	9999999a 	.word	0x9999999a
 80017bc:	3fc99999 	.word	0x3fc99999

080017c0 <max30102_set_led_current_2>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param ma LED current float (0 < ma < 51.0).
 */
void max30102_set_led_current_2(max30102_t *obj, float ma)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b084      	sub	sp, #16
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
 80017c8:	ed87 0a00 	vstr	s0, [r7]
    uint8_t pa = ma / 0.2;
 80017cc:	6838      	ldr	r0, [r7, #0]
 80017ce:	f7fe febb 	bl	8000548 <__aeabi_f2d>
 80017d2:	a30d      	add	r3, pc, #52	@ (adr r3, 8001808 <max30102_set_led_current_2+0x48>)
 80017d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017d8:	f7ff f838 	bl	800084c <__aeabi_ddiv>
 80017dc:	4602      	mov	r2, r0
 80017de:	460b      	mov	r3, r1
 80017e0:	4610      	mov	r0, r2
 80017e2:	4619      	mov	r1, r3
 80017e4:	f7ff f91a 	bl	8000a1c <__aeabi_d2uiz>
 80017e8:	4603      	mov	r3, r0
 80017ea:	b2db      	uxtb	r3, r3
 80017ec:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_LED_RED_PA2, &pa, 1);
 80017ee:	f107 020f 	add.w	r2, r7, #15
 80017f2:	2301      	movs	r3, #1
 80017f4:	210d      	movs	r1, #13
 80017f6:	6878      	ldr	r0, [r7, #4]
 80017f8:	f7ff fe1d 	bl	8001436 <max30102_write>
}
 80017fc:	bf00      	nop
 80017fe:	3710      	adds	r7, #16
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}
 8001804:	f3af 8000 	nop.w
 8001808:	9999999a 	.word	0x9999999a
 800180c:	3fc99999 	.word	0x3fc99999

08001810 <max30102_set_fifo_config>:
 * @param smp_ave
 * @param roll_over_en Roll over enabled(1) or disabled(0).
 * @param fifo_a_full Number of empty samples when A_FULL interrupt issued (0 < fifo_a_full < 15).
 */
void max30102_set_fifo_config(max30102_t *obj, max30102_smp_ave_t smp_ave, uint8_t roll_over_en, uint8_t fifo_a_full)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b084      	sub	sp, #16
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
 8001818:	4608      	mov	r0, r1
 800181a:	4611      	mov	r1, r2
 800181c:	461a      	mov	r2, r3
 800181e:	4603      	mov	r3, r0
 8001820:	70fb      	strb	r3, [r7, #3]
 8001822:	460b      	mov	r3, r1
 8001824:	70bb      	strb	r3, [r7, #2]
 8001826:	4613      	mov	r3, r2
 8001828:	707b      	strb	r3, [r7, #1]
    uint8_t config = 0x00;
 800182a:	2300      	movs	r3, #0
 800182c:	73fb      	strb	r3, [r7, #15]
    config |= smp_ave << MAX30102_FIFO_CONFIG_SMP_AVE;
 800182e:	78fb      	ldrb	r3, [r7, #3]
 8001830:	015b      	lsls	r3, r3, #5
 8001832:	b25a      	sxtb	r2, r3
 8001834:	7bfb      	ldrb	r3, [r7, #15]
 8001836:	b25b      	sxtb	r3, r3
 8001838:	4313      	orrs	r3, r2
 800183a:	b25b      	sxtb	r3, r3
 800183c:	b2db      	uxtb	r3, r3
 800183e:	73fb      	strb	r3, [r7, #15]
    config |= ((roll_over_en & 0x01) << MAX30102_FIFO_CONFIG_ROLL_OVER_EN);
 8001840:	78bb      	ldrb	r3, [r7, #2]
 8001842:	011b      	lsls	r3, r3, #4
 8001844:	b25b      	sxtb	r3, r3
 8001846:	f003 0310 	and.w	r3, r3, #16
 800184a:	b25a      	sxtb	r2, r3
 800184c:	7bfb      	ldrb	r3, [r7, #15]
 800184e:	b25b      	sxtb	r3, r3
 8001850:	4313      	orrs	r3, r2
 8001852:	b25b      	sxtb	r3, r3
 8001854:	b2db      	uxtb	r3, r3
 8001856:	73fb      	strb	r3, [r7, #15]
    config |= ((fifo_a_full & 0x0f) << MAX30102_FIFO_CONFIG_FIFO_A_FULL);
 8001858:	f997 3001 	ldrsb.w	r3, [r7, #1]
 800185c:	f003 030f 	and.w	r3, r3, #15
 8001860:	b25a      	sxtb	r2, r3
 8001862:	7bfb      	ldrb	r3, [r7, #15]
 8001864:	b25b      	sxtb	r3, r3
 8001866:	4313      	orrs	r3, r2
 8001868:	b25b      	sxtb	r3, r3
 800186a:	b2db      	uxtb	r3, r3
 800186c:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_FIFO_CONFIG, &config, 1);
 800186e:	f107 020f 	add.w	r2, r7, #15
 8001872:	2301      	movs	r3, #1
 8001874:	2108      	movs	r1, #8
 8001876:	6878      	ldr	r0, [r7, #4]
 8001878:	f7ff fddd 	bl	8001436 <max30102_write>
}
 800187c:	bf00      	nop
 800187e:	3710      	adds	r7, #16
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}

08001884 <max30102_clear_fifo>:
 * @brief Clear all FIFO pointers in the sensor.
 *
 * @param obj Pointer to max30102_t object instance.
 */
void max30102_clear_fifo(max30102_t *obj)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b084      	sub	sp, #16
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
    uint8_t val = 0x00;
 800188c:	2300      	movs	r3, #0
 800188e:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_FIFO_WR_PTR, &val, 3);
 8001890:	f107 020f 	add.w	r2, r7, #15
 8001894:	2303      	movs	r3, #3
 8001896:	2104      	movs	r1, #4
 8001898:	6878      	ldr	r0, [r7, #4]
 800189a:	f7ff fdcc 	bl	8001436 <max30102_write>
    max30102_write(obj, MAX30102_FIFO_RD_PTR, &val, 3);
 800189e:	f107 020f 	add.w	r2, r7, #15
 80018a2:	2303      	movs	r3, #3
 80018a4:	2106      	movs	r1, #6
 80018a6:	6878      	ldr	r0, [r7, #4]
 80018a8:	f7ff fdc5 	bl	8001436 <max30102_write>
    max30102_write(obj, MAX30102_OVF_COUNTER, &val, 3);
 80018ac:	f107 020f 	add.w	r2, r7, #15
 80018b0:	2303      	movs	r3, #3
 80018b2:	2105      	movs	r1, #5
 80018b4:	6878      	ldr	r0, [r7, #4]
 80018b6:	f7ff fdbe 	bl	8001436 <max30102_write>
}
 80018ba:	bf00      	nop
 80018bc:	3710      	adds	r7, #16
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}

080018c2 <max30102_read_fifo>:
 * @brief Read FIFO content and store to buffer in max30102_t object instance.
 *
 * @param obj Pointer to max30102_t object instance.
 */
void max30102_read_fifo(max30102_t *obj)
{
 80018c2:	b580      	push	{r7, lr}
 80018c4:	b088      	sub	sp, #32
 80018c6:	af00      	add	r7, sp, #0
 80018c8:	6078      	str	r0, [r7, #4]
    // First transaction: Get the FIFO_WR_PTR
    uint8_t wr_ptr = 0, rd_ptr = 0;
 80018ca:	2300      	movs	r3, #0
 80018cc:	74fb      	strb	r3, [r7, #19]
 80018ce:	2300      	movs	r3, #0
 80018d0:	74bb      	strb	r3, [r7, #18]
    max30102_read(obj, MAX30102_FIFO_WR_PTR, &wr_ptr, 1);
 80018d2:	f107 0213 	add.w	r2, r7, #19
 80018d6:	2301      	movs	r3, #1
 80018d8:	2104      	movs	r1, #4
 80018da:	6878      	ldr	r0, [r7, #4]
 80018dc:	f7ff fddf 	bl	800149e <max30102_read>
    max30102_read(obj, MAX30102_FIFO_RD_PTR, &rd_ptr, 1);
 80018e0:	f107 0212 	add.w	r2, r7, #18
 80018e4:	2301      	movs	r3, #1
 80018e6:	2106      	movs	r1, #6
 80018e8:	6878      	ldr	r0, [r7, #4]
 80018ea:	f7ff fdd8 	bl	800149e <max30102_read>

    int8_t num_samples;

    num_samples = (int8_t)wr_ptr - (int8_t)rd_ptr;
 80018ee:	7cfa      	ldrb	r2, [r7, #19]
 80018f0:	7cbb      	ldrb	r3, [r7, #18]
 80018f2:	1ad3      	subs	r3, r2, r3
 80018f4:	b2db      	uxtb	r3, r3
 80018f6:	77fb      	strb	r3, [r7, #31]
    if (num_samples < 1)
 80018f8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	dc03      	bgt.n	8001908 <max30102_read_fifo+0x46>
    {
        num_samples += 32;
 8001900:	7ffb      	ldrb	r3, [r7, #31]
 8001902:	3320      	adds	r3, #32
 8001904:	b2db      	uxtb	r3, r3
 8001906:	77fb      	strb	r3, [r7, #31]
    }

    // Second transaction: Read NUM_SAMPLES_TO_READ samples from the FIFO
    for (int8_t i = 0; i < num_samples; i++)
 8001908:	2300      	movs	r3, #0
 800190a:	77bb      	strb	r3, [r7, #30]
 800190c:	e033      	b.n	8001976 <max30102_read_fifo+0xb4>
    {
        uint8_t sample[6];
        max30102_read(obj, MAX30102_FIFO_DATA, sample, 6);
 800190e:	f107 020c 	add.w	r2, r7, #12
 8001912:	2306      	movs	r3, #6
 8001914:	2107      	movs	r1, #7
 8001916:	6878      	ldr	r0, [r7, #4]
 8001918:	f7ff fdc1 	bl	800149e <max30102_read>
        uint32_t ir_sample = ((uint32_t)(sample[0] << 16) | (uint32_t)(sample[1] << 8) | (uint32_t)(sample[2])) & 0x3ffff;
 800191c:	7b3b      	ldrb	r3, [r7, #12]
 800191e:	041a      	lsls	r2, r3, #16
 8001920:	7b7b      	ldrb	r3, [r7, #13]
 8001922:	021b      	lsls	r3, r3, #8
 8001924:	4313      	orrs	r3, r2
 8001926:	7bba      	ldrb	r2, [r7, #14]
 8001928:	4313      	orrs	r3, r2
 800192a:	f3c3 0311 	ubfx	r3, r3, #0, #18
 800192e:	61bb      	str	r3, [r7, #24]
        uint32_t red_sample = ((uint32_t)(sample[3] << 16) | (uint32_t)(sample[4] << 8) | (uint32_t)(sample[5])) & 0x3ffff;
 8001930:	7bfb      	ldrb	r3, [r7, #15]
 8001932:	041a      	lsls	r2, r3, #16
 8001934:	7c3b      	ldrb	r3, [r7, #16]
 8001936:	021b      	lsls	r3, r3, #8
 8001938:	4313      	orrs	r3, r2
 800193a:	7c7a      	ldrb	r2, [r7, #17]
 800193c:	4313      	orrs	r3, r2
 800193e:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8001942:	617b      	str	r3, [r7, #20]
        obj->_ir_samples[i] = ir_sample;
 8001944:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8001948:	687a      	ldr	r2, [r7, #4]
 800194a:	009b      	lsls	r3, r3, #2
 800194c:	4413      	add	r3, r2
 800194e:	69ba      	ldr	r2, [r7, #24]
 8001950:	605a      	str	r2, [r3, #4]
        obj->_red_samples[i] = red_sample;
 8001952:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8001956:	687a      	ldr	r2, [r7, #4]
 8001958:	3320      	adds	r3, #32
 800195a:	009b      	lsls	r3, r3, #2
 800195c:	4413      	add	r3, r2
 800195e:	697a      	ldr	r2, [r7, #20]
 8001960:	605a      	str	r2, [r3, #4]
        max30102_plot(ir_sample, red_sample);
 8001962:	6979      	ldr	r1, [r7, #20]
 8001964:	69b8      	ldr	r0, [r7, #24]
 8001966:	f7ff fa07 	bl	8000d78 <max30102_plot>
    for (int8_t i = 0; i < num_samples; i++)
 800196a:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800196e:	b2db      	uxtb	r3, r3
 8001970:	3301      	adds	r3, #1
 8001972:	b2db      	uxtb	r3, r3
 8001974:	77bb      	strb	r3, [r7, #30]
 8001976:	f997 201e 	ldrsb.w	r2, [r7, #30]
 800197a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800197e:	429a      	cmp	r2, r3
 8001980:	dbc5      	blt.n	800190e <max30102_read_fifo+0x4c>
    }
}
 8001982:	bf00      	nop
 8001984:	bf00      	nop
 8001986:	3720      	adds	r7, #32
 8001988:	46bd      	mov	sp, r7
 800198a:	bd80      	pop	{r7, pc}

0800198c <max30102_read_temp>:
 * @param temp_int Pointer to store the integer part of temperature. Stored in 2's complement format.
 * @param temp_frac Pointer to store the fractional part of temperature. Increments of 0.0625 deg C.
 */

void max30102_read_temp(max30102_t *obj, int8_t *temp_int, uint8_t *temp_frac)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b084      	sub	sp, #16
 8001990:	af00      	add	r7, sp, #0
 8001992:	60f8      	str	r0, [r7, #12]
 8001994:	60b9      	str	r1, [r7, #8]
 8001996:	607a      	str	r2, [r7, #4]
    max30102_read(obj, MAX30102_DIE_TINT, (uint8_t *)temp_int, 1);
 8001998:	2301      	movs	r3, #1
 800199a:	68ba      	ldr	r2, [r7, #8]
 800199c:	211f      	movs	r1, #31
 800199e:	68f8      	ldr	r0, [r7, #12]
 80019a0:	f7ff fd7d 	bl	800149e <max30102_read>
    max30102_read(obj, MAX30102_DIE_TFRAC, temp_frac, 1);
 80019a4:	2301      	movs	r3, #1
 80019a6:	687a      	ldr	r2, [r7, #4]
 80019a8:	2120      	movs	r1, #32
 80019aa:	68f8      	ldr	r0, [r7, #12]
 80019ac:	f7ff fd77 	bl	800149e <max30102_read>
}
 80019b0:	bf00      	nop
 80019b2:	3710      	adds	r7, #16
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd80      	pop	{r7, pc}

080019b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80019bc:	4b0e      	ldr	r3, [pc, #56]	@ (80019f8 <HAL_Init+0x40>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4a0d      	ldr	r2, [pc, #52]	@ (80019f8 <HAL_Init+0x40>)
 80019c2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80019c6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80019c8:	4b0b      	ldr	r3, [pc, #44]	@ (80019f8 <HAL_Init+0x40>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a0a      	ldr	r2, [pc, #40]	@ (80019f8 <HAL_Init+0x40>)
 80019ce:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80019d2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019d4:	4b08      	ldr	r3, [pc, #32]	@ (80019f8 <HAL_Init+0x40>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4a07      	ldr	r2, [pc, #28]	@ (80019f8 <HAL_Init+0x40>)
 80019da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80019de:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019e0:	2003      	movs	r0, #3
 80019e2:	f000 f92b 	bl	8001c3c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019e6:	200f      	movs	r0, #15
 80019e8:	f000 f808 	bl	80019fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019ec:	f7ff fb32 	bl	8001054 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019f0:	2300      	movs	r3, #0
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	40023c00 	.word	0x40023c00

080019fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b082      	sub	sp, #8
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a04:	4b12      	ldr	r3, [pc, #72]	@ (8001a50 <HAL_InitTick+0x54>)
 8001a06:	681a      	ldr	r2, [r3, #0]
 8001a08:	4b12      	ldr	r3, [pc, #72]	@ (8001a54 <HAL_InitTick+0x58>)
 8001a0a:	781b      	ldrb	r3, [r3, #0]
 8001a0c:	4619      	mov	r1, r3
 8001a0e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a12:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a16:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f000 f943 	bl	8001ca6 <HAL_SYSTICK_Config>
 8001a20:	4603      	mov	r3, r0
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d001      	beq.n	8001a2a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a26:	2301      	movs	r3, #1
 8001a28:	e00e      	b.n	8001a48 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	2b0f      	cmp	r3, #15
 8001a2e:	d80a      	bhi.n	8001a46 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a30:	2200      	movs	r2, #0
 8001a32:	6879      	ldr	r1, [r7, #4]
 8001a34:	f04f 30ff 	mov.w	r0, #4294967295
 8001a38:	f000 f90b 	bl	8001c52 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a3c:	4a06      	ldr	r2, [pc, #24]	@ (8001a58 <HAL_InitTick+0x5c>)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a42:	2300      	movs	r3, #0
 8001a44:	e000      	b.n	8001a48 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a46:	2301      	movs	r3, #1
}
 8001a48:	4618      	mov	r0, r3
 8001a4a:	3708      	adds	r7, #8
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}
 8001a50:	20000000 	.word	0x20000000
 8001a54:	20000008 	.word	0x20000008
 8001a58:	20000004 	.word	0x20000004

08001a5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a60:	4b06      	ldr	r3, [pc, #24]	@ (8001a7c <HAL_IncTick+0x20>)
 8001a62:	781b      	ldrb	r3, [r3, #0]
 8001a64:	461a      	mov	r2, r3
 8001a66:	4b06      	ldr	r3, [pc, #24]	@ (8001a80 <HAL_IncTick+0x24>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4413      	add	r3, r2
 8001a6c:	4a04      	ldr	r2, [pc, #16]	@ (8001a80 <HAL_IncTick+0x24>)
 8001a6e:	6013      	str	r3, [r2, #0]
}
 8001a70:	bf00      	nop
 8001a72:	46bd      	mov	sp, r7
 8001a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a78:	4770      	bx	lr
 8001a7a:	bf00      	nop
 8001a7c:	20000008 	.word	0x20000008
 8001a80:	2000022c 	.word	0x2000022c

08001a84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a84:	b480      	push	{r7}
 8001a86:	af00      	add	r7, sp, #0
  return uwTick;
 8001a88:	4b03      	ldr	r3, [pc, #12]	@ (8001a98 <HAL_GetTick+0x14>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
}
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a94:	4770      	bx	lr
 8001a96:	bf00      	nop
 8001a98:	2000022c 	.word	0x2000022c

08001a9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	b085      	sub	sp, #20
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	f003 0307 	and.w	r3, r3, #7
 8001aaa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001aac:	4b0c      	ldr	r3, [pc, #48]	@ (8001ae0 <__NVIC_SetPriorityGrouping+0x44>)
 8001aae:	68db      	ldr	r3, [r3, #12]
 8001ab0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ab2:	68ba      	ldr	r2, [r7, #8]
 8001ab4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001ab8:	4013      	ands	r3, r2
 8001aba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ac0:	68bb      	ldr	r3, [r7, #8]
 8001ac2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ac4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001ac8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001acc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ace:	4a04      	ldr	r2, [pc, #16]	@ (8001ae0 <__NVIC_SetPriorityGrouping+0x44>)
 8001ad0:	68bb      	ldr	r3, [r7, #8]
 8001ad2:	60d3      	str	r3, [r2, #12]
}
 8001ad4:	bf00      	nop
 8001ad6:	3714      	adds	r7, #20
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ade:	4770      	bx	lr
 8001ae0:	e000ed00 	.word	0xe000ed00

08001ae4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ae8:	4b04      	ldr	r3, [pc, #16]	@ (8001afc <__NVIC_GetPriorityGrouping+0x18>)
 8001aea:	68db      	ldr	r3, [r3, #12]
 8001aec:	0a1b      	lsrs	r3, r3, #8
 8001aee:	f003 0307 	and.w	r3, r3, #7
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	46bd      	mov	sp, r7
 8001af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afa:	4770      	bx	lr
 8001afc:	e000ed00 	.word	0xe000ed00

08001b00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b00:	b480      	push	{r7}
 8001b02:	b083      	sub	sp, #12
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	4603      	mov	r3, r0
 8001b08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	db0b      	blt.n	8001b2a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b12:	79fb      	ldrb	r3, [r7, #7]
 8001b14:	f003 021f 	and.w	r2, r3, #31
 8001b18:	4907      	ldr	r1, [pc, #28]	@ (8001b38 <__NVIC_EnableIRQ+0x38>)
 8001b1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b1e:	095b      	lsrs	r3, r3, #5
 8001b20:	2001      	movs	r0, #1
 8001b22:	fa00 f202 	lsl.w	r2, r0, r2
 8001b26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001b2a:	bf00      	nop
 8001b2c:	370c      	adds	r7, #12
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b34:	4770      	bx	lr
 8001b36:	bf00      	nop
 8001b38:	e000e100 	.word	0xe000e100

08001b3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b083      	sub	sp, #12
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	4603      	mov	r3, r0
 8001b44:	6039      	str	r1, [r7, #0]
 8001b46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	db0a      	blt.n	8001b66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	b2da      	uxtb	r2, r3
 8001b54:	490c      	ldr	r1, [pc, #48]	@ (8001b88 <__NVIC_SetPriority+0x4c>)
 8001b56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b5a:	0112      	lsls	r2, r2, #4
 8001b5c:	b2d2      	uxtb	r2, r2
 8001b5e:	440b      	add	r3, r1
 8001b60:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b64:	e00a      	b.n	8001b7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	b2da      	uxtb	r2, r3
 8001b6a:	4908      	ldr	r1, [pc, #32]	@ (8001b8c <__NVIC_SetPriority+0x50>)
 8001b6c:	79fb      	ldrb	r3, [r7, #7]
 8001b6e:	f003 030f 	and.w	r3, r3, #15
 8001b72:	3b04      	subs	r3, #4
 8001b74:	0112      	lsls	r2, r2, #4
 8001b76:	b2d2      	uxtb	r2, r2
 8001b78:	440b      	add	r3, r1
 8001b7a:	761a      	strb	r2, [r3, #24]
}
 8001b7c:	bf00      	nop
 8001b7e:	370c      	adds	r7, #12
 8001b80:	46bd      	mov	sp, r7
 8001b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b86:	4770      	bx	lr
 8001b88:	e000e100 	.word	0xe000e100
 8001b8c:	e000ed00 	.word	0xe000ed00

08001b90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b089      	sub	sp, #36	@ 0x24
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	60f8      	str	r0, [r7, #12]
 8001b98:	60b9      	str	r1, [r7, #8]
 8001b9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	f003 0307 	and.w	r3, r3, #7
 8001ba2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ba4:	69fb      	ldr	r3, [r7, #28]
 8001ba6:	f1c3 0307 	rsb	r3, r3, #7
 8001baa:	2b04      	cmp	r3, #4
 8001bac:	bf28      	it	cs
 8001bae:	2304      	movcs	r3, #4
 8001bb0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bb2:	69fb      	ldr	r3, [r7, #28]
 8001bb4:	3304      	adds	r3, #4
 8001bb6:	2b06      	cmp	r3, #6
 8001bb8:	d902      	bls.n	8001bc0 <NVIC_EncodePriority+0x30>
 8001bba:	69fb      	ldr	r3, [r7, #28]
 8001bbc:	3b03      	subs	r3, #3
 8001bbe:	e000      	b.n	8001bc2 <NVIC_EncodePriority+0x32>
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bc4:	f04f 32ff 	mov.w	r2, #4294967295
 8001bc8:	69bb      	ldr	r3, [r7, #24]
 8001bca:	fa02 f303 	lsl.w	r3, r2, r3
 8001bce:	43da      	mvns	r2, r3
 8001bd0:	68bb      	ldr	r3, [r7, #8]
 8001bd2:	401a      	ands	r2, r3
 8001bd4:	697b      	ldr	r3, [r7, #20]
 8001bd6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bd8:	f04f 31ff 	mov.w	r1, #4294967295
 8001bdc:	697b      	ldr	r3, [r7, #20]
 8001bde:	fa01 f303 	lsl.w	r3, r1, r3
 8001be2:	43d9      	mvns	r1, r3
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001be8:	4313      	orrs	r3, r2
         );
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	3724      	adds	r7, #36	@ 0x24
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf4:	4770      	bx	lr
	...

08001bf8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b082      	sub	sp, #8
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	3b01      	subs	r3, #1
 8001c04:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001c08:	d301      	bcc.n	8001c0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	e00f      	b.n	8001c2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c0e:	4a0a      	ldr	r2, [pc, #40]	@ (8001c38 <SysTick_Config+0x40>)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	3b01      	subs	r3, #1
 8001c14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c16:	210f      	movs	r1, #15
 8001c18:	f04f 30ff 	mov.w	r0, #4294967295
 8001c1c:	f7ff ff8e 	bl	8001b3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c20:	4b05      	ldr	r3, [pc, #20]	@ (8001c38 <SysTick_Config+0x40>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c26:	4b04      	ldr	r3, [pc, #16]	@ (8001c38 <SysTick_Config+0x40>)
 8001c28:	2207      	movs	r2, #7
 8001c2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c2c:	2300      	movs	r3, #0
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	3708      	adds	r7, #8
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	e000e010 	.word	0xe000e010

08001c3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b082      	sub	sp, #8
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c44:	6878      	ldr	r0, [r7, #4]
 8001c46:	f7ff ff29 	bl	8001a9c <__NVIC_SetPriorityGrouping>
}
 8001c4a:	bf00      	nop
 8001c4c:	3708      	adds	r7, #8
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}

08001c52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c52:	b580      	push	{r7, lr}
 8001c54:	b086      	sub	sp, #24
 8001c56:	af00      	add	r7, sp, #0
 8001c58:	4603      	mov	r3, r0
 8001c5a:	60b9      	str	r1, [r7, #8]
 8001c5c:	607a      	str	r2, [r7, #4]
 8001c5e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c60:	2300      	movs	r3, #0
 8001c62:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c64:	f7ff ff3e 	bl	8001ae4 <__NVIC_GetPriorityGrouping>
 8001c68:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c6a:	687a      	ldr	r2, [r7, #4]
 8001c6c:	68b9      	ldr	r1, [r7, #8]
 8001c6e:	6978      	ldr	r0, [r7, #20]
 8001c70:	f7ff ff8e 	bl	8001b90 <NVIC_EncodePriority>
 8001c74:	4602      	mov	r2, r0
 8001c76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c7a:	4611      	mov	r1, r2
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f7ff ff5d 	bl	8001b3c <__NVIC_SetPriority>
}
 8001c82:	bf00      	nop
 8001c84:	3718      	adds	r7, #24
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}

08001c8a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c8a:	b580      	push	{r7, lr}
 8001c8c:	b082      	sub	sp, #8
 8001c8e:	af00      	add	r7, sp, #0
 8001c90:	4603      	mov	r3, r0
 8001c92:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c98:	4618      	mov	r0, r3
 8001c9a:	f7ff ff31 	bl	8001b00 <__NVIC_EnableIRQ>
}
 8001c9e:	bf00      	nop
 8001ca0:	3708      	adds	r7, #8
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}

08001ca6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ca6:	b580      	push	{r7, lr}
 8001ca8:	b082      	sub	sp, #8
 8001caa:	af00      	add	r7, sp, #0
 8001cac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001cae:	6878      	ldr	r0, [r7, #4]
 8001cb0:	f7ff ffa2 	bl	8001bf8 <SysTick_Config>
 8001cb4:	4603      	mov	r3, r0
}
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	3708      	adds	r7, #8
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}
	...

08001cc0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b089      	sub	sp, #36	@ 0x24
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
 8001cc8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	61fb      	str	r3, [r7, #28]
 8001cda:	e159      	b.n	8001f90 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001cdc:	2201      	movs	r2, #1
 8001cde:	69fb      	ldr	r3, [r7, #28]
 8001ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	697a      	ldr	r2, [r7, #20]
 8001cec:	4013      	ands	r3, r2
 8001cee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001cf0:	693a      	ldr	r2, [r7, #16]
 8001cf2:	697b      	ldr	r3, [r7, #20]
 8001cf4:	429a      	cmp	r2, r3
 8001cf6:	f040 8148 	bne.w	8001f8a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	f003 0303 	and.w	r3, r3, #3
 8001d02:	2b01      	cmp	r3, #1
 8001d04:	d005      	beq.n	8001d12 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d0e:	2b02      	cmp	r3, #2
 8001d10:	d130      	bne.n	8001d74 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	689b      	ldr	r3, [r3, #8]
 8001d16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d18:	69fb      	ldr	r3, [r7, #28]
 8001d1a:	005b      	lsls	r3, r3, #1
 8001d1c:	2203      	movs	r2, #3
 8001d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d22:	43db      	mvns	r3, r3
 8001d24:	69ba      	ldr	r2, [r7, #24]
 8001d26:	4013      	ands	r3, r2
 8001d28:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	68da      	ldr	r2, [r3, #12]
 8001d2e:	69fb      	ldr	r3, [r7, #28]
 8001d30:	005b      	lsls	r3, r3, #1
 8001d32:	fa02 f303 	lsl.w	r3, r2, r3
 8001d36:	69ba      	ldr	r2, [r7, #24]
 8001d38:	4313      	orrs	r3, r2
 8001d3a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	69ba      	ldr	r2, [r7, #24]
 8001d40:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d48:	2201      	movs	r2, #1
 8001d4a:	69fb      	ldr	r3, [r7, #28]
 8001d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d50:	43db      	mvns	r3, r3
 8001d52:	69ba      	ldr	r2, [r7, #24]
 8001d54:	4013      	ands	r3, r2
 8001d56:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	091b      	lsrs	r3, r3, #4
 8001d5e:	f003 0201 	and.w	r2, r3, #1
 8001d62:	69fb      	ldr	r3, [r7, #28]
 8001d64:	fa02 f303 	lsl.w	r3, r2, r3
 8001d68:	69ba      	ldr	r2, [r7, #24]
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	69ba      	ldr	r2, [r7, #24]
 8001d72:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	f003 0303 	and.w	r3, r3, #3
 8001d7c:	2b03      	cmp	r3, #3
 8001d7e:	d017      	beq.n	8001db0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	68db      	ldr	r3, [r3, #12]
 8001d84:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d86:	69fb      	ldr	r3, [r7, #28]
 8001d88:	005b      	lsls	r3, r3, #1
 8001d8a:	2203      	movs	r2, #3
 8001d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d90:	43db      	mvns	r3, r3
 8001d92:	69ba      	ldr	r2, [r7, #24]
 8001d94:	4013      	ands	r3, r2
 8001d96:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	689a      	ldr	r2, [r3, #8]
 8001d9c:	69fb      	ldr	r3, [r7, #28]
 8001d9e:	005b      	lsls	r3, r3, #1
 8001da0:	fa02 f303 	lsl.w	r3, r2, r3
 8001da4:	69ba      	ldr	r2, [r7, #24]
 8001da6:	4313      	orrs	r3, r2
 8001da8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	69ba      	ldr	r2, [r7, #24]
 8001dae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	f003 0303 	and.w	r3, r3, #3
 8001db8:	2b02      	cmp	r3, #2
 8001dba:	d123      	bne.n	8001e04 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001dbc:	69fb      	ldr	r3, [r7, #28]
 8001dbe:	08da      	lsrs	r2, r3, #3
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	3208      	adds	r2, #8
 8001dc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001dc8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001dca:	69fb      	ldr	r3, [r7, #28]
 8001dcc:	f003 0307 	and.w	r3, r3, #7
 8001dd0:	009b      	lsls	r3, r3, #2
 8001dd2:	220f      	movs	r2, #15
 8001dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd8:	43db      	mvns	r3, r3
 8001dda:	69ba      	ldr	r2, [r7, #24]
 8001ddc:	4013      	ands	r3, r2
 8001dde:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	691a      	ldr	r2, [r3, #16]
 8001de4:	69fb      	ldr	r3, [r7, #28]
 8001de6:	f003 0307 	and.w	r3, r3, #7
 8001dea:	009b      	lsls	r3, r3, #2
 8001dec:	fa02 f303 	lsl.w	r3, r2, r3
 8001df0:	69ba      	ldr	r2, [r7, #24]
 8001df2:	4313      	orrs	r3, r2
 8001df4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001df6:	69fb      	ldr	r3, [r7, #28]
 8001df8:	08da      	lsrs	r2, r3, #3
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	3208      	adds	r2, #8
 8001dfe:	69b9      	ldr	r1, [r7, #24]
 8001e00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e0a:	69fb      	ldr	r3, [r7, #28]
 8001e0c:	005b      	lsls	r3, r3, #1
 8001e0e:	2203      	movs	r2, #3
 8001e10:	fa02 f303 	lsl.w	r3, r2, r3
 8001e14:	43db      	mvns	r3, r3
 8001e16:	69ba      	ldr	r2, [r7, #24]
 8001e18:	4013      	ands	r3, r2
 8001e1a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	f003 0203 	and.w	r2, r3, #3
 8001e24:	69fb      	ldr	r3, [r7, #28]
 8001e26:	005b      	lsls	r3, r3, #1
 8001e28:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2c:	69ba      	ldr	r2, [r7, #24]
 8001e2e:	4313      	orrs	r3, r2
 8001e30:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	69ba      	ldr	r2, [r7, #24]
 8001e36:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	f000 80a2 	beq.w	8001f8a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e46:	2300      	movs	r3, #0
 8001e48:	60fb      	str	r3, [r7, #12]
 8001e4a:	4b57      	ldr	r3, [pc, #348]	@ (8001fa8 <HAL_GPIO_Init+0x2e8>)
 8001e4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e4e:	4a56      	ldr	r2, [pc, #344]	@ (8001fa8 <HAL_GPIO_Init+0x2e8>)
 8001e50:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e54:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e56:	4b54      	ldr	r3, [pc, #336]	@ (8001fa8 <HAL_GPIO_Init+0x2e8>)
 8001e58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e5a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e5e:	60fb      	str	r3, [r7, #12]
 8001e60:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e62:	4a52      	ldr	r2, [pc, #328]	@ (8001fac <HAL_GPIO_Init+0x2ec>)
 8001e64:	69fb      	ldr	r3, [r7, #28]
 8001e66:	089b      	lsrs	r3, r3, #2
 8001e68:	3302      	adds	r3, #2
 8001e6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e70:	69fb      	ldr	r3, [r7, #28]
 8001e72:	f003 0303 	and.w	r3, r3, #3
 8001e76:	009b      	lsls	r3, r3, #2
 8001e78:	220f      	movs	r2, #15
 8001e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7e:	43db      	mvns	r3, r3
 8001e80:	69ba      	ldr	r2, [r7, #24]
 8001e82:	4013      	ands	r3, r2
 8001e84:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	4a49      	ldr	r2, [pc, #292]	@ (8001fb0 <HAL_GPIO_Init+0x2f0>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d019      	beq.n	8001ec2 <HAL_GPIO_Init+0x202>
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	4a48      	ldr	r2, [pc, #288]	@ (8001fb4 <HAL_GPIO_Init+0x2f4>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d013      	beq.n	8001ebe <HAL_GPIO_Init+0x1fe>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	4a47      	ldr	r2, [pc, #284]	@ (8001fb8 <HAL_GPIO_Init+0x2f8>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d00d      	beq.n	8001eba <HAL_GPIO_Init+0x1fa>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	4a46      	ldr	r2, [pc, #280]	@ (8001fbc <HAL_GPIO_Init+0x2fc>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d007      	beq.n	8001eb6 <HAL_GPIO_Init+0x1f6>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	4a45      	ldr	r2, [pc, #276]	@ (8001fc0 <HAL_GPIO_Init+0x300>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d101      	bne.n	8001eb2 <HAL_GPIO_Init+0x1f2>
 8001eae:	2304      	movs	r3, #4
 8001eb0:	e008      	b.n	8001ec4 <HAL_GPIO_Init+0x204>
 8001eb2:	2307      	movs	r3, #7
 8001eb4:	e006      	b.n	8001ec4 <HAL_GPIO_Init+0x204>
 8001eb6:	2303      	movs	r3, #3
 8001eb8:	e004      	b.n	8001ec4 <HAL_GPIO_Init+0x204>
 8001eba:	2302      	movs	r3, #2
 8001ebc:	e002      	b.n	8001ec4 <HAL_GPIO_Init+0x204>
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	e000      	b.n	8001ec4 <HAL_GPIO_Init+0x204>
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	69fa      	ldr	r2, [r7, #28]
 8001ec6:	f002 0203 	and.w	r2, r2, #3
 8001eca:	0092      	lsls	r2, r2, #2
 8001ecc:	4093      	lsls	r3, r2
 8001ece:	69ba      	ldr	r2, [r7, #24]
 8001ed0:	4313      	orrs	r3, r2
 8001ed2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ed4:	4935      	ldr	r1, [pc, #212]	@ (8001fac <HAL_GPIO_Init+0x2ec>)
 8001ed6:	69fb      	ldr	r3, [r7, #28]
 8001ed8:	089b      	lsrs	r3, r3, #2
 8001eda:	3302      	adds	r3, #2
 8001edc:	69ba      	ldr	r2, [r7, #24]
 8001ede:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ee2:	4b38      	ldr	r3, [pc, #224]	@ (8001fc4 <HAL_GPIO_Init+0x304>)
 8001ee4:	689b      	ldr	r3, [r3, #8]
 8001ee6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ee8:	693b      	ldr	r3, [r7, #16]
 8001eea:	43db      	mvns	r3, r3
 8001eec:	69ba      	ldr	r2, [r7, #24]
 8001eee:	4013      	ands	r3, r2
 8001ef0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d003      	beq.n	8001f06 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001efe:	69ba      	ldr	r2, [r7, #24]
 8001f00:	693b      	ldr	r3, [r7, #16]
 8001f02:	4313      	orrs	r3, r2
 8001f04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f06:	4a2f      	ldr	r2, [pc, #188]	@ (8001fc4 <HAL_GPIO_Init+0x304>)
 8001f08:	69bb      	ldr	r3, [r7, #24]
 8001f0a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f0c:	4b2d      	ldr	r3, [pc, #180]	@ (8001fc4 <HAL_GPIO_Init+0x304>)
 8001f0e:	68db      	ldr	r3, [r3, #12]
 8001f10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f12:	693b      	ldr	r3, [r7, #16]
 8001f14:	43db      	mvns	r3, r3
 8001f16:	69ba      	ldr	r2, [r7, #24]
 8001f18:	4013      	ands	r3, r2
 8001f1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d003      	beq.n	8001f30 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001f28:	69ba      	ldr	r2, [r7, #24]
 8001f2a:	693b      	ldr	r3, [r7, #16]
 8001f2c:	4313      	orrs	r3, r2
 8001f2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f30:	4a24      	ldr	r2, [pc, #144]	@ (8001fc4 <HAL_GPIO_Init+0x304>)
 8001f32:	69bb      	ldr	r3, [r7, #24]
 8001f34:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001f36:	4b23      	ldr	r3, [pc, #140]	@ (8001fc4 <HAL_GPIO_Init+0x304>)
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f3c:	693b      	ldr	r3, [r7, #16]
 8001f3e:	43db      	mvns	r3, r3
 8001f40:	69ba      	ldr	r2, [r7, #24]
 8001f42:	4013      	ands	r3, r2
 8001f44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d003      	beq.n	8001f5a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001f52:	69ba      	ldr	r2, [r7, #24]
 8001f54:	693b      	ldr	r3, [r7, #16]
 8001f56:	4313      	orrs	r3, r2
 8001f58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f5a:	4a1a      	ldr	r2, [pc, #104]	@ (8001fc4 <HAL_GPIO_Init+0x304>)
 8001f5c:	69bb      	ldr	r3, [r7, #24]
 8001f5e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f60:	4b18      	ldr	r3, [pc, #96]	@ (8001fc4 <HAL_GPIO_Init+0x304>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f66:	693b      	ldr	r3, [r7, #16]
 8001f68:	43db      	mvns	r3, r3
 8001f6a:	69ba      	ldr	r2, [r7, #24]
 8001f6c:	4013      	ands	r3, r2
 8001f6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d003      	beq.n	8001f84 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001f7c:	69ba      	ldr	r2, [r7, #24]
 8001f7e:	693b      	ldr	r3, [r7, #16]
 8001f80:	4313      	orrs	r3, r2
 8001f82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f84:	4a0f      	ldr	r2, [pc, #60]	@ (8001fc4 <HAL_GPIO_Init+0x304>)
 8001f86:	69bb      	ldr	r3, [r7, #24]
 8001f88:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f8a:	69fb      	ldr	r3, [r7, #28]
 8001f8c:	3301      	adds	r3, #1
 8001f8e:	61fb      	str	r3, [r7, #28]
 8001f90:	69fb      	ldr	r3, [r7, #28]
 8001f92:	2b0f      	cmp	r3, #15
 8001f94:	f67f aea2 	bls.w	8001cdc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001f98:	bf00      	nop
 8001f9a:	bf00      	nop
 8001f9c:	3724      	adds	r7, #36	@ 0x24
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa4:	4770      	bx	lr
 8001fa6:	bf00      	nop
 8001fa8:	40023800 	.word	0x40023800
 8001fac:	40013800 	.word	0x40013800
 8001fb0:	40020000 	.word	0x40020000
 8001fb4:	40020400 	.word	0x40020400
 8001fb8:	40020800 	.word	0x40020800
 8001fbc:	40020c00 	.word	0x40020c00
 8001fc0:	40021000 	.word	0x40021000
 8001fc4:	40013c00 	.word	0x40013c00

08001fc8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b082      	sub	sp, #8
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	4603      	mov	r3, r0
 8001fd0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001fd2:	4b08      	ldr	r3, [pc, #32]	@ (8001ff4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001fd4:	695a      	ldr	r2, [r3, #20]
 8001fd6:	88fb      	ldrh	r3, [r7, #6]
 8001fd8:	4013      	ands	r3, r2
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d006      	beq.n	8001fec <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001fde:	4a05      	ldr	r2, [pc, #20]	@ (8001ff4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001fe0:	88fb      	ldrh	r3, [r7, #6]
 8001fe2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001fe4:	88fb      	ldrh	r3, [r7, #6]
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f000 f806 	bl	8001ff8 <HAL_GPIO_EXTI_Callback>
  }
}
 8001fec:	bf00      	nop
 8001fee:	3708      	adds	r7, #8
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd80      	pop	{r7, pc}
 8001ff4:	40013c00 	.word	0x40013c00

08001ff8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b083      	sub	sp, #12
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	4603      	mov	r3, r0
 8002000:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002002:	bf00      	nop
 8002004:	370c      	adds	r7, #12
 8002006:	46bd      	mov	sp, r7
 8002008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200c:	4770      	bx	lr
	...

08002010 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b084      	sub	sp, #16
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d101      	bne.n	8002022 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800201e:	2301      	movs	r3, #1
 8002020:	e12b      	b.n	800227a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002028:	b2db      	uxtb	r3, r3
 800202a:	2b00      	cmp	r3, #0
 800202c:	d106      	bne.n	800203c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2200      	movs	r2, #0
 8002032:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002036:	6878      	ldr	r0, [r7, #4]
 8002038:	f7ff f834 	bl	80010a4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2224      	movs	r2, #36	@ 0x24
 8002040:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	681a      	ldr	r2, [r3, #0]
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f022 0201 	bic.w	r2, r2, #1
 8002052:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	681a      	ldr	r2, [r3, #0]
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002062:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	681a      	ldr	r2, [r3, #0]
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002072:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002074:	f001 fbf6 	bl	8003864 <HAL_RCC_GetPCLK1Freq>
 8002078:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	4a81      	ldr	r2, [pc, #516]	@ (8002284 <HAL_I2C_Init+0x274>)
 8002080:	4293      	cmp	r3, r2
 8002082:	d807      	bhi.n	8002094 <HAL_I2C_Init+0x84>
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	4a80      	ldr	r2, [pc, #512]	@ (8002288 <HAL_I2C_Init+0x278>)
 8002088:	4293      	cmp	r3, r2
 800208a:	bf94      	ite	ls
 800208c:	2301      	movls	r3, #1
 800208e:	2300      	movhi	r3, #0
 8002090:	b2db      	uxtb	r3, r3
 8002092:	e006      	b.n	80020a2 <HAL_I2C_Init+0x92>
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	4a7d      	ldr	r2, [pc, #500]	@ (800228c <HAL_I2C_Init+0x27c>)
 8002098:	4293      	cmp	r3, r2
 800209a:	bf94      	ite	ls
 800209c:	2301      	movls	r3, #1
 800209e:	2300      	movhi	r3, #0
 80020a0:	b2db      	uxtb	r3, r3
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d001      	beq.n	80020aa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80020a6:	2301      	movs	r3, #1
 80020a8:	e0e7      	b.n	800227a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	4a78      	ldr	r2, [pc, #480]	@ (8002290 <HAL_I2C_Init+0x280>)
 80020ae:	fba2 2303 	umull	r2, r3, r2, r3
 80020b2:	0c9b      	lsrs	r3, r3, #18
 80020b4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	68ba      	ldr	r2, [r7, #8]
 80020c6:	430a      	orrs	r2, r1
 80020c8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	6a1b      	ldr	r3, [r3, #32]
 80020d0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	4a6a      	ldr	r2, [pc, #424]	@ (8002284 <HAL_I2C_Init+0x274>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d802      	bhi.n	80020e4 <HAL_I2C_Init+0xd4>
 80020de:	68bb      	ldr	r3, [r7, #8]
 80020e0:	3301      	adds	r3, #1
 80020e2:	e009      	b.n	80020f8 <HAL_I2C_Init+0xe8>
 80020e4:	68bb      	ldr	r3, [r7, #8]
 80020e6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80020ea:	fb02 f303 	mul.w	r3, r2, r3
 80020ee:	4a69      	ldr	r2, [pc, #420]	@ (8002294 <HAL_I2C_Init+0x284>)
 80020f0:	fba2 2303 	umull	r2, r3, r2, r3
 80020f4:	099b      	lsrs	r3, r3, #6
 80020f6:	3301      	adds	r3, #1
 80020f8:	687a      	ldr	r2, [r7, #4]
 80020fa:	6812      	ldr	r2, [r2, #0]
 80020fc:	430b      	orrs	r3, r1
 80020fe:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	69db      	ldr	r3, [r3, #28]
 8002106:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800210a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	495c      	ldr	r1, [pc, #368]	@ (8002284 <HAL_I2C_Init+0x274>)
 8002114:	428b      	cmp	r3, r1
 8002116:	d819      	bhi.n	800214c <HAL_I2C_Init+0x13c>
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	1e59      	subs	r1, r3, #1
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	005b      	lsls	r3, r3, #1
 8002122:	fbb1 f3f3 	udiv	r3, r1, r3
 8002126:	1c59      	adds	r1, r3, #1
 8002128:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800212c:	400b      	ands	r3, r1
 800212e:	2b00      	cmp	r3, #0
 8002130:	d00a      	beq.n	8002148 <HAL_I2C_Init+0x138>
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	1e59      	subs	r1, r3, #1
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	005b      	lsls	r3, r3, #1
 800213c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002140:	3301      	adds	r3, #1
 8002142:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002146:	e051      	b.n	80021ec <HAL_I2C_Init+0x1dc>
 8002148:	2304      	movs	r3, #4
 800214a:	e04f      	b.n	80021ec <HAL_I2C_Init+0x1dc>
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	689b      	ldr	r3, [r3, #8]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d111      	bne.n	8002178 <HAL_I2C_Init+0x168>
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	1e58      	subs	r0, r3, #1
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6859      	ldr	r1, [r3, #4]
 800215c:	460b      	mov	r3, r1
 800215e:	005b      	lsls	r3, r3, #1
 8002160:	440b      	add	r3, r1
 8002162:	fbb0 f3f3 	udiv	r3, r0, r3
 8002166:	3301      	adds	r3, #1
 8002168:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800216c:	2b00      	cmp	r3, #0
 800216e:	bf0c      	ite	eq
 8002170:	2301      	moveq	r3, #1
 8002172:	2300      	movne	r3, #0
 8002174:	b2db      	uxtb	r3, r3
 8002176:	e012      	b.n	800219e <HAL_I2C_Init+0x18e>
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	1e58      	subs	r0, r3, #1
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6859      	ldr	r1, [r3, #4]
 8002180:	460b      	mov	r3, r1
 8002182:	009b      	lsls	r3, r3, #2
 8002184:	440b      	add	r3, r1
 8002186:	0099      	lsls	r1, r3, #2
 8002188:	440b      	add	r3, r1
 800218a:	fbb0 f3f3 	udiv	r3, r0, r3
 800218e:	3301      	adds	r3, #1
 8002190:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002194:	2b00      	cmp	r3, #0
 8002196:	bf0c      	ite	eq
 8002198:	2301      	moveq	r3, #1
 800219a:	2300      	movne	r3, #0
 800219c:	b2db      	uxtb	r3, r3
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d001      	beq.n	80021a6 <HAL_I2C_Init+0x196>
 80021a2:	2301      	movs	r3, #1
 80021a4:	e022      	b.n	80021ec <HAL_I2C_Init+0x1dc>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	689b      	ldr	r3, [r3, #8]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d10e      	bne.n	80021cc <HAL_I2C_Init+0x1bc>
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	1e58      	subs	r0, r3, #1
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6859      	ldr	r1, [r3, #4]
 80021b6:	460b      	mov	r3, r1
 80021b8:	005b      	lsls	r3, r3, #1
 80021ba:	440b      	add	r3, r1
 80021bc:	fbb0 f3f3 	udiv	r3, r0, r3
 80021c0:	3301      	adds	r3, #1
 80021c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021c6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80021ca:	e00f      	b.n	80021ec <HAL_I2C_Init+0x1dc>
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	1e58      	subs	r0, r3, #1
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6859      	ldr	r1, [r3, #4]
 80021d4:	460b      	mov	r3, r1
 80021d6:	009b      	lsls	r3, r3, #2
 80021d8:	440b      	add	r3, r1
 80021da:	0099      	lsls	r1, r3, #2
 80021dc:	440b      	add	r3, r1
 80021de:	fbb0 f3f3 	udiv	r3, r0, r3
 80021e2:	3301      	adds	r3, #1
 80021e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021e8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80021ec:	6879      	ldr	r1, [r7, #4]
 80021ee:	6809      	ldr	r1, [r1, #0]
 80021f0:	4313      	orrs	r3, r2
 80021f2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	69da      	ldr	r2, [r3, #28]
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6a1b      	ldr	r3, [r3, #32]
 8002206:	431a      	orrs	r2, r3
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	430a      	orrs	r2, r1
 800220e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	689b      	ldr	r3, [r3, #8]
 8002216:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800221a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800221e:	687a      	ldr	r2, [r7, #4]
 8002220:	6911      	ldr	r1, [r2, #16]
 8002222:	687a      	ldr	r2, [r7, #4]
 8002224:	68d2      	ldr	r2, [r2, #12]
 8002226:	4311      	orrs	r1, r2
 8002228:	687a      	ldr	r2, [r7, #4]
 800222a:	6812      	ldr	r2, [r2, #0]
 800222c:	430b      	orrs	r3, r1
 800222e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	68db      	ldr	r3, [r3, #12]
 8002236:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	695a      	ldr	r2, [r3, #20]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	699b      	ldr	r3, [r3, #24]
 8002242:	431a      	orrs	r2, r3
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	430a      	orrs	r2, r1
 800224a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	681a      	ldr	r2, [r3, #0]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f042 0201 	orr.w	r2, r2, #1
 800225a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2200      	movs	r2, #0
 8002260:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2220      	movs	r2, #32
 8002266:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2200      	movs	r2, #0
 800226e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2200      	movs	r2, #0
 8002274:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002278:	2300      	movs	r3, #0
}
 800227a:	4618      	mov	r0, r3
 800227c:	3710      	adds	r7, #16
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}
 8002282:	bf00      	nop
 8002284:	000186a0 	.word	0x000186a0
 8002288:	001e847f 	.word	0x001e847f
 800228c:	003d08ff 	.word	0x003d08ff
 8002290:	431bde83 	.word	0x431bde83
 8002294:	10624dd3 	.word	0x10624dd3

08002298 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b088      	sub	sp, #32
 800229c:	af02      	add	r7, sp, #8
 800229e:	60f8      	str	r0, [r7, #12]
 80022a0:	607a      	str	r2, [r7, #4]
 80022a2:	461a      	mov	r2, r3
 80022a4:	460b      	mov	r3, r1
 80022a6:	817b      	strh	r3, [r7, #10]
 80022a8:	4613      	mov	r3, r2
 80022aa:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80022ac:	f7ff fbea 	bl	8001a84 <HAL_GetTick>
 80022b0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80022b8:	b2db      	uxtb	r3, r3
 80022ba:	2b20      	cmp	r3, #32
 80022bc:	f040 80e0 	bne.w	8002480 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80022c0:	697b      	ldr	r3, [r7, #20]
 80022c2:	9300      	str	r3, [sp, #0]
 80022c4:	2319      	movs	r3, #25
 80022c6:	2201      	movs	r2, #1
 80022c8:	4970      	ldr	r1, [pc, #448]	@ (800248c <HAL_I2C_Master_Transmit+0x1f4>)
 80022ca:	68f8      	ldr	r0, [r7, #12]
 80022cc:	f000 fc64 	bl	8002b98 <I2C_WaitOnFlagUntilTimeout>
 80022d0:	4603      	mov	r3, r0
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d001      	beq.n	80022da <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80022d6:	2302      	movs	r3, #2
 80022d8:	e0d3      	b.n	8002482 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80022e0:	2b01      	cmp	r3, #1
 80022e2:	d101      	bne.n	80022e8 <HAL_I2C_Master_Transmit+0x50>
 80022e4:	2302      	movs	r3, #2
 80022e6:	e0cc      	b.n	8002482 <HAL_I2C_Master_Transmit+0x1ea>
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	2201      	movs	r2, #1
 80022ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f003 0301 	and.w	r3, r3, #1
 80022fa:	2b01      	cmp	r3, #1
 80022fc:	d007      	beq.n	800230e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	681a      	ldr	r2, [r3, #0]
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f042 0201 	orr.w	r2, r2, #1
 800230c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	681a      	ldr	r2, [r3, #0]
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800231c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	2221      	movs	r2, #33	@ 0x21
 8002322:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	2210      	movs	r2, #16
 800232a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	2200      	movs	r2, #0
 8002332:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	687a      	ldr	r2, [r7, #4]
 8002338:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	893a      	ldrh	r2, [r7, #8]
 800233e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002344:	b29a      	uxth	r2, r3
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	4a50      	ldr	r2, [pc, #320]	@ (8002490 <HAL_I2C_Master_Transmit+0x1f8>)
 800234e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002350:	8979      	ldrh	r1, [r7, #10]
 8002352:	697b      	ldr	r3, [r7, #20]
 8002354:	6a3a      	ldr	r2, [r7, #32]
 8002356:	68f8      	ldr	r0, [r7, #12]
 8002358:	f000 face 	bl	80028f8 <I2C_MasterRequestWrite>
 800235c:	4603      	mov	r3, r0
 800235e:	2b00      	cmp	r3, #0
 8002360:	d001      	beq.n	8002366 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002362:	2301      	movs	r3, #1
 8002364:	e08d      	b.n	8002482 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002366:	2300      	movs	r3, #0
 8002368:	613b      	str	r3, [r7, #16]
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	695b      	ldr	r3, [r3, #20]
 8002370:	613b      	str	r3, [r7, #16]
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	699b      	ldr	r3, [r3, #24]
 8002378:	613b      	str	r3, [r7, #16]
 800237a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800237c:	e066      	b.n	800244c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800237e:	697a      	ldr	r2, [r7, #20]
 8002380:	6a39      	ldr	r1, [r7, #32]
 8002382:	68f8      	ldr	r0, [r7, #12]
 8002384:	f000 fd22 	bl	8002dcc <I2C_WaitOnTXEFlagUntilTimeout>
 8002388:	4603      	mov	r3, r0
 800238a:	2b00      	cmp	r3, #0
 800238c:	d00d      	beq.n	80023aa <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002392:	2b04      	cmp	r3, #4
 8002394:	d107      	bne.n	80023a6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	681a      	ldr	r2, [r3, #0]
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80023a4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80023a6:	2301      	movs	r3, #1
 80023a8:	e06b      	b.n	8002482 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023ae:	781a      	ldrb	r2, [r3, #0]
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023ba:	1c5a      	adds	r2, r3, #1
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023c4:	b29b      	uxth	r3, r3
 80023c6:	3b01      	subs	r3, #1
 80023c8:	b29a      	uxth	r2, r3
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023d2:	3b01      	subs	r3, #1
 80023d4:	b29a      	uxth	r2, r3
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	695b      	ldr	r3, [r3, #20]
 80023e0:	f003 0304 	and.w	r3, r3, #4
 80023e4:	2b04      	cmp	r3, #4
 80023e6:	d11b      	bne.n	8002420 <HAL_I2C_Master_Transmit+0x188>
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d017      	beq.n	8002420 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023f4:	781a      	ldrb	r2, [r3, #0]
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002400:	1c5a      	adds	r2, r3, #1
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800240a:	b29b      	uxth	r3, r3
 800240c:	3b01      	subs	r3, #1
 800240e:	b29a      	uxth	r2, r3
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002418:	3b01      	subs	r3, #1
 800241a:	b29a      	uxth	r2, r3
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002420:	697a      	ldr	r2, [r7, #20]
 8002422:	6a39      	ldr	r1, [r7, #32]
 8002424:	68f8      	ldr	r0, [r7, #12]
 8002426:	f000 fd19 	bl	8002e5c <I2C_WaitOnBTFFlagUntilTimeout>
 800242a:	4603      	mov	r3, r0
 800242c:	2b00      	cmp	r3, #0
 800242e:	d00d      	beq.n	800244c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002434:	2b04      	cmp	r3, #4
 8002436:	d107      	bne.n	8002448 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	681a      	ldr	r2, [r3, #0]
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002446:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002448:	2301      	movs	r3, #1
 800244a:	e01a      	b.n	8002482 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002450:	2b00      	cmp	r3, #0
 8002452:	d194      	bne.n	800237e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	681a      	ldr	r2, [r3, #0]
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002462:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	2220      	movs	r2, #32
 8002468:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	2200      	movs	r2, #0
 8002470:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	2200      	movs	r2, #0
 8002478:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800247c:	2300      	movs	r3, #0
 800247e:	e000      	b.n	8002482 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002480:	2302      	movs	r3, #2
  }
}
 8002482:	4618      	mov	r0, r3
 8002484:	3718      	adds	r7, #24
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}
 800248a:	bf00      	nop
 800248c:	00100002 	.word	0x00100002
 8002490:	ffff0000 	.word	0xffff0000

08002494 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b08c      	sub	sp, #48	@ 0x30
 8002498:	af02      	add	r7, sp, #8
 800249a:	60f8      	str	r0, [r7, #12]
 800249c:	607a      	str	r2, [r7, #4]
 800249e:	461a      	mov	r2, r3
 80024a0:	460b      	mov	r3, r1
 80024a2:	817b      	strh	r3, [r7, #10]
 80024a4:	4613      	mov	r3, r2
 80024a6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80024a8:	f7ff faec 	bl	8001a84 <HAL_GetTick>
 80024ac:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80024b4:	b2db      	uxtb	r3, r3
 80024b6:	2b20      	cmp	r3, #32
 80024b8:	f040 8217 	bne.w	80028ea <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80024bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024be:	9300      	str	r3, [sp, #0]
 80024c0:	2319      	movs	r3, #25
 80024c2:	2201      	movs	r2, #1
 80024c4:	497c      	ldr	r1, [pc, #496]	@ (80026b8 <HAL_I2C_Master_Receive+0x224>)
 80024c6:	68f8      	ldr	r0, [r7, #12]
 80024c8:	f000 fb66 	bl	8002b98 <I2C_WaitOnFlagUntilTimeout>
 80024cc:	4603      	mov	r3, r0
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d001      	beq.n	80024d6 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80024d2:	2302      	movs	r3, #2
 80024d4:	e20a      	b.n	80028ec <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80024dc:	2b01      	cmp	r3, #1
 80024de:	d101      	bne.n	80024e4 <HAL_I2C_Master_Receive+0x50>
 80024e0:	2302      	movs	r3, #2
 80024e2:	e203      	b.n	80028ec <HAL_I2C_Master_Receive+0x458>
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	2201      	movs	r2, #1
 80024e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f003 0301 	and.w	r3, r3, #1
 80024f6:	2b01      	cmp	r3, #1
 80024f8:	d007      	beq.n	800250a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	681a      	ldr	r2, [r3, #0]
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f042 0201 	orr.w	r2, r2, #1
 8002508:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	681a      	ldr	r2, [r3, #0]
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002518:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	2222      	movs	r2, #34	@ 0x22
 800251e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	2210      	movs	r2, #16
 8002526:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	2200      	movs	r2, #0
 800252e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	687a      	ldr	r2, [r7, #4]
 8002534:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	893a      	ldrh	r2, [r7, #8]
 800253a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002540:	b29a      	uxth	r2, r3
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	4a5c      	ldr	r2, [pc, #368]	@ (80026bc <HAL_I2C_Master_Receive+0x228>)
 800254a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800254c:	8979      	ldrh	r1, [r7, #10]
 800254e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002550:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002552:	68f8      	ldr	r0, [r7, #12]
 8002554:	f000 fa52 	bl	80029fc <I2C_MasterRequestRead>
 8002558:	4603      	mov	r3, r0
 800255a:	2b00      	cmp	r3, #0
 800255c:	d001      	beq.n	8002562 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800255e:	2301      	movs	r3, #1
 8002560:	e1c4      	b.n	80028ec <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002566:	2b00      	cmp	r3, #0
 8002568:	d113      	bne.n	8002592 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800256a:	2300      	movs	r3, #0
 800256c:	623b      	str	r3, [r7, #32]
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	695b      	ldr	r3, [r3, #20]
 8002574:	623b      	str	r3, [r7, #32]
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	699b      	ldr	r3, [r3, #24]
 800257c:	623b      	str	r3, [r7, #32]
 800257e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	681a      	ldr	r2, [r3, #0]
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800258e:	601a      	str	r2, [r3, #0]
 8002590:	e198      	b.n	80028c4 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002596:	2b01      	cmp	r3, #1
 8002598:	d11b      	bne.n	80025d2 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	681a      	ldr	r2, [r3, #0]
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80025a8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025aa:	2300      	movs	r3, #0
 80025ac:	61fb      	str	r3, [r7, #28]
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	695b      	ldr	r3, [r3, #20]
 80025b4:	61fb      	str	r3, [r7, #28]
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	699b      	ldr	r3, [r3, #24]
 80025bc:	61fb      	str	r3, [r7, #28]
 80025be:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	681a      	ldr	r2, [r3, #0]
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80025ce:	601a      	str	r2, [r3, #0]
 80025d0:	e178      	b.n	80028c4 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025d6:	2b02      	cmp	r3, #2
 80025d8:	d11b      	bne.n	8002612 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	681a      	ldr	r2, [r3, #0]
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80025e8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	681a      	ldr	r2, [r3, #0]
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80025f8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025fa:	2300      	movs	r3, #0
 80025fc:	61bb      	str	r3, [r7, #24]
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	695b      	ldr	r3, [r3, #20]
 8002604:	61bb      	str	r3, [r7, #24]
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	699b      	ldr	r3, [r3, #24]
 800260c:	61bb      	str	r3, [r7, #24]
 800260e:	69bb      	ldr	r3, [r7, #24]
 8002610:	e158      	b.n	80028c4 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	681a      	ldr	r2, [r3, #0]
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002620:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002622:	2300      	movs	r3, #0
 8002624:	617b      	str	r3, [r7, #20]
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	695b      	ldr	r3, [r3, #20]
 800262c:	617b      	str	r3, [r7, #20]
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	699b      	ldr	r3, [r3, #24]
 8002634:	617b      	str	r3, [r7, #20]
 8002636:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002638:	e144      	b.n	80028c4 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800263e:	2b03      	cmp	r3, #3
 8002640:	f200 80f1 	bhi.w	8002826 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002648:	2b01      	cmp	r3, #1
 800264a:	d123      	bne.n	8002694 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800264c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800264e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002650:	68f8      	ldr	r0, [r7, #12]
 8002652:	f000 fc4b 	bl	8002eec <I2C_WaitOnRXNEFlagUntilTimeout>
 8002656:	4603      	mov	r3, r0
 8002658:	2b00      	cmp	r3, #0
 800265a:	d001      	beq.n	8002660 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800265c:	2301      	movs	r3, #1
 800265e:	e145      	b.n	80028ec <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	691a      	ldr	r2, [r3, #16]
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800266a:	b2d2      	uxtb	r2, r2
 800266c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002672:	1c5a      	adds	r2, r3, #1
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800267c:	3b01      	subs	r3, #1
 800267e:	b29a      	uxth	r2, r3
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002688:	b29b      	uxth	r3, r3
 800268a:	3b01      	subs	r3, #1
 800268c:	b29a      	uxth	r2, r3
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002692:	e117      	b.n	80028c4 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002698:	2b02      	cmp	r3, #2
 800269a:	d14e      	bne.n	800273a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800269c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800269e:	9300      	str	r3, [sp, #0]
 80026a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026a2:	2200      	movs	r2, #0
 80026a4:	4906      	ldr	r1, [pc, #24]	@ (80026c0 <HAL_I2C_Master_Receive+0x22c>)
 80026a6:	68f8      	ldr	r0, [r7, #12]
 80026a8:	f000 fa76 	bl	8002b98 <I2C_WaitOnFlagUntilTimeout>
 80026ac:	4603      	mov	r3, r0
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d008      	beq.n	80026c4 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80026b2:	2301      	movs	r3, #1
 80026b4:	e11a      	b.n	80028ec <HAL_I2C_Master_Receive+0x458>
 80026b6:	bf00      	nop
 80026b8:	00100002 	.word	0x00100002
 80026bc:	ffff0000 	.word	0xffff0000
 80026c0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	681a      	ldr	r2, [r3, #0]
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80026d2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	691a      	ldr	r2, [r3, #16]
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026de:	b2d2      	uxtb	r2, r2
 80026e0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026e6:	1c5a      	adds	r2, r3, #1
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026f0:	3b01      	subs	r3, #1
 80026f2:	b29a      	uxth	r2, r3
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026fc:	b29b      	uxth	r3, r3
 80026fe:	3b01      	subs	r3, #1
 8002700:	b29a      	uxth	r2, r3
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	691a      	ldr	r2, [r3, #16]
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002710:	b2d2      	uxtb	r2, r2
 8002712:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002718:	1c5a      	adds	r2, r3, #1
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002722:	3b01      	subs	r3, #1
 8002724:	b29a      	uxth	r2, r3
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800272e:	b29b      	uxth	r3, r3
 8002730:	3b01      	subs	r3, #1
 8002732:	b29a      	uxth	r2, r3
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002738:	e0c4      	b.n	80028c4 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800273a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800273c:	9300      	str	r3, [sp, #0]
 800273e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002740:	2200      	movs	r2, #0
 8002742:	496c      	ldr	r1, [pc, #432]	@ (80028f4 <HAL_I2C_Master_Receive+0x460>)
 8002744:	68f8      	ldr	r0, [r7, #12]
 8002746:	f000 fa27 	bl	8002b98 <I2C_WaitOnFlagUntilTimeout>
 800274a:	4603      	mov	r3, r0
 800274c:	2b00      	cmp	r3, #0
 800274e:	d001      	beq.n	8002754 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8002750:	2301      	movs	r3, #1
 8002752:	e0cb      	b.n	80028ec <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	681a      	ldr	r2, [r3, #0]
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002762:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	691a      	ldr	r2, [r3, #16]
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800276e:	b2d2      	uxtb	r2, r2
 8002770:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002776:	1c5a      	adds	r2, r3, #1
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002780:	3b01      	subs	r3, #1
 8002782:	b29a      	uxth	r2, r3
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800278c:	b29b      	uxth	r3, r3
 800278e:	3b01      	subs	r3, #1
 8002790:	b29a      	uxth	r2, r3
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002796:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002798:	9300      	str	r3, [sp, #0]
 800279a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800279c:	2200      	movs	r2, #0
 800279e:	4955      	ldr	r1, [pc, #340]	@ (80028f4 <HAL_I2C_Master_Receive+0x460>)
 80027a0:	68f8      	ldr	r0, [r7, #12]
 80027a2:	f000 f9f9 	bl	8002b98 <I2C_WaitOnFlagUntilTimeout>
 80027a6:	4603      	mov	r3, r0
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d001      	beq.n	80027b0 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80027ac:	2301      	movs	r3, #1
 80027ae:	e09d      	b.n	80028ec <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	681a      	ldr	r2, [r3, #0]
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80027be:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	691a      	ldr	r2, [r3, #16]
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027ca:	b2d2      	uxtb	r2, r2
 80027cc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027d2:	1c5a      	adds	r2, r3, #1
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027dc:	3b01      	subs	r3, #1
 80027de:	b29a      	uxth	r2, r3
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027e8:	b29b      	uxth	r3, r3
 80027ea:	3b01      	subs	r3, #1
 80027ec:	b29a      	uxth	r2, r3
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	691a      	ldr	r2, [r3, #16]
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027fc:	b2d2      	uxtb	r2, r2
 80027fe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002804:	1c5a      	adds	r2, r3, #1
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800280e:	3b01      	subs	r3, #1
 8002810:	b29a      	uxth	r2, r3
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800281a:	b29b      	uxth	r3, r3
 800281c:	3b01      	subs	r3, #1
 800281e:	b29a      	uxth	r2, r3
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002824:	e04e      	b.n	80028c4 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002826:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002828:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800282a:	68f8      	ldr	r0, [r7, #12]
 800282c:	f000 fb5e 	bl	8002eec <I2C_WaitOnRXNEFlagUntilTimeout>
 8002830:	4603      	mov	r3, r0
 8002832:	2b00      	cmp	r3, #0
 8002834:	d001      	beq.n	800283a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8002836:	2301      	movs	r3, #1
 8002838:	e058      	b.n	80028ec <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	691a      	ldr	r2, [r3, #16]
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002844:	b2d2      	uxtb	r2, r2
 8002846:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800284c:	1c5a      	adds	r2, r3, #1
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002856:	3b01      	subs	r3, #1
 8002858:	b29a      	uxth	r2, r3
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002862:	b29b      	uxth	r3, r3
 8002864:	3b01      	subs	r3, #1
 8002866:	b29a      	uxth	r2, r3
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	695b      	ldr	r3, [r3, #20]
 8002872:	f003 0304 	and.w	r3, r3, #4
 8002876:	2b04      	cmp	r3, #4
 8002878:	d124      	bne.n	80028c4 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800287e:	2b03      	cmp	r3, #3
 8002880:	d107      	bne.n	8002892 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	681a      	ldr	r2, [r3, #0]
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002890:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	691a      	ldr	r2, [r3, #16]
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800289c:	b2d2      	uxtb	r2, r2
 800289e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028a4:	1c5a      	adds	r2, r3, #1
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028ae:	3b01      	subs	r3, #1
 80028b0:	b29a      	uxth	r2, r3
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028ba:	b29b      	uxth	r3, r3
 80028bc:	3b01      	subs	r3, #1
 80028be:	b29a      	uxth	r2, r3
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	f47f aeb6 	bne.w	800263a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	2220      	movs	r2, #32
 80028d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	2200      	movs	r2, #0
 80028da:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	2200      	movs	r2, #0
 80028e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80028e6:	2300      	movs	r3, #0
 80028e8:	e000      	b.n	80028ec <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 80028ea:	2302      	movs	r3, #2
  }
}
 80028ec:	4618      	mov	r0, r3
 80028ee:	3728      	adds	r7, #40	@ 0x28
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bd80      	pop	{r7, pc}
 80028f4:	00010004 	.word	0x00010004

080028f8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b088      	sub	sp, #32
 80028fc:	af02      	add	r7, sp, #8
 80028fe:	60f8      	str	r0, [r7, #12]
 8002900:	607a      	str	r2, [r7, #4]
 8002902:	603b      	str	r3, [r7, #0]
 8002904:	460b      	mov	r3, r1
 8002906:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800290c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800290e:	697b      	ldr	r3, [r7, #20]
 8002910:	2b08      	cmp	r3, #8
 8002912:	d006      	beq.n	8002922 <I2C_MasterRequestWrite+0x2a>
 8002914:	697b      	ldr	r3, [r7, #20]
 8002916:	2b01      	cmp	r3, #1
 8002918:	d003      	beq.n	8002922 <I2C_MasterRequestWrite+0x2a>
 800291a:	697b      	ldr	r3, [r7, #20]
 800291c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002920:	d108      	bne.n	8002934 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	681a      	ldr	r2, [r3, #0]
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002930:	601a      	str	r2, [r3, #0]
 8002932:	e00b      	b.n	800294c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002938:	2b12      	cmp	r3, #18
 800293a:	d107      	bne.n	800294c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	681a      	ldr	r2, [r3, #0]
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800294a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	9300      	str	r3, [sp, #0]
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2200      	movs	r2, #0
 8002954:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002958:	68f8      	ldr	r0, [r7, #12]
 800295a:	f000 f91d 	bl	8002b98 <I2C_WaitOnFlagUntilTimeout>
 800295e:	4603      	mov	r3, r0
 8002960:	2b00      	cmp	r3, #0
 8002962:	d00d      	beq.n	8002980 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800296e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002972:	d103      	bne.n	800297c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800297a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800297c:	2303      	movs	r3, #3
 800297e:	e035      	b.n	80029ec <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	691b      	ldr	r3, [r3, #16]
 8002984:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002988:	d108      	bne.n	800299c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800298a:	897b      	ldrh	r3, [r7, #10]
 800298c:	b2db      	uxtb	r3, r3
 800298e:	461a      	mov	r2, r3
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002998:	611a      	str	r2, [r3, #16]
 800299a:	e01b      	b.n	80029d4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800299c:	897b      	ldrh	r3, [r7, #10]
 800299e:	11db      	asrs	r3, r3, #7
 80029a0:	b2db      	uxtb	r3, r3
 80029a2:	f003 0306 	and.w	r3, r3, #6
 80029a6:	b2db      	uxtb	r3, r3
 80029a8:	f063 030f 	orn	r3, r3, #15
 80029ac:	b2da      	uxtb	r2, r3
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	687a      	ldr	r2, [r7, #4]
 80029b8:	490e      	ldr	r1, [pc, #56]	@ (80029f4 <I2C_MasterRequestWrite+0xfc>)
 80029ba:	68f8      	ldr	r0, [r7, #12]
 80029bc:	f000 f966 	bl	8002c8c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80029c0:	4603      	mov	r3, r0
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d001      	beq.n	80029ca <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80029c6:	2301      	movs	r3, #1
 80029c8:	e010      	b.n	80029ec <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80029ca:	897b      	ldrh	r3, [r7, #10]
 80029cc:	b2da      	uxtb	r2, r3
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	687a      	ldr	r2, [r7, #4]
 80029d8:	4907      	ldr	r1, [pc, #28]	@ (80029f8 <I2C_MasterRequestWrite+0x100>)
 80029da:	68f8      	ldr	r0, [r7, #12]
 80029dc:	f000 f956 	bl	8002c8c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80029e0:	4603      	mov	r3, r0
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d001      	beq.n	80029ea <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80029e6:	2301      	movs	r3, #1
 80029e8:	e000      	b.n	80029ec <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80029ea:	2300      	movs	r3, #0
}
 80029ec:	4618      	mov	r0, r3
 80029ee:	3718      	adds	r7, #24
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bd80      	pop	{r7, pc}
 80029f4:	00010008 	.word	0x00010008
 80029f8:	00010002 	.word	0x00010002

080029fc <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b088      	sub	sp, #32
 8002a00:	af02      	add	r7, sp, #8
 8002a02:	60f8      	str	r0, [r7, #12]
 8002a04:	607a      	str	r2, [r7, #4]
 8002a06:	603b      	str	r3, [r7, #0]
 8002a08:	460b      	mov	r3, r1
 8002a0a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a10:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	681a      	ldr	r2, [r3, #0]
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002a20:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002a22:	697b      	ldr	r3, [r7, #20]
 8002a24:	2b08      	cmp	r3, #8
 8002a26:	d006      	beq.n	8002a36 <I2C_MasterRequestRead+0x3a>
 8002a28:	697b      	ldr	r3, [r7, #20]
 8002a2a:	2b01      	cmp	r3, #1
 8002a2c:	d003      	beq.n	8002a36 <I2C_MasterRequestRead+0x3a>
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002a34:	d108      	bne.n	8002a48 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	681a      	ldr	r2, [r3, #0]
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002a44:	601a      	str	r2, [r3, #0]
 8002a46:	e00b      	b.n	8002a60 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a4c:	2b11      	cmp	r3, #17
 8002a4e:	d107      	bne.n	8002a60 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	681a      	ldr	r2, [r3, #0]
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002a5e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	9300      	str	r3, [sp, #0]
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2200      	movs	r2, #0
 8002a68:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002a6c:	68f8      	ldr	r0, [r7, #12]
 8002a6e:	f000 f893 	bl	8002b98 <I2C_WaitOnFlagUntilTimeout>
 8002a72:	4603      	mov	r3, r0
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d00d      	beq.n	8002a94 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a82:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002a86:	d103      	bne.n	8002a90 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002a8e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002a90:	2303      	movs	r3, #3
 8002a92:	e079      	b.n	8002b88 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	691b      	ldr	r3, [r3, #16]
 8002a98:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002a9c:	d108      	bne.n	8002ab0 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002a9e:	897b      	ldrh	r3, [r7, #10]
 8002aa0:	b2db      	uxtb	r3, r3
 8002aa2:	f043 0301 	orr.w	r3, r3, #1
 8002aa6:	b2da      	uxtb	r2, r3
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	611a      	str	r2, [r3, #16]
 8002aae:	e05f      	b.n	8002b70 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002ab0:	897b      	ldrh	r3, [r7, #10]
 8002ab2:	11db      	asrs	r3, r3, #7
 8002ab4:	b2db      	uxtb	r3, r3
 8002ab6:	f003 0306 	and.w	r3, r3, #6
 8002aba:	b2db      	uxtb	r3, r3
 8002abc:	f063 030f 	orn	r3, r3, #15
 8002ac0:	b2da      	uxtb	r2, r3
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	687a      	ldr	r2, [r7, #4]
 8002acc:	4930      	ldr	r1, [pc, #192]	@ (8002b90 <I2C_MasterRequestRead+0x194>)
 8002ace:	68f8      	ldr	r0, [r7, #12]
 8002ad0:	f000 f8dc 	bl	8002c8c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d001      	beq.n	8002ade <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8002ada:	2301      	movs	r3, #1
 8002adc:	e054      	b.n	8002b88 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002ade:	897b      	ldrh	r3, [r7, #10]
 8002ae0:	b2da      	uxtb	r2, r3
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	687a      	ldr	r2, [r7, #4]
 8002aec:	4929      	ldr	r1, [pc, #164]	@ (8002b94 <I2C_MasterRequestRead+0x198>)
 8002aee:	68f8      	ldr	r0, [r7, #12]
 8002af0:	f000 f8cc 	bl	8002c8c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002af4:	4603      	mov	r3, r0
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d001      	beq.n	8002afe <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8002afa:	2301      	movs	r3, #1
 8002afc:	e044      	b.n	8002b88 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002afe:	2300      	movs	r3, #0
 8002b00:	613b      	str	r3, [r7, #16]
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	695b      	ldr	r3, [r3, #20]
 8002b08:	613b      	str	r3, [r7, #16]
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	699b      	ldr	r3, [r3, #24]
 8002b10:	613b      	str	r3, [r7, #16]
 8002b12:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	681a      	ldr	r2, [r3, #0]
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002b22:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	9300      	str	r3, [sp, #0]
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002b30:	68f8      	ldr	r0, [r7, #12]
 8002b32:	f000 f831 	bl	8002b98 <I2C_WaitOnFlagUntilTimeout>
 8002b36:	4603      	mov	r3, r0
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d00d      	beq.n	8002b58 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b46:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002b4a:	d103      	bne.n	8002b54 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002b52:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8002b54:	2303      	movs	r3, #3
 8002b56:	e017      	b.n	8002b88 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002b58:	897b      	ldrh	r3, [r7, #10]
 8002b5a:	11db      	asrs	r3, r3, #7
 8002b5c:	b2db      	uxtb	r3, r3
 8002b5e:	f003 0306 	and.w	r3, r3, #6
 8002b62:	b2db      	uxtb	r3, r3
 8002b64:	f063 030e 	orn	r3, r3, #14
 8002b68:	b2da      	uxtb	r2, r3
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	687a      	ldr	r2, [r7, #4]
 8002b74:	4907      	ldr	r1, [pc, #28]	@ (8002b94 <I2C_MasterRequestRead+0x198>)
 8002b76:	68f8      	ldr	r0, [r7, #12]
 8002b78:	f000 f888 	bl	8002c8c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d001      	beq.n	8002b86 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8002b82:	2301      	movs	r3, #1
 8002b84:	e000      	b.n	8002b88 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8002b86:	2300      	movs	r3, #0
}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	3718      	adds	r7, #24
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bd80      	pop	{r7, pc}
 8002b90:	00010008 	.word	0x00010008
 8002b94:	00010002 	.word	0x00010002

08002b98 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b084      	sub	sp, #16
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	60f8      	str	r0, [r7, #12]
 8002ba0:	60b9      	str	r1, [r7, #8]
 8002ba2:	603b      	str	r3, [r7, #0]
 8002ba4:	4613      	mov	r3, r2
 8002ba6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ba8:	e048      	b.n	8002c3c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bb0:	d044      	beq.n	8002c3c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bb2:	f7fe ff67 	bl	8001a84 <HAL_GetTick>
 8002bb6:	4602      	mov	r2, r0
 8002bb8:	69bb      	ldr	r3, [r7, #24]
 8002bba:	1ad3      	subs	r3, r2, r3
 8002bbc:	683a      	ldr	r2, [r7, #0]
 8002bbe:	429a      	cmp	r2, r3
 8002bc0:	d302      	bcc.n	8002bc8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d139      	bne.n	8002c3c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002bc8:	68bb      	ldr	r3, [r7, #8]
 8002bca:	0c1b      	lsrs	r3, r3, #16
 8002bcc:	b2db      	uxtb	r3, r3
 8002bce:	2b01      	cmp	r3, #1
 8002bd0:	d10d      	bne.n	8002bee <I2C_WaitOnFlagUntilTimeout+0x56>
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	695b      	ldr	r3, [r3, #20]
 8002bd8:	43da      	mvns	r2, r3
 8002bda:	68bb      	ldr	r3, [r7, #8]
 8002bdc:	4013      	ands	r3, r2
 8002bde:	b29b      	uxth	r3, r3
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	bf0c      	ite	eq
 8002be4:	2301      	moveq	r3, #1
 8002be6:	2300      	movne	r3, #0
 8002be8:	b2db      	uxtb	r3, r3
 8002bea:	461a      	mov	r2, r3
 8002bec:	e00c      	b.n	8002c08 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	699b      	ldr	r3, [r3, #24]
 8002bf4:	43da      	mvns	r2, r3
 8002bf6:	68bb      	ldr	r3, [r7, #8]
 8002bf8:	4013      	ands	r3, r2
 8002bfa:	b29b      	uxth	r3, r3
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	bf0c      	ite	eq
 8002c00:	2301      	moveq	r3, #1
 8002c02:	2300      	movne	r3, #0
 8002c04:	b2db      	uxtb	r3, r3
 8002c06:	461a      	mov	r2, r3
 8002c08:	79fb      	ldrb	r3, [r7, #7]
 8002c0a:	429a      	cmp	r2, r3
 8002c0c:	d116      	bne.n	8002c3c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	2200      	movs	r2, #0
 8002c12:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	2220      	movs	r2, #32
 8002c18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	2200      	movs	r2, #0
 8002c20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c28:	f043 0220 	orr.w	r2, r3, #32
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	2200      	movs	r2, #0
 8002c34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002c38:	2301      	movs	r3, #1
 8002c3a:	e023      	b.n	8002c84 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c3c:	68bb      	ldr	r3, [r7, #8]
 8002c3e:	0c1b      	lsrs	r3, r3, #16
 8002c40:	b2db      	uxtb	r3, r3
 8002c42:	2b01      	cmp	r3, #1
 8002c44:	d10d      	bne.n	8002c62 <I2C_WaitOnFlagUntilTimeout+0xca>
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	695b      	ldr	r3, [r3, #20]
 8002c4c:	43da      	mvns	r2, r3
 8002c4e:	68bb      	ldr	r3, [r7, #8]
 8002c50:	4013      	ands	r3, r2
 8002c52:	b29b      	uxth	r3, r3
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	bf0c      	ite	eq
 8002c58:	2301      	moveq	r3, #1
 8002c5a:	2300      	movne	r3, #0
 8002c5c:	b2db      	uxtb	r3, r3
 8002c5e:	461a      	mov	r2, r3
 8002c60:	e00c      	b.n	8002c7c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	699b      	ldr	r3, [r3, #24]
 8002c68:	43da      	mvns	r2, r3
 8002c6a:	68bb      	ldr	r3, [r7, #8]
 8002c6c:	4013      	ands	r3, r2
 8002c6e:	b29b      	uxth	r3, r3
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	bf0c      	ite	eq
 8002c74:	2301      	moveq	r3, #1
 8002c76:	2300      	movne	r3, #0
 8002c78:	b2db      	uxtb	r3, r3
 8002c7a:	461a      	mov	r2, r3
 8002c7c:	79fb      	ldrb	r3, [r7, #7]
 8002c7e:	429a      	cmp	r2, r3
 8002c80:	d093      	beq.n	8002baa <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002c82:	2300      	movs	r3, #0
}
 8002c84:	4618      	mov	r0, r3
 8002c86:	3710      	adds	r7, #16
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bd80      	pop	{r7, pc}

08002c8c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b084      	sub	sp, #16
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	60f8      	str	r0, [r7, #12]
 8002c94:	60b9      	str	r1, [r7, #8]
 8002c96:	607a      	str	r2, [r7, #4]
 8002c98:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002c9a:	e071      	b.n	8002d80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	695b      	ldr	r3, [r3, #20]
 8002ca2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ca6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002caa:	d123      	bne.n	8002cf4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	681a      	ldr	r2, [r3, #0]
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002cba:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002cc4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	2200      	movs	r2, #0
 8002cca:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	2220      	movs	r2, #32
 8002cd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ce0:	f043 0204 	orr.w	r2, r3, #4
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	2200      	movs	r2, #0
 8002cec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	e067      	b.n	8002dc4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cfa:	d041      	beq.n	8002d80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cfc:	f7fe fec2 	bl	8001a84 <HAL_GetTick>
 8002d00:	4602      	mov	r2, r0
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	1ad3      	subs	r3, r2, r3
 8002d06:	687a      	ldr	r2, [r7, #4]
 8002d08:	429a      	cmp	r2, r3
 8002d0a:	d302      	bcc.n	8002d12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d136      	bne.n	8002d80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002d12:	68bb      	ldr	r3, [r7, #8]
 8002d14:	0c1b      	lsrs	r3, r3, #16
 8002d16:	b2db      	uxtb	r3, r3
 8002d18:	2b01      	cmp	r3, #1
 8002d1a:	d10c      	bne.n	8002d36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	695b      	ldr	r3, [r3, #20]
 8002d22:	43da      	mvns	r2, r3
 8002d24:	68bb      	ldr	r3, [r7, #8]
 8002d26:	4013      	ands	r3, r2
 8002d28:	b29b      	uxth	r3, r3
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	bf14      	ite	ne
 8002d2e:	2301      	movne	r3, #1
 8002d30:	2300      	moveq	r3, #0
 8002d32:	b2db      	uxtb	r3, r3
 8002d34:	e00b      	b.n	8002d4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	699b      	ldr	r3, [r3, #24]
 8002d3c:	43da      	mvns	r2, r3
 8002d3e:	68bb      	ldr	r3, [r7, #8]
 8002d40:	4013      	ands	r3, r2
 8002d42:	b29b      	uxth	r3, r3
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	bf14      	ite	ne
 8002d48:	2301      	movne	r3, #1
 8002d4a:	2300      	moveq	r3, #0
 8002d4c:	b2db      	uxtb	r3, r3
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d016      	beq.n	8002d80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	2200      	movs	r2, #0
 8002d56:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	2220      	movs	r2, #32
 8002d5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	2200      	movs	r2, #0
 8002d64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d6c:	f043 0220 	orr.w	r2, r3, #32
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	2200      	movs	r2, #0
 8002d78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	e021      	b.n	8002dc4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002d80:	68bb      	ldr	r3, [r7, #8]
 8002d82:	0c1b      	lsrs	r3, r3, #16
 8002d84:	b2db      	uxtb	r3, r3
 8002d86:	2b01      	cmp	r3, #1
 8002d88:	d10c      	bne.n	8002da4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	695b      	ldr	r3, [r3, #20]
 8002d90:	43da      	mvns	r2, r3
 8002d92:	68bb      	ldr	r3, [r7, #8]
 8002d94:	4013      	ands	r3, r2
 8002d96:	b29b      	uxth	r3, r3
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	bf14      	ite	ne
 8002d9c:	2301      	movne	r3, #1
 8002d9e:	2300      	moveq	r3, #0
 8002da0:	b2db      	uxtb	r3, r3
 8002da2:	e00b      	b.n	8002dbc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	699b      	ldr	r3, [r3, #24]
 8002daa:	43da      	mvns	r2, r3
 8002dac:	68bb      	ldr	r3, [r7, #8]
 8002dae:	4013      	ands	r3, r2
 8002db0:	b29b      	uxth	r3, r3
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	bf14      	ite	ne
 8002db6:	2301      	movne	r3, #1
 8002db8:	2300      	moveq	r3, #0
 8002dba:	b2db      	uxtb	r3, r3
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	f47f af6d 	bne.w	8002c9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002dc2:	2300      	movs	r3, #0
}
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	3710      	adds	r7, #16
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bd80      	pop	{r7, pc}

08002dcc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b084      	sub	sp, #16
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	60f8      	str	r0, [r7, #12]
 8002dd4:	60b9      	str	r1, [r7, #8]
 8002dd6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002dd8:	e034      	b.n	8002e44 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002dda:	68f8      	ldr	r0, [r7, #12]
 8002ddc:	f000 f8e3 	bl	8002fa6 <I2C_IsAcknowledgeFailed>
 8002de0:	4603      	mov	r3, r0
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d001      	beq.n	8002dea <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002de6:	2301      	movs	r3, #1
 8002de8:	e034      	b.n	8002e54 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002dea:	68bb      	ldr	r3, [r7, #8]
 8002dec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002df0:	d028      	beq.n	8002e44 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002df2:	f7fe fe47 	bl	8001a84 <HAL_GetTick>
 8002df6:	4602      	mov	r2, r0
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	1ad3      	subs	r3, r2, r3
 8002dfc:	68ba      	ldr	r2, [r7, #8]
 8002dfe:	429a      	cmp	r2, r3
 8002e00:	d302      	bcc.n	8002e08 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002e02:	68bb      	ldr	r3, [r7, #8]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d11d      	bne.n	8002e44 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	695b      	ldr	r3, [r3, #20]
 8002e0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e12:	2b80      	cmp	r3, #128	@ 0x80
 8002e14:	d016      	beq.n	8002e44 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	2200      	movs	r2, #0
 8002e1a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	2220      	movs	r2, #32
 8002e20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	2200      	movs	r2, #0
 8002e28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e30:	f043 0220 	orr.w	r2, r3, #32
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002e40:	2301      	movs	r3, #1
 8002e42:	e007      	b.n	8002e54 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	695b      	ldr	r3, [r3, #20]
 8002e4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e4e:	2b80      	cmp	r3, #128	@ 0x80
 8002e50:	d1c3      	bne.n	8002dda <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002e52:	2300      	movs	r3, #0
}
 8002e54:	4618      	mov	r0, r3
 8002e56:	3710      	adds	r7, #16
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bd80      	pop	{r7, pc}

08002e5c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b084      	sub	sp, #16
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	60f8      	str	r0, [r7, #12]
 8002e64:	60b9      	str	r1, [r7, #8]
 8002e66:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002e68:	e034      	b.n	8002ed4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002e6a:	68f8      	ldr	r0, [r7, #12]
 8002e6c:	f000 f89b 	bl	8002fa6 <I2C_IsAcknowledgeFailed>
 8002e70:	4603      	mov	r3, r0
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d001      	beq.n	8002e7a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002e76:	2301      	movs	r3, #1
 8002e78:	e034      	b.n	8002ee4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e7a:	68bb      	ldr	r3, [r7, #8]
 8002e7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e80:	d028      	beq.n	8002ed4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e82:	f7fe fdff 	bl	8001a84 <HAL_GetTick>
 8002e86:	4602      	mov	r2, r0
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	1ad3      	subs	r3, r2, r3
 8002e8c:	68ba      	ldr	r2, [r7, #8]
 8002e8e:	429a      	cmp	r2, r3
 8002e90:	d302      	bcc.n	8002e98 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002e92:	68bb      	ldr	r3, [r7, #8]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d11d      	bne.n	8002ed4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	695b      	ldr	r3, [r3, #20]
 8002e9e:	f003 0304 	and.w	r3, r3, #4
 8002ea2:	2b04      	cmp	r3, #4
 8002ea4:	d016      	beq.n	8002ed4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	2220      	movs	r2, #32
 8002eb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ec0:	f043 0220 	orr.w	r2, r3, #32
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	2200      	movs	r2, #0
 8002ecc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	e007      	b.n	8002ee4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	695b      	ldr	r3, [r3, #20]
 8002eda:	f003 0304 	and.w	r3, r3, #4
 8002ede:	2b04      	cmp	r3, #4
 8002ee0:	d1c3      	bne.n	8002e6a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002ee2:	2300      	movs	r3, #0
}
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	3710      	adds	r7, #16
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bd80      	pop	{r7, pc}

08002eec <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b084      	sub	sp, #16
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	60f8      	str	r0, [r7, #12]
 8002ef4:	60b9      	str	r1, [r7, #8]
 8002ef6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002ef8:	e049      	b.n	8002f8e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	695b      	ldr	r3, [r3, #20]
 8002f00:	f003 0310 	and.w	r3, r3, #16
 8002f04:	2b10      	cmp	r3, #16
 8002f06:	d119      	bne.n	8002f3c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f06f 0210 	mvn.w	r2, #16
 8002f10:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	2200      	movs	r2, #0
 8002f16:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	2220      	movs	r2, #32
 8002f1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	2200      	movs	r2, #0
 8002f24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	2200      	movs	r2, #0
 8002f34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002f38:	2301      	movs	r3, #1
 8002f3a:	e030      	b.n	8002f9e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f3c:	f7fe fda2 	bl	8001a84 <HAL_GetTick>
 8002f40:	4602      	mov	r2, r0
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	1ad3      	subs	r3, r2, r3
 8002f46:	68ba      	ldr	r2, [r7, #8]
 8002f48:	429a      	cmp	r2, r3
 8002f4a:	d302      	bcc.n	8002f52 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002f4c:	68bb      	ldr	r3, [r7, #8]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d11d      	bne.n	8002f8e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	695b      	ldr	r3, [r3, #20]
 8002f58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f5c:	2b40      	cmp	r3, #64	@ 0x40
 8002f5e:	d016      	beq.n	8002f8e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	2200      	movs	r2, #0
 8002f64:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	2220      	movs	r2, #32
 8002f6a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	2200      	movs	r2, #0
 8002f72:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f7a:	f043 0220 	orr.w	r2, r3, #32
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	2200      	movs	r2, #0
 8002f86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	e007      	b.n	8002f9e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	695b      	ldr	r3, [r3, #20]
 8002f94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f98:	2b40      	cmp	r3, #64	@ 0x40
 8002f9a:	d1ae      	bne.n	8002efa <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002f9c:	2300      	movs	r3, #0
}
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	3710      	adds	r7, #16
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bd80      	pop	{r7, pc}

08002fa6 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002fa6:	b480      	push	{r7}
 8002fa8:	b083      	sub	sp, #12
 8002faa:	af00      	add	r7, sp, #0
 8002fac:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	695b      	ldr	r3, [r3, #20]
 8002fb4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002fb8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002fbc:	d11b      	bne.n	8002ff6 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002fc6:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2200      	movs	r2, #0
 8002fcc:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2220      	movs	r2, #32
 8002fd2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2200      	movs	r2, #0
 8002fda:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fe2:	f043 0204 	orr.w	r2, r3, #4
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2200      	movs	r2, #0
 8002fee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	e000      	b.n	8002ff8 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002ff6:	2300      	movs	r3, #0
}
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	370c      	adds	r7, #12
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003002:	4770      	bx	lr

08003004 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b086      	sub	sp, #24
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d101      	bne.n	8003016 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003012:	2301      	movs	r3, #1
 8003014:	e267      	b.n	80034e6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f003 0301 	and.w	r3, r3, #1
 800301e:	2b00      	cmp	r3, #0
 8003020:	d075      	beq.n	800310e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003022:	4b88      	ldr	r3, [pc, #544]	@ (8003244 <HAL_RCC_OscConfig+0x240>)
 8003024:	689b      	ldr	r3, [r3, #8]
 8003026:	f003 030c 	and.w	r3, r3, #12
 800302a:	2b04      	cmp	r3, #4
 800302c:	d00c      	beq.n	8003048 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800302e:	4b85      	ldr	r3, [pc, #532]	@ (8003244 <HAL_RCC_OscConfig+0x240>)
 8003030:	689b      	ldr	r3, [r3, #8]
 8003032:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003036:	2b08      	cmp	r3, #8
 8003038:	d112      	bne.n	8003060 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800303a:	4b82      	ldr	r3, [pc, #520]	@ (8003244 <HAL_RCC_OscConfig+0x240>)
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003042:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003046:	d10b      	bne.n	8003060 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003048:	4b7e      	ldr	r3, [pc, #504]	@ (8003244 <HAL_RCC_OscConfig+0x240>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003050:	2b00      	cmp	r3, #0
 8003052:	d05b      	beq.n	800310c <HAL_RCC_OscConfig+0x108>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d157      	bne.n	800310c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800305c:	2301      	movs	r3, #1
 800305e:	e242      	b.n	80034e6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003068:	d106      	bne.n	8003078 <HAL_RCC_OscConfig+0x74>
 800306a:	4b76      	ldr	r3, [pc, #472]	@ (8003244 <HAL_RCC_OscConfig+0x240>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4a75      	ldr	r2, [pc, #468]	@ (8003244 <HAL_RCC_OscConfig+0x240>)
 8003070:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003074:	6013      	str	r3, [r2, #0]
 8003076:	e01d      	b.n	80030b4 <HAL_RCC_OscConfig+0xb0>
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003080:	d10c      	bne.n	800309c <HAL_RCC_OscConfig+0x98>
 8003082:	4b70      	ldr	r3, [pc, #448]	@ (8003244 <HAL_RCC_OscConfig+0x240>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4a6f      	ldr	r2, [pc, #444]	@ (8003244 <HAL_RCC_OscConfig+0x240>)
 8003088:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800308c:	6013      	str	r3, [r2, #0]
 800308e:	4b6d      	ldr	r3, [pc, #436]	@ (8003244 <HAL_RCC_OscConfig+0x240>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4a6c      	ldr	r2, [pc, #432]	@ (8003244 <HAL_RCC_OscConfig+0x240>)
 8003094:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003098:	6013      	str	r3, [r2, #0]
 800309a:	e00b      	b.n	80030b4 <HAL_RCC_OscConfig+0xb0>
 800309c:	4b69      	ldr	r3, [pc, #420]	@ (8003244 <HAL_RCC_OscConfig+0x240>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4a68      	ldr	r2, [pc, #416]	@ (8003244 <HAL_RCC_OscConfig+0x240>)
 80030a2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80030a6:	6013      	str	r3, [r2, #0]
 80030a8:	4b66      	ldr	r3, [pc, #408]	@ (8003244 <HAL_RCC_OscConfig+0x240>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a65      	ldr	r2, [pc, #404]	@ (8003244 <HAL_RCC_OscConfig+0x240>)
 80030ae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80030b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d013      	beq.n	80030e4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030bc:	f7fe fce2 	bl	8001a84 <HAL_GetTick>
 80030c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030c2:	e008      	b.n	80030d6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030c4:	f7fe fcde 	bl	8001a84 <HAL_GetTick>
 80030c8:	4602      	mov	r2, r0
 80030ca:	693b      	ldr	r3, [r7, #16]
 80030cc:	1ad3      	subs	r3, r2, r3
 80030ce:	2b64      	cmp	r3, #100	@ 0x64
 80030d0:	d901      	bls.n	80030d6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80030d2:	2303      	movs	r3, #3
 80030d4:	e207      	b.n	80034e6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030d6:	4b5b      	ldr	r3, [pc, #364]	@ (8003244 <HAL_RCC_OscConfig+0x240>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d0f0      	beq.n	80030c4 <HAL_RCC_OscConfig+0xc0>
 80030e2:	e014      	b.n	800310e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030e4:	f7fe fcce 	bl	8001a84 <HAL_GetTick>
 80030e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030ea:	e008      	b.n	80030fe <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030ec:	f7fe fcca 	bl	8001a84 <HAL_GetTick>
 80030f0:	4602      	mov	r2, r0
 80030f2:	693b      	ldr	r3, [r7, #16]
 80030f4:	1ad3      	subs	r3, r2, r3
 80030f6:	2b64      	cmp	r3, #100	@ 0x64
 80030f8:	d901      	bls.n	80030fe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80030fa:	2303      	movs	r3, #3
 80030fc:	e1f3      	b.n	80034e6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030fe:	4b51      	ldr	r3, [pc, #324]	@ (8003244 <HAL_RCC_OscConfig+0x240>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003106:	2b00      	cmp	r3, #0
 8003108:	d1f0      	bne.n	80030ec <HAL_RCC_OscConfig+0xe8>
 800310a:	e000      	b.n	800310e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800310c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f003 0302 	and.w	r3, r3, #2
 8003116:	2b00      	cmp	r3, #0
 8003118:	d063      	beq.n	80031e2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800311a:	4b4a      	ldr	r3, [pc, #296]	@ (8003244 <HAL_RCC_OscConfig+0x240>)
 800311c:	689b      	ldr	r3, [r3, #8]
 800311e:	f003 030c 	and.w	r3, r3, #12
 8003122:	2b00      	cmp	r3, #0
 8003124:	d00b      	beq.n	800313e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003126:	4b47      	ldr	r3, [pc, #284]	@ (8003244 <HAL_RCC_OscConfig+0x240>)
 8003128:	689b      	ldr	r3, [r3, #8]
 800312a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800312e:	2b08      	cmp	r3, #8
 8003130:	d11c      	bne.n	800316c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003132:	4b44      	ldr	r3, [pc, #272]	@ (8003244 <HAL_RCC_OscConfig+0x240>)
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800313a:	2b00      	cmp	r3, #0
 800313c:	d116      	bne.n	800316c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800313e:	4b41      	ldr	r3, [pc, #260]	@ (8003244 <HAL_RCC_OscConfig+0x240>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f003 0302 	and.w	r3, r3, #2
 8003146:	2b00      	cmp	r3, #0
 8003148:	d005      	beq.n	8003156 <HAL_RCC_OscConfig+0x152>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	68db      	ldr	r3, [r3, #12]
 800314e:	2b01      	cmp	r3, #1
 8003150:	d001      	beq.n	8003156 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003152:	2301      	movs	r3, #1
 8003154:	e1c7      	b.n	80034e6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003156:	4b3b      	ldr	r3, [pc, #236]	@ (8003244 <HAL_RCC_OscConfig+0x240>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	691b      	ldr	r3, [r3, #16]
 8003162:	00db      	lsls	r3, r3, #3
 8003164:	4937      	ldr	r1, [pc, #220]	@ (8003244 <HAL_RCC_OscConfig+0x240>)
 8003166:	4313      	orrs	r3, r2
 8003168:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800316a:	e03a      	b.n	80031e2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	68db      	ldr	r3, [r3, #12]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d020      	beq.n	80031b6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003174:	4b34      	ldr	r3, [pc, #208]	@ (8003248 <HAL_RCC_OscConfig+0x244>)
 8003176:	2201      	movs	r2, #1
 8003178:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800317a:	f7fe fc83 	bl	8001a84 <HAL_GetTick>
 800317e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003180:	e008      	b.n	8003194 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003182:	f7fe fc7f 	bl	8001a84 <HAL_GetTick>
 8003186:	4602      	mov	r2, r0
 8003188:	693b      	ldr	r3, [r7, #16]
 800318a:	1ad3      	subs	r3, r2, r3
 800318c:	2b02      	cmp	r3, #2
 800318e:	d901      	bls.n	8003194 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003190:	2303      	movs	r3, #3
 8003192:	e1a8      	b.n	80034e6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003194:	4b2b      	ldr	r3, [pc, #172]	@ (8003244 <HAL_RCC_OscConfig+0x240>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f003 0302 	and.w	r3, r3, #2
 800319c:	2b00      	cmp	r3, #0
 800319e:	d0f0      	beq.n	8003182 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031a0:	4b28      	ldr	r3, [pc, #160]	@ (8003244 <HAL_RCC_OscConfig+0x240>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	691b      	ldr	r3, [r3, #16]
 80031ac:	00db      	lsls	r3, r3, #3
 80031ae:	4925      	ldr	r1, [pc, #148]	@ (8003244 <HAL_RCC_OscConfig+0x240>)
 80031b0:	4313      	orrs	r3, r2
 80031b2:	600b      	str	r3, [r1, #0]
 80031b4:	e015      	b.n	80031e2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80031b6:	4b24      	ldr	r3, [pc, #144]	@ (8003248 <HAL_RCC_OscConfig+0x244>)
 80031b8:	2200      	movs	r2, #0
 80031ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031bc:	f7fe fc62 	bl	8001a84 <HAL_GetTick>
 80031c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031c2:	e008      	b.n	80031d6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031c4:	f7fe fc5e 	bl	8001a84 <HAL_GetTick>
 80031c8:	4602      	mov	r2, r0
 80031ca:	693b      	ldr	r3, [r7, #16]
 80031cc:	1ad3      	subs	r3, r2, r3
 80031ce:	2b02      	cmp	r3, #2
 80031d0:	d901      	bls.n	80031d6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80031d2:	2303      	movs	r3, #3
 80031d4:	e187      	b.n	80034e6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031d6:	4b1b      	ldr	r3, [pc, #108]	@ (8003244 <HAL_RCC_OscConfig+0x240>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f003 0302 	and.w	r3, r3, #2
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d1f0      	bne.n	80031c4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f003 0308 	and.w	r3, r3, #8
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d036      	beq.n	800325c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	695b      	ldr	r3, [r3, #20]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d016      	beq.n	8003224 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031f6:	4b15      	ldr	r3, [pc, #84]	@ (800324c <HAL_RCC_OscConfig+0x248>)
 80031f8:	2201      	movs	r2, #1
 80031fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031fc:	f7fe fc42 	bl	8001a84 <HAL_GetTick>
 8003200:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003202:	e008      	b.n	8003216 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003204:	f7fe fc3e 	bl	8001a84 <HAL_GetTick>
 8003208:	4602      	mov	r2, r0
 800320a:	693b      	ldr	r3, [r7, #16]
 800320c:	1ad3      	subs	r3, r2, r3
 800320e:	2b02      	cmp	r3, #2
 8003210:	d901      	bls.n	8003216 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003212:	2303      	movs	r3, #3
 8003214:	e167      	b.n	80034e6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003216:	4b0b      	ldr	r3, [pc, #44]	@ (8003244 <HAL_RCC_OscConfig+0x240>)
 8003218:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800321a:	f003 0302 	and.w	r3, r3, #2
 800321e:	2b00      	cmp	r3, #0
 8003220:	d0f0      	beq.n	8003204 <HAL_RCC_OscConfig+0x200>
 8003222:	e01b      	b.n	800325c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003224:	4b09      	ldr	r3, [pc, #36]	@ (800324c <HAL_RCC_OscConfig+0x248>)
 8003226:	2200      	movs	r2, #0
 8003228:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800322a:	f7fe fc2b 	bl	8001a84 <HAL_GetTick>
 800322e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003230:	e00e      	b.n	8003250 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003232:	f7fe fc27 	bl	8001a84 <HAL_GetTick>
 8003236:	4602      	mov	r2, r0
 8003238:	693b      	ldr	r3, [r7, #16]
 800323a:	1ad3      	subs	r3, r2, r3
 800323c:	2b02      	cmp	r3, #2
 800323e:	d907      	bls.n	8003250 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003240:	2303      	movs	r3, #3
 8003242:	e150      	b.n	80034e6 <HAL_RCC_OscConfig+0x4e2>
 8003244:	40023800 	.word	0x40023800
 8003248:	42470000 	.word	0x42470000
 800324c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003250:	4b88      	ldr	r3, [pc, #544]	@ (8003474 <HAL_RCC_OscConfig+0x470>)
 8003252:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003254:	f003 0302 	and.w	r3, r3, #2
 8003258:	2b00      	cmp	r3, #0
 800325a:	d1ea      	bne.n	8003232 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f003 0304 	and.w	r3, r3, #4
 8003264:	2b00      	cmp	r3, #0
 8003266:	f000 8097 	beq.w	8003398 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800326a:	2300      	movs	r3, #0
 800326c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800326e:	4b81      	ldr	r3, [pc, #516]	@ (8003474 <HAL_RCC_OscConfig+0x470>)
 8003270:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003272:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003276:	2b00      	cmp	r3, #0
 8003278:	d10f      	bne.n	800329a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800327a:	2300      	movs	r3, #0
 800327c:	60bb      	str	r3, [r7, #8]
 800327e:	4b7d      	ldr	r3, [pc, #500]	@ (8003474 <HAL_RCC_OscConfig+0x470>)
 8003280:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003282:	4a7c      	ldr	r2, [pc, #496]	@ (8003474 <HAL_RCC_OscConfig+0x470>)
 8003284:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003288:	6413      	str	r3, [r2, #64]	@ 0x40
 800328a:	4b7a      	ldr	r3, [pc, #488]	@ (8003474 <HAL_RCC_OscConfig+0x470>)
 800328c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800328e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003292:	60bb      	str	r3, [r7, #8]
 8003294:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003296:	2301      	movs	r3, #1
 8003298:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800329a:	4b77      	ldr	r3, [pc, #476]	@ (8003478 <HAL_RCC_OscConfig+0x474>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d118      	bne.n	80032d8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032a6:	4b74      	ldr	r3, [pc, #464]	@ (8003478 <HAL_RCC_OscConfig+0x474>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4a73      	ldr	r2, [pc, #460]	@ (8003478 <HAL_RCC_OscConfig+0x474>)
 80032ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80032b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032b2:	f7fe fbe7 	bl	8001a84 <HAL_GetTick>
 80032b6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032b8:	e008      	b.n	80032cc <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032ba:	f7fe fbe3 	bl	8001a84 <HAL_GetTick>
 80032be:	4602      	mov	r2, r0
 80032c0:	693b      	ldr	r3, [r7, #16]
 80032c2:	1ad3      	subs	r3, r2, r3
 80032c4:	2b02      	cmp	r3, #2
 80032c6:	d901      	bls.n	80032cc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80032c8:	2303      	movs	r3, #3
 80032ca:	e10c      	b.n	80034e6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032cc:	4b6a      	ldr	r3, [pc, #424]	@ (8003478 <HAL_RCC_OscConfig+0x474>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d0f0      	beq.n	80032ba <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	689b      	ldr	r3, [r3, #8]
 80032dc:	2b01      	cmp	r3, #1
 80032de:	d106      	bne.n	80032ee <HAL_RCC_OscConfig+0x2ea>
 80032e0:	4b64      	ldr	r3, [pc, #400]	@ (8003474 <HAL_RCC_OscConfig+0x470>)
 80032e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032e4:	4a63      	ldr	r2, [pc, #396]	@ (8003474 <HAL_RCC_OscConfig+0x470>)
 80032e6:	f043 0301 	orr.w	r3, r3, #1
 80032ea:	6713      	str	r3, [r2, #112]	@ 0x70
 80032ec:	e01c      	b.n	8003328 <HAL_RCC_OscConfig+0x324>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	689b      	ldr	r3, [r3, #8]
 80032f2:	2b05      	cmp	r3, #5
 80032f4:	d10c      	bne.n	8003310 <HAL_RCC_OscConfig+0x30c>
 80032f6:	4b5f      	ldr	r3, [pc, #380]	@ (8003474 <HAL_RCC_OscConfig+0x470>)
 80032f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032fa:	4a5e      	ldr	r2, [pc, #376]	@ (8003474 <HAL_RCC_OscConfig+0x470>)
 80032fc:	f043 0304 	orr.w	r3, r3, #4
 8003300:	6713      	str	r3, [r2, #112]	@ 0x70
 8003302:	4b5c      	ldr	r3, [pc, #368]	@ (8003474 <HAL_RCC_OscConfig+0x470>)
 8003304:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003306:	4a5b      	ldr	r2, [pc, #364]	@ (8003474 <HAL_RCC_OscConfig+0x470>)
 8003308:	f043 0301 	orr.w	r3, r3, #1
 800330c:	6713      	str	r3, [r2, #112]	@ 0x70
 800330e:	e00b      	b.n	8003328 <HAL_RCC_OscConfig+0x324>
 8003310:	4b58      	ldr	r3, [pc, #352]	@ (8003474 <HAL_RCC_OscConfig+0x470>)
 8003312:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003314:	4a57      	ldr	r2, [pc, #348]	@ (8003474 <HAL_RCC_OscConfig+0x470>)
 8003316:	f023 0301 	bic.w	r3, r3, #1
 800331a:	6713      	str	r3, [r2, #112]	@ 0x70
 800331c:	4b55      	ldr	r3, [pc, #340]	@ (8003474 <HAL_RCC_OscConfig+0x470>)
 800331e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003320:	4a54      	ldr	r2, [pc, #336]	@ (8003474 <HAL_RCC_OscConfig+0x470>)
 8003322:	f023 0304 	bic.w	r3, r3, #4
 8003326:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	689b      	ldr	r3, [r3, #8]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d015      	beq.n	800335c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003330:	f7fe fba8 	bl	8001a84 <HAL_GetTick>
 8003334:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003336:	e00a      	b.n	800334e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003338:	f7fe fba4 	bl	8001a84 <HAL_GetTick>
 800333c:	4602      	mov	r2, r0
 800333e:	693b      	ldr	r3, [r7, #16]
 8003340:	1ad3      	subs	r3, r2, r3
 8003342:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003346:	4293      	cmp	r3, r2
 8003348:	d901      	bls.n	800334e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800334a:	2303      	movs	r3, #3
 800334c:	e0cb      	b.n	80034e6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800334e:	4b49      	ldr	r3, [pc, #292]	@ (8003474 <HAL_RCC_OscConfig+0x470>)
 8003350:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003352:	f003 0302 	and.w	r3, r3, #2
 8003356:	2b00      	cmp	r3, #0
 8003358:	d0ee      	beq.n	8003338 <HAL_RCC_OscConfig+0x334>
 800335a:	e014      	b.n	8003386 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800335c:	f7fe fb92 	bl	8001a84 <HAL_GetTick>
 8003360:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003362:	e00a      	b.n	800337a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003364:	f7fe fb8e 	bl	8001a84 <HAL_GetTick>
 8003368:	4602      	mov	r2, r0
 800336a:	693b      	ldr	r3, [r7, #16]
 800336c:	1ad3      	subs	r3, r2, r3
 800336e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003372:	4293      	cmp	r3, r2
 8003374:	d901      	bls.n	800337a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003376:	2303      	movs	r3, #3
 8003378:	e0b5      	b.n	80034e6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800337a:	4b3e      	ldr	r3, [pc, #248]	@ (8003474 <HAL_RCC_OscConfig+0x470>)
 800337c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800337e:	f003 0302 	and.w	r3, r3, #2
 8003382:	2b00      	cmp	r3, #0
 8003384:	d1ee      	bne.n	8003364 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003386:	7dfb      	ldrb	r3, [r7, #23]
 8003388:	2b01      	cmp	r3, #1
 800338a:	d105      	bne.n	8003398 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800338c:	4b39      	ldr	r3, [pc, #228]	@ (8003474 <HAL_RCC_OscConfig+0x470>)
 800338e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003390:	4a38      	ldr	r2, [pc, #224]	@ (8003474 <HAL_RCC_OscConfig+0x470>)
 8003392:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003396:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	699b      	ldr	r3, [r3, #24]
 800339c:	2b00      	cmp	r3, #0
 800339e:	f000 80a1 	beq.w	80034e4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80033a2:	4b34      	ldr	r3, [pc, #208]	@ (8003474 <HAL_RCC_OscConfig+0x470>)
 80033a4:	689b      	ldr	r3, [r3, #8]
 80033a6:	f003 030c 	and.w	r3, r3, #12
 80033aa:	2b08      	cmp	r3, #8
 80033ac:	d05c      	beq.n	8003468 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	699b      	ldr	r3, [r3, #24]
 80033b2:	2b02      	cmp	r3, #2
 80033b4:	d141      	bne.n	800343a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033b6:	4b31      	ldr	r3, [pc, #196]	@ (800347c <HAL_RCC_OscConfig+0x478>)
 80033b8:	2200      	movs	r2, #0
 80033ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033bc:	f7fe fb62 	bl	8001a84 <HAL_GetTick>
 80033c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033c2:	e008      	b.n	80033d6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033c4:	f7fe fb5e 	bl	8001a84 <HAL_GetTick>
 80033c8:	4602      	mov	r2, r0
 80033ca:	693b      	ldr	r3, [r7, #16]
 80033cc:	1ad3      	subs	r3, r2, r3
 80033ce:	2b02      	cmp	r3, #2
 80033d0:	d901      	bls.n	80033d6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80033d2:	2303      	movs	r3, #3
 80033d4:	e087      	b.n	80034e6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033d6:	4b27      	ldr	r3, [pc, #156]	@ (8003474 <HAL_RCC_OscConfig+0x470>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d1f0      	bne.n	80033c4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	69da      	ldr	r2, [r3, #28]
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6a1b      	ldr	r3, [r3, #32]
 80033ea:	431a      	orrs	r2, r3
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033f0:	019b      	lsls	r3, r3, #6
 80033f2:	431a      	orrs	r2, r3
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033f8:	085b      	lsrs	r3, r3, #1
 80033fa:	3b01      	subs	r3, #1
 80033fc:	041b      	lsls	r3, r3, #16
 80033fe:	431a      	orrs	r2, r3
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003404:	061b      	lsls	r3, r3, #24
 8003406:	491b      	ldr	r1, [pc, #108]	@ (8003474 <HAL_RCC_OscConfig+0x470>)
 8003408:	4313      	orrs	r3, r2
 800340a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800340c:	4b1b      	ldr	r3, [pc, #108]	@ (800347c <HAL_RCC_OscConfig+0x478>)
 800340e:	2201      	movs	r2, #1
 8003410:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003412:	f7fe fb37 	bl	8001a84 <HAL_GetTick>
 8003416:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003418:	e008      	b.n	800342c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800341a:	f7fe fb33 	bl	8001a84 <HAL_GetTick>
 800341e:	4602      	mov	r2, r0
 8003420:	693b      	ldr	r3, [r7, #16]
 8003422:	1ad3      	subs	r3, r2, r3
 8003424:	2b02      	cmp	r3, #2
 8003426:	d901      	bls.n	800342c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003428:	2303      	movs	r3, #3
 800342a:	e05c      	b.n	80034e6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800342c:	4b11      	ldr	r3, [pc, #68]	@ (8003474 <HAL_RCC_OscConfig+0x470>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003434:	2b00      	cmp	r3, #0
 8003436:	d0f0      	beq.n	800341a <HAL_RCC_OscConfig+0x416>
 8003438:	e054      	b.n	80034e4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800343a:	4b10      	ldr	r3, [pc, #64]	@ (800347c <HAL_RCC_OscConfig+0x478>)
 800343c:	2200      	movs	r2, #0
 800343e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003440:	f7fe fb20 	bl	8001a84 <HAL_GetTick>
 8003444:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003446:	e008      	b.n	800345a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003448:	f7fe fb1c 	bl	8001a84 <HAL_GetTick>
 800344c:	4602      	mov	r2, r0
 800344e:	693b      	ldr	r3, [r7, #16]
 8003450:	1ad3      	subs	r3, r2, r3
 8003452:	2b02      	cmp	r3, #2
 8003454:	d901      	bls.n	800345a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003456:	2303      	movs	r3, #3
 8003458:	e045      	b.n	80034e6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800345a:	4b06      	ldr	r3, [pc, #24]	@ (8003474 <HAL_RCC_OscConfig+0x470>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003462:	2b00      	cmp	r3, #0
 8003464:	d1f0      	bne.n	8003448 <HAL_RCC_OscConfig+0x444>
 8003466:	e03d      	b.n	80034e4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	699b      	ldr	r3, [r3, #24]
 800346c:	2b01      	cmp	r3, #1
 800346e:	d107      	bne.n	8003480 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003470:	2301      	movs	r3, #1
 8003472:	e038      	b.n	80034e6 <HAL_RCC_OscConfig+0x4e2>
 8003474:	40023800 	.word	0x40023800
 8003478:	40007000 	.word	0x40007000
 800347c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003480:	4b1b      	ldr	r3, [pc, #108]	@ (80034f0 <HAL_RCC_OscConfig+0x4ec>)
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	699b      	ldr	r3, [r3, #24]
 800348a:	2b01      	cmp	r3, #1
 800348c:	d028      	beq.n	80034e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003498:	429a      	cmp	r2, r3
 800349a:	d121      	bne.n	80034e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034a6:	429a      	cmp	r2, r3
 80034a8:	d11a      	bne.n	80034e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80034aa:	68fa      	ldr	r2, [r7, #12]
 80034ac:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80034b0:	4013      	ands	r3, r2
 80034b2:	687a      	ldr	r2, [r7, #4]
 80034b4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80034b6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d111      	bne.n	80034e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034c6:	085b      	lsrs	r3, r3, #1
 80034c8:	3b01      	subs	r3, #1
 80034ca:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80034cc:	429a      	cmp	r2, r3
 80034ce:	d107      	bne.n	80034e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034da:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80034dc:	429a      	cmp	r2, r3
 80034de:	d001      	beq.n	80034e4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80034e0:	2301      	movs	r3, #1
 80034e2:	e000      	b.n	80034e6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80034e4:	2300      	movs	r3, #0
}
 80034e6:	4618      	mov	r0, r3
 80034e8:	3718      	adds	r7, #24
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bd80      	pop	{r7, pc}
 80034ee:	bf00      	nop
 80034f0:	40023800 	.word	0x40023800

080034f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b084      	sub	sp, #16
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
 80034fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d101      	bne.n	8003508 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003504:	2301      	movs	r3, #1
 8003506:	e0cc      	b.n	80036a2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003508:	4b68      	ldr	r3, [pc, #416]	@ (80036ac <HAL_RCC_ClockConfig+0x1b8>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f003 0307 	and.w	r3, r3, #7
 8003510:	683a      	ldr	r2, [r7, #0]
 8003512:	429a      	cmp	r2, r3
 8003514:	d90c      	bls.n	8003530 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003516:	4b65      	ldr	r3, [pc, #404]	@ (80036ac <HAL_RCC_ClockConfig+0x1b8>)
 8003518:	683a      	ldr	r2, [r7, #0]
 800351a:	b2d2      	uxtb	r2, r2
 800351c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800351e:	4b63      	ldr	r3, [pc, #396]	@ (80036ac <HAL_RCC_ClockConfig+0x1b8>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f003 0307 	and.w	r3, r3, #7
 8003526:	683a      	ldr	r2, [r7, #0]
 8003528:	429a      	cmp	r2, r3
 800352a:	d001      	beq.n	8003530 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800352c:	2301      	movs	r3, #1
 800352e:	e0b8      	b.n	80036a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f003 0302 	and.w	r3, r3, #2
 8003538:	2b00      	cmp	r3, #0
 800353a:	d020      	beq.n	800357e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f003 0304 	and.w	r3, r3, #4
 8003544:	2b00      	cmp	r3, #0
 8003546:	d005      	beq.n	8003554 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003548:	4b59      	ldr	r3, [pc, #356]	@ (80036b0 <HAL_RCC_ClockConfig+0x1bc>)
 800354a:	689b      	ldr	r3, [r3, #8]
 800354c:	4a58      	ldr	r2, [pc, #352]	@ (80036b0 <HAL_RCC_ClockConfig+0x1bc>)
 800354e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003552:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f003 0308 	and.w	r3, r3, #8
 800355c:	2b00      	cmp	r3, #0
 800355e:	d005      	beq.n	800356c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003560:	4b53      	ldr	r3, [pc, #332]	@ (80036b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003562:	689b      	ldr	r3, [r3, #8]
 8003564:	4a52      	ldr	r2, [pc, #328]	@ (80036b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003566:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800356a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800356c:	4b50      	ldr	r3, [pc, #320]	@ (80036b0 <HAL_RCC_ClockConfig+0x1bc>)
 800356e:	689b      	ldr	r3, [r3, #8]
 8003570:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	689b      	ldr	r3, [r3, #8]
 8003578:	494d      	ldr	r1, [pc, #308]	@ (80036b0 <HAL_RCC_ClockConfig+0x1bc>)
 800357a:	4313      	orrs	r3, r2
 800357c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f003 0301 	and.w	r3, r3, #1
 8003586:	2b00      	cmp	r3, #0
 8003588:	d044      	beq.n	8003614 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	2b01      	cmp	r3, #1
 8003590:	d107      	bne.n	80035a2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003592:	4b47      	ldr	r3, [pc, #284]	@ (80036b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800359a:	2b00      	cmp	r3, #0
 800359c:	d119      	bne.n	80035d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800359e:	2301      	movs	r3, #1
 80035a0:	e07f      	b.n	80036a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	2b02      	cmp	r3, #2
 80035a8:	d003      	beq.n	80035b2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80035ae:	2b03      	cmp	r3, #3
 80035b0:	d107      	bne.n	80035c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035b2:	4b3f      	ldr	r3, [pc, #252]	@ (80036b0 <HAL_RCC_ClockConfig+0x1bc>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d109      	bne.n	80035d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035be:	2301      	movs	r3, #1
 80035c0:	e06f      	b.n	80036a2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035c2:	4b3b      	ldr	r3, [pc, #236]	@ (80036b0 <HAL_RCC_ClockConfig+0x1bc>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f003 0302 	and.w	r3, r3, #2
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d101      	bne.n	80035d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035ce:	2301      	movs	r3, #1
 80035d0:	e067      	b.n	80036a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80035d2:	4b37      	ldr	r3, [pc, #220]	@ (80036b0 <HAL_RCC_ClockConfig+0x1bc>)
 80035d4:	689b      	ldr	r3, [r3, #8]
 80035d6:	f023 0203 	bic.w	r2, r3, #3
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	4934      	ldr	r1, [pc, #208]	@ (80036b0 <HAL_RCC_ClockConfig+0x1bc>)
 80035e0:	4313      	orrs	r3, r2
 80035e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80035e4:	f7fe fa4e 	bl	8001a84 <HAL_GetTick>
 80035e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035ea:	e00a      	b.n	8003602 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035ec:	f7fe fa4a 	bl	8001a84 <HAL_GetTick>
 80035f0:	4602      	mov	r2, r0
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	1ad3      	subs	r3, r2, r3
 80035f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d901      	bls.n	8003602 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80035fe:	2303      	movs	r3, #3
 8003600:	e04f      	b.n	80036a2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003602:	4b2b      	ldr	r3, [pc, #172]	@ (80036b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003604:	689b      	ldr	r3, [r3, #8]
 8003606:	f003 020c 	and.w	r2, r3, #12
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	685b      	ldr	r3, [r3, #4]
 800360e:	009b      	lsls	r3, r3, #2
 8003610:	429a      	cmp	r2, r3
 8003612:	d1eb      	bne.n	80035ec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003614:	4b25      	ldr	r3, [pc, #148]	@ (80036ac <HAL_RCC_ClockConfig+0x1b8>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f003 0307 	and.w	r3, r3, #7
 800361c:	683a      	ldr	r2, [r7, #0]
 800361e:	429a      	cmp	r2, r3
 8003620:	d20c      	bcs.n	800363c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003622:	4b22      	ldr	r3, [pc, #136]	@ (80036ac <HAL_RCC_ClockConfig+0x1b8>)
 8003624:	683a      	ldr	r2, [r7, #0]
 8003626:	b2d2      	uxtb	r2, r2
 8003628:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800362a:	4b20      	ldr	r3, [pc, #128]	@ (80036ac <HAL_RCC_ClockConfig+0x1b8>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f003 0307 	and.w	r3, r3, #7
 8003632:	683a      	ldr	r2, [r7, #0]
 8003634:	429a      	cmp	r2, r3
 8003636:	d001      	beq.n	800363c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003638:	2301      	movs	r3, #1
 800363a:	e032      	b.n	80036a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f003 0304 	and.w	r3, r3, #4
 8003644:	2b00      	cmp	r3, #0
 8003646:	d008      	beq.n	800365a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003648:	4b19      	ldr	r3, [pc, #100]	@ (80036b0 <HAL_RCC_ClockConfig+0x1bc>)
 800364a:	689b      	ldr	r3, [r3, #8]
 800364c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	68db      	ldr	r3, [r3, #12]
 8003654:	4916      	ldr	r1, [pc, #88]	@ (80036b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003656:	4313      	orrs	r3, r2
 8003658:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f003 0308 	and.w	r3, r3, #8
 8003662:	2b00      	cmp	r3, #0
 8003664:	d009      	beq.n	800367a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003666:	4b12      	ldr	r3, [pc, #72]	@ (80036b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003668:	689b      	ldr	r3, [r3, #8]
 800366a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	691b      	ldr	r3, [r3, #16]
 8003672:	00db      	lsls	r3, r3, #3
 8003674:	490e      	ldr	r1, [pc, #56]	@ (80036b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003676:	4313      	orrs	r3, r2
 8003678:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800367a:	f000 f821 	bl	80036c0 <HAL_RCC_GetSysClockFreq>
 800367e:	4602      	mov	r2, r0
 8003680:	4b0b      	ldr	r3, [pc, #44]	@ (80036b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003682:	689b      	ldr	r3, [r3, #8]
 8003684:	091b      	lsrs	r3, r3, #4
 8003686:	f003 030f 	and.w	r3, r3, #15
 800368a:	490a      	ldr	r1, [pc, #40]	@ (80036b4 <HAL_RCC_ClockConfig+0x1c0>)
 800368c:	5ccb      	ldrb	r3, [r1, r3]
 800368e:	fa22 f303 	lsr.w	r3, r2, r3
 8003692:	4a09      	ldr	r2, [pc, #36]	@ (80036b8 <HAL_RCC_ClockConfig+0x1c4>)
 8003694:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003696:	4b09      	ldr	r3, [pc, #36]	@ (80036bc <HAL_RCC_ClockConfig+0x1c8>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4618      	mov	r0, r3
 800369c:	f7fe f9ae 	bl	80019fc <HAL_InitTick>

  return HAL_OK;
 80036a0:	2300      	movs	r3, #0
}
 80036a2:	4618      	mov	r0, r3
 80036a4:	3710      	adds	r7, #16
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bd80      	pop	{r7, pc}
 80036aa:	bf00      	nop
 80036ac:	40023c00 	.word	0x40023c00
 80036b0:	40023800 	.word	0x40023800
 80036b4:	08004f8c 	.word	0x08004f8c
 80036b8:	20000000 	.word	0x20000000
 80036bc:	20000004 	.word	0x20000004

080036c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80036c4:	b090      	sub	sp, #64	@ 0x40
 80036c6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80036c8:	2300      	movs	r3, #0
 80036ca:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80036cc:	2300      	movs	r3, #0
 80036ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80036d0:	2300      	movs	r3, #0
 80036d2:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80036d4:	2300      	movs	r3, #0
 80036d6:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80036d8:	4b59      	ldr	r3, [pc, #356]	@ (8003840 <HAL_RCC_GetSysClockFreq+0x180>)
 80036da:	689b      	ldr	r3, [r3, #8]
 80036dc:	f003 030c 	and.w	r3, r3, #12
 80036e0:	2b08      	cmp	r3, #8
 80036e2:	d00d      	beq.n	8003700 <HAL_RCC_GetSysClockFreq+0x40>
 80036e4:	2b08      	cmp	r3, #8
 80036e6:	f200 80a1 	bhi.w	800382c <HAL_RCC_GetSysClockFreq+0x16c>
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d002      	beq.n	80036f4 <HAL_RCC_GetSysClockFreq+0x34>
 80036ee:	2b04      	cmp	r3, #4
 80036f0:	d003      	beq.n	80036fa <HAL_RCC_GetSysClockFreq+0x3a>
 80036f2:	e09b      	b.n	800382c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80036f4:	4b53      	ldr	r3, [pc, #332]	@ (8003844 <HAL_RCC_GetSysClockFreq+0x184>)
 80036f6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80036f8:	e09b      	b.n	8003832 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80036fa:	4b53      	ldr	r3, [pc, #332]	@ (8003848 <HAL_RCC_GetSysClockFreq+0x188>)
 80036fc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80036fe:	e098      	b.n	8003832 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003700:	4b4f      	ldr	r3, [pc, #316]	@ (8003840 <HAL_RCC_GetSysClockFreq+0x180>)
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003708:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800370a:	4b4d      	ldr	r3, [pc, #308]	@ (8003840 <HAL_RCC_GetSysClockFreq+0x180>)
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003712:	2b00      	cmp	r3, #0
 8003714:	d028      	beq.n	8003768 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003716:	4b4a      	ldr	r3, [pc, #296]	@ (8003840 <HAL_RCC_GetSysClockFreq+0x180>)
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	099b      	lsrs	r3, r3, #6
 800371c:	2200      	movs	r2, #0
 800371e:	623b      	str	r3, [r7, #32]
 8003720:	627a      	str	r2, [r7, #36]	@ 0x24
 8003722:	6a3b      	ldr	r3, [r7, #32]
 8003724:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003728:	2100      	movs	r1, #0
 800372a:	4b47      	ldr	r3, [pc, #284]	@ (8003848 <HAL_RCC_GetSysClockFreq+0x188>)
 800372c:	fb03 f201 	mul.w	r2, r3, r1
 8003730:	2300      	movs	r3, #0
 8003732:	fb00 f303 	mul.w	r3, r0, r3
 8003736:	4413      	add	r3, r2
 8003738:	4a43      	ldr	r2, [pc, #268]	@ (8003848 <HAL_RCC_GetSysClockFreq+0x188>)
 800373a:	fba0 1202 	umull	r1, r2, r0, r2
 800373e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003740:	460a      	mov	r2, r1
 8003742:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003744:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003746:	4413      	add	r3, r2
 8003748:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800374a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800374c:	2200      	movs	r2, #0
 800374e:	61bb      	str	r3, [r7, #24]
 8003750:	61fa      	str	r2, [r7, #28]
 8003752:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003756:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800375a:	f7fd f97f 	bl	8000a5c <__aeabi_uldivmod>
 800375e:	4602      	mov	r2, r0
 8003760:	460b      	mov	r3, r1
 8003762:	4613      	mov	r3, r2
 8003764:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003766:	e053      	b.n	8003810 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003768:	4b35      	ldr	r3, [pc, #212]	@ (8003840 <HAL_RCC_GetSysClockFreq+0x180>)
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	099b      	lsrs	r3, r3, #6
 800376e:	2200      	movs	r2, #0
 8003770:	613b      	str	r3, [r7, #16]
 8003772:	617a      	str	r2, [r7, #20]
 8003774:	693b      	ldr	r3, [r7, #16]
 8003776:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800377a:	f04f 0b00 	mov.w	fp, #0
 800377e:	4652      	mov	r2, sl
 8003780:	465b      	mov	r3, fp
 8003782:	f04f 0000 	mov.w	r0, #0
 8003786:	f04f 0100 	mov.w	r1, #0
 800378a:	0159      	lsls	r1, r3, #5
 800378c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003790:	0150      	lsls	r0, r2, #5
 8003792:	4602      	mov	r2, r0
 8003794:	460b      	mov	r3, r1
 8003796:	ebb2 080a 	subs.w	r8, r2, sl
 800379a:	eb63 090b 	sbc.w	r9, r3, fp
 800379e:	f04f 0200 	mov.w	r2, #0
 80037a2:	f04f 0300 	mov.w	r3, #0
 80037a6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80037aa:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80037ae:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80037b2:	ebb2 0408 	subs.w	r4, r2, r8
 80037b6:	eb63 0509 	sbc.w	r5, r3, r9
 80037ba:	f04f 0200 	mov.w	r2, #0
 80037be:	f04f 0300 	mov.w	r3, #0
 80037c2:	00eb      	lsls	r3, r5, #3
 80037c4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80037c8:	00e2      	lsls	r2, r4, #3
 80037ca:	4614      	mov	r4, r2
 80037cc:	461d      	mov	r5, r3
 80037ce:	eb14 030a 	adds.w	r3, r4, sl
 80037d2:	603b      	str	r3, [r7, #0]
 80037d4:	eb45 030b 	adc.w	r3, r5, fp
 80037d8:	607b      	str	r3, [r7, #4]
 80037da:	f04f 0200 	mov.w	r2, #0
 80037de:	f04f 0300 	mov.w	r3, #0
 80037e2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80037e6:	4629      	mov	r1, r5
 80037e8:	028b      	lsls	r3, r1, #10
 80037ea:	4621      	mov	r1, r4
 80037ec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80037f0:	4621      	mov	r1, r4
 80037f2:	028a      	lsls	r2, r1, #10
 80037f4:	4610      	mov	r0, r2
 80037f6:	4619      	mov	r1, r3
 80037f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80037fa:	2200      	movs	r2, #0
 80037fc:	60bb      	str	r3, [r7, #8]
 80037fe:	60fa      	str	r2, [r7, #12]
 8003800:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003804:	f7fd f92a 	bl	8000a5c <__aeabi_uldivmod>
 8003808:	4602      	mov	r2, r0
 800380a:	460b      	mov	r3, r1
 800380c:	4613      	mov	r3, r2
 800380e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003810:	4b0b      	ldr	r3, [pc, #44]	@ (8003840 <HAL_RCC_GetSysClockFreq+0x180>)
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	0c1b      	lsrs	r3, r3, #16
 8003816:	f003 0303 	and.w	r3, r3, #3
 800381a:	3301      	adds	r3, #1
 800381c:	005b      	lsls	r3, r3, #1
 800381e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8003820:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003822:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003824:	fbb2 f3f3 	udiv	r3, r2, r3
 8003828:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800382a:	e002      	b.n	8003832 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800382c:	4b05      	ldr	r3, [pc, #20]	@ (8003844 <HAL_RCC_GetSysClockFreq+0x184>)
 800382e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003830:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003832:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003834:	4618      	mov	r0, r3
 8003836:	3740      	adds	r7, #64	@ 0x40
 8003838:	46bd      	mov	sp, r7
 800383a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800383e:	bf00      	nop
 8003840:	40023800 	.word	0x40023800
 8003844:	00f42400 	.word	0x00f42400
 8003848:	017d7840 	.word	0x017d7840

0800384c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800384c:	b480      	push	{r7}
 800384e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003850:	4b03      	ldr	r3, [pc, #12]	@ (8003860 <HAL_RCC_GetHCLKFreq+0x14>)
 8003852:	681b      	ldr	r3, [r3, #0]
}
 8003854:	4618      	mov	r0, r3
 8003856:	46bd      	mov	sp, r7
 8003858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385c:	4770      	bx	lr
 800385e:	bf00      	nop
 8003860:	20000000 	.word	0x20000000

08003864 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003868:	f7ff fff0 	bl	800384c <HAL_RCC_GetHCLKFreq>
 800386c:	4602      	mov	r2, r0
 800386e:	4b05      	ldr	r3, [pc, #20]	@ (8003884 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003870:	689b      	ldr	r3, [r3, #8]
 8003872:	0a9b      	lsrs	r3, r3, #10
 8003874:	f003 0307 	and.w	r3, r3, #7
 8003878:	4903      	ldr	r1, [pc, #12]	@ (8003888 <HAL_RCC_GetPCLK1Freq+0x24>)
 800387a:	5ccb      	ldrb	r3, [r1, r3]
 800387c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003880:	4618      	mov	r0, r3
 8003882:	bd80      	pop	{r7, pc}
 8003884:	40023800 	.word	0x40023800
 8003888:	08004f9c 	.word	0x08004f9c

0800388c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003890:	f7ff ffdc 	bl	800384c <HAL_RCC_GetHCLKFreq>
 8003894:	4602      	mov	r2, r0
 8003896:	4b05      	ldr	r3, [pc, #20]	@ (80038ac <HAL_RCC_GetPCLK2Freq+0x20>)
 8003898:	689b      	ldr	r3, [r3, #8]
 800389a:	0b5b      	lsrs	r3, r3, #13
 800389c:	f003 0307 	and.w	r3, r3, #7
 80038a0:	4903      	ldr	r1, [pc, #12]	@ (80038b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80038a2:	5ccb      	ldrb	r3, [r1, r3]
 80038a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038a8:	4618      	mov	r0, r3
 80038aa:	bd80      	pop	{r7, pc}
 80038ac:	40023800 	.word	0x40023800
 80038b0:	08004f9c 	.word	0x08004f9c

080038b4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b082      	sub	sp, #8
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d101      	bne.n	80038c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80038c2:	2301      	movs	r3, #1
 80038c4:	e042      	b.n	800394c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80038cc:	b2db      	uxtb	r3, r3
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d106      	bne.n	80038e0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2200      	movs	r2, #0
 80038d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80038da:	6878      	ldr	r0, [r7, #4]
 80038dc:	f7fd fc2a 	bl	8001134 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2224      	movs	r2, #36	@ 0x24
 80038e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	68da      	ldr	r2, [r3, #12]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80038f6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80038f8:	6878      	ldr	r0, [r7, #4]
 80038fa:	f000 f973 	bl	8003be4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	691a      	ldr	r2, [r3, #16]
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800390c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	695a      	ldr	r2, [r3, #20]
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800391c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	68da      	ldr	r2, [r3, #12]
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800392c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2200      	movs	r2, #0
 8003932:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2220      	movs	r2, #32
 8003938:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2220      	movs	r2, #32
 8003940:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2200      	movs	r2, #0
 8003948:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800394a:	2300      	movs	r3, #0
}
 800394c:	4618      	mov	r0, r3
 800394e:	3708      	adds	r7, #8
 8003950:	46bd      	mov	sp, r7
 8003952:	bd80      	pop	{r7, pc}

08003954 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b08a      	sub	sp, #40	@ 0x28
 8003958:	af02      	add	r7, sp, #8
 800395a:	60f8      	str	r0, [r7, #12]
 800395c:	60b9      	str	r1, [r7, #8]
 800395e:	603b      	str	r3, [r7, #0]
 8003960:	4613      	mov	r3, r2
 8003962:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003964:	2300      	movs	r3, #0
 8003966:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800396e:	b2db      	uxtb	r3, r3
 8003970:	2b20      	cmp	r3, #32
 8003972:	d175      	bne.n	8003a60 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003974:	68bb      	ldr	r3, [r7, #8]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d002      	beq.n	8003980 <HAL_UART_Transmit+0x2c>
 800397a:	88fb      	ldrh	r3, [r7, #6]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d101      	bne.n	8003984 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003980:	2301      	movs	r3, #1
 8003982:	e06e      	b.n	8003a62 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	2200      	movs	r2, #0
 8003988:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	2221      	movs	r2, #33	@ 0x21
 800398e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003992:	f7fe f877 	bl	8001a84 <HAL_GetTick>
 8003996:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	88fa      	ldrh	r2, [r7, #6]
 800399c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	88fa      	ldrh	r2, [r7, #6]
 80039a2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	689b      	ldr	r3, [r3, #8]
 80039a8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80039ac:	d108      	bne.n	80039c0 <HAL_UART_Transmit+0x6c>
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	691b      	ldr	r3, [r3, #16]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d104      	bne.n	80039c0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80039b6:	2300      	movs	r3, #0
 80039b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80039ba:	68bb      	ldr	r3, [r7, #8]
 80039bc:	61bb      	str	r3, [r7, #24]
 80039be:	e003      	b.n	80039c8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80039c0:	68bb      	ldr	r3, [r7, #8]
 80039c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80039c4:	2300      	movs	r3, #0
 80039c6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80039c8:	e02e      	b.n	8003a28 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	9300      	str	r3, [sp, #0]
 80039ce:	697b      	ldr	r3, [r7, #20]
 80039d0:	2200      	movs	r2, #0
 80039d2:	2180      	movs	r1, #128	@ 0x80
 80039d4:	68f8      	ldr	r0, [r7, #12]
 80039d6:	f000 f848 	bl	8003a6a <UART_WaitOnFlagUntilTimeout>
 80039da:	4603      	mov	r3, r0
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d005      	beq.n	80039ec <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	2220      	movs	r2, #32
 80039e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80039e8:	2303      	movs	r3, #3
 80039ea:	e03a      	b.n	8003a62 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80039ec:	69fb      	ldr	r3, [r7, #28]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d10b      	bne.n	8003a0a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80039f2:	69bb      	ldr	r3, [r7, #24]
 80039f4:	881b      	ldrh	r3, [r3, #0]
 80039f6:	461a      	mov	r2, r3
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003a00:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003a02:	69bb      	ldr	r3, [r7, #24]
 8003a04:	3302      	adds	r3, #2
 8003a06:	61bb      	str	r3, [r7, #24]
 8003a08:	e007      	b.n	8003a1a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003a0a:	69fb      	ldr	r3, [r7, #28]
 8003a0c:	781a      	ldrb	r2, [r3, #0]
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003a14:	69fb      	ldr	r3, [r7, #28]
 8003a16:	3301      	adds	r3, #1
 8003a18:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003a1e:	b29b      	uxth	r3, r3
 8003a20:	3b01      	subs	r3, #1
 8003a22:	b29a      	uxth	r2, r3
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003a2c:	b29b      	uxth	r3, r3
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d1cb      	bne.n	80039ca <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	9300      	str	r3, [sp, #0]
 8003a36:	697b      	ldr	r3, [r7, #20]
 8003a38:	2200      	movs	r2, #0
 8003a3a:	2140      	movs	r1, #64	@ 0x40
 8003a3c:	68f8      	ldr	r0, [r7, #12]
 8003a3e:	f000 f814 	bl	8003a6a <UART_WaitOnFlagUntilTimeout>
 8003a42:	4603      	mov	r3, r0
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d005      	beq.n	8003a54 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	2220      	movs	r2, #32
 8003a4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003a50:	2303      	movs	r3, #3
 8003a52:	e006      	b.n	8003a62 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	2220      	movs	r2, #32
 8003a58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	e000      	b.n	8003a62 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003a60:	2302      	movs	r3, #2
  }
}
 8003a62:	4618      	mov	r0, r3
 8003a64:	3720      	adds	r7, #32
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bd80      	pop	{r7, pc}

08003a6a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003a6a:	b580      	push	{r7, lr}
 8003a6c:	b086      	sub	sp, #24
 8003a6e:	af00      	add	r7, sp, #0
 8003a70:	60f8      	str	r0, [r7, #12]
 8003a72:	60b9      	str	r1, [r7, #8]
 8003a74:	603b      	str	r3, [r7, #0]
 8003a76:	4613      	mov	r3, r2
 8003a78:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a7a:	e03b      	b.n	8003af4 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a7c:	6a3b      	ldr	r3, [r7, #32]
 8003a7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a82:	d037      	beq.n	8003af4 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a84:	f7fd fffe 	bl	8001a84 <HAL_GetTick>
 8003a88:	4602      	mov	r2, r0
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	1ad3      	subs	r3, r2, r3
 8003a8e:	6a3a      	ldr	r2, [r7, #32]
 8003a90:	429a      	cmp	r2, r3
 8003a92:	d302      	bcc.n	8003a9a <UART_WaitOnFlagUntilTimeout+0x30>
 8003a94:	6a3b      	ldr	r3, [r7, #32]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d101      	bne.n	8003a9e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003a9a:	2303      	movs	r3, #3
 8003a9c:	e03a      	b.n	8003b14 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	68db      	ldr	r3, [r3, #12]
 8003aa4:	f003 0304 	and.w	r3, r3, #4
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d023      	beq.n	8003af4 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003aac:	68bb      	ldr	r3, [r7, #8]
 8003aae:	2b80      	cmp	r3, #128	@ 0x80
 8003ab0:	d020      	beq.n	8003af4 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003ab2:	68bb      	ldr	r3, [r7, #8]
 8003ab4:	2b40      	cmp	r3, #64	@ 0x40
 8003ab6:	d01d      	beq.n	8003af4 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f003 0308 	and.w	r3, r3, #8
 8003ac2:	2b08      	cmp	r3, #8
 8003ac4:	d116      	bne.n	8003af4 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	617b      	str	r3, [r7, #20]
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	617b      	str	r3, [r7, #20]
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	617b      	str	r3, [r7, #20]
 8003ada:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003adc:	68f8      	ldr	r0, [r7, #12]
 8003ade:	f000 f81d 	bl	8003b1c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	2208      	movs	r2, #8
 8003ae6:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	2200      	movs	r2, #0
 8003aec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003af0:	2301      	movs	r3, #1
 8003af2:	e00f      	b.n	8003b14 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	681a      	ldr	r2, [r3, #0]
 8003afa:	68bb      	ldr	r3, [r7, #8]
 8003afc:	4013      	ands	r3, r2
 8003afe:	68ba      	ldr	r2, [r7, #8]
 8003b00:	429a      	cmp	r2, r3
 8003b02:	bf0c      	ite	eq
 8003b04:	2301      	moveq	r3, #1
 8003b06:	2300      	movne	r3, #0
 8003b08:	b2db      	uxtb	r3, r3
 8003b0a:	461a      	mov	r2, r3
 8003b0c:	79fb      	ldrb	r3, [r7, #7]
 8003b0e:	429a      	cmp	r2, r3
 8003b10:	d0b4      	beq.n	8003a7c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003b12:	2300      	movs	r3, #0
}
 8003b14:	4618      	mov	r0, r3
 8003b16:	3718      	adds	r7, #24
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	bd80      	pop	{r7, pc}

08003b1c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	b095      	sub	sp, #84	@ 0x54
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	330c      	adds	r3, #12
 8003b2a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b2e:	e853 3f00 	ldrex	r3, [r3]
 8003b32:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003b34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b36:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003b3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	330c      	adds	r3, #12
 8003b42:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003b44:	643a      	str	r2, [r7, #64]	@ 0x40
 8003b46:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b48:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003b4a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003b4c:	e841 2300 	strex	r3, r2, [r1]
 8003b50:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003b52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d1e5      	bne.n	8003b24 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	3314      	adds	r3, #20
 8003b5e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b60:	6a3b      	ldr	r3, [r7, #32]
 8003b62:	e853 3f00 	ldrex	r3, [r3]
 8003b66:	61fb      	str	r3, [r7, #28]
   return(result);
 8003b68:	69fb      	ldr	r3, [r7, #28]
 8003b6a:	f023 0301 	bic.w	r3, r3, #1
 8003b6e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	3314      	adds	r3, #20
 8003b76:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003b78:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003b7a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b7c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003b7e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003b80:	e841 2300 	strex	r3, r2, [r1]
 8003b84:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003b86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d1e5      	bne.n	8003b58 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b90:	2b01      	cmp	r3, #1
 8003b92:	d119      	bne.n	8003bc8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	330c      	adds	r3, #12
 8003b9a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	e853 3f00 	ldrex	r3, [r3]
 8003ba2:	60bb      	str	r3, [r7, #8]
   return(result);
 8003ba4:	68bb      	ldr	r3, [r7, #8]
 8003ba6:	f023 0310 	bic.w	r3, r3, #16
 8003baa:	647b      	str	r3, [r7, #68]	@ 0x44
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	330c      	adds	r3, #12
 8003bb2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003bb4:	61ba      	str	r2, [r7, #24]
 8003bb6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bb8:	6979      	ldr	r1, [r7, #20]
 8003bba:	69ba      	ldr	r2, [r7, #24]
 8003bbc:	e841 2300 	strex	r3, r2, [r1]
 8003bc0:	613b      	str	r3, [r7, #16]
   return(result);
 8003bc2:	693b      	ldr	r3, [r7, #16]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d1e5      	bne.n	8003b94 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2220      	movs	r2, #32
 8003bcc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003bd6:	bf00      	nop
 8003bd8:	3754      	adds	r7, #84	@ 0x54
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be0:	4770      	bx	lr
	...

08003be4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003be4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003be8:	b0c0      	sub	sp, #256	@ 0x100
 8003bea:	af00      	add	r7, sp, #0
 8003bec:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003bf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	691b      	ldr	r3, [r3, #16]
 8003bf8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003bfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c00:	68d9      	ldr	r1, [r3, #12]
 8003c02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c06:	681a      	ldr	r2, [r3, #0]
 8003c08:	ea40 0301 	orr.w	r3, r0, r1
 8003c0c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003c0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c12:	689a      	ldr	r2, [r3, #8]
 8003c14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c18:	691b      	ldr	r3, [r3, #16]
 8003c1a:	431a      	orrs	r2, r3
 8003c1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c20:	695b      	ldr	r3, [r3, #20]
 8003c22:	431a      	orrs	r2, r3
 8003c24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c28:	69db      	ldr	r3, [r3, #28]
 8003c2a:	4313      	orrs	r3, r2
 8003c2c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003c30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	68db      	ldr	r3, [r3, #12]
 8003c38:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003c3c:	f021 010c 	bic.w	r1, r1, #12
 8003c40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c44:	681a      	ldr	r2, [r3, #0]
 8003c46:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003c4a:	430b      	orrs	r3, r1
 8003c4c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003c4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	695b      	ldr	r3, [r3, #20]
 8003c56:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003c5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c5e:	6999      	ldr	r1, [r3, #24]
 8003c60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c64:	681a      	ldr	r2, [r3, #0]
 8003c66:	ea40 0301 	orr.w	r3, r0, r1
 8003c6a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003c6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c70:	681a      	ldr	r2, [r3, #0]
 8003c72:	4b8f      	ldr	r3, [pc, #572]	@ (8003eb0 <UART_SetConfig+0x2cc>)
 8003c74:	429a      	cmp	r2, r3
 8003c76:	d005      	beq.n	8003c84 <UART_SetConfig+0xa0>
 8003c78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c7c:	681a      	ldr	r2, [r3, #0]
 8003c7e:	4b8d      	ldr	r3, [pc, #564]	@ (8003eb4 <UART_SetConfig+0x2d0>)
 8003c80:	429a      	cmp	r2, r3
 8003c82:	d104      	bne.n	8003c8e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003c84:	f7ff fe02 	bl	800388c <HAL_RCC_GetPCLK2Freq>
 8003c88:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003c8c:	e003      	b.n	8003c96 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003c8e:	f7ff fde9 	bl	8003864 <HAL_RCC_GetPCLK1Freq>
 8003c92:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003c96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c9a:	69db      	ldr	r3, [r3, #28]
 8003c9c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003ca0:	f040 810c 	bne.w	8003ebc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003ca4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003ca8:	2200      	movs	r2, #0
 8003caa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003cae:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003cb2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003cb6:	4622      	mov	r2, r4
 8003cb8:	462b      	mov	r3, r5
 8003cba:	1891      	adds	r1, r2, r2
 8003cbc:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003cbe:	415b      	adcs	r3, r3
 8003cc0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003cc2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003cc6:	4621      	mov	r1, r4
 8003cc8:	eb12 0801 	adds.w	r8, r2, r1
 8003ccc:	4629      	mov	r1, r5
 8003cce:	eb43 0901 	adc.w	r9, r3, r1
 8003cd2:	f04f 0200 	mov.w	r2, #0
 8003cd6:	f04f 0300 	mov.w	r3, #0
 8003cda:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003cde:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003ce2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003ce6:	4690      	mov	r8, r2
 8003ce8:	4699      	mov	r9, r3
 8003cea:	4623      	mov	r3, r4
 8003cec:	eb18 0303 	adds.w	r3, r8, r3
 8003cf0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003cf4:	462b      	mov	r3, r5
 8003cf6:	eb49 0303 	adc.w	r3, r9, r3
 8003cfa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003cfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d02:	685b      	ldr	r3, [r3, #4]
 8003d04:	2200      	movs	r2, #0
 8003d06:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003d0a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003d0e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003d12:	460b      	mov	r3, r1
 8003d14:	18db      	adds	r3, r3, r3
 8003d16:	653b      	str	r3, [r7, #80]	@ 0x50
 8003d18:	4613      	mov	r3, r2
 8003d1a:	eb42 0303 	adc.w	r3, r2, r3
 8003d1e:	657b      	str	r3, [r7, #84]	@ 0x54
 8003d20:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003d24:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003d28:	f7fc fe98 	bl	8000a5c <__aeabi_uldivmod>
 8003d2c:	4602      	mov	r2, r0
 8003d2e:	460b      	mov	r3, r1
 8003d30:	4b61      	ldr	r3, [pc, #388]	@ (8003eb8 <UART_SetConfig+0x2d4>)
 8003d32:	fba3 2302 	umull	r2, r3, r3, r2
 8003d36:	095b      	lsrs	r3, r3, #5
 8003d38:	011c      	lsls	r4, r3, #4
 8003d3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003d3e:	2200      	movs	r2, #0
 8003d40:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003d44:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003d48:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003d4c:	4642      	mov	r2, r8
 8003d4e:	464b      	mov	r3, r9
 8003d50:	1891      	adds	r1, r2, r2
 8003d52:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003d54:	415b      	adcs	r3, r3
 8003d56:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003d58:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003d5c:	4641      	mov	r1, r8
 8003d5e:	eb12 0a01 	adds.w	sl, r2, r1
 8003d62:	4649      	mov	r1, r9
 8003d64:	eb43 0b01 	adc.w	fp, r3, r1
 8003d68:	f04f 0200 	mov.w	r2, #0
 8003d6c:	f04f 0300 	mov.w	r3, #0
 8003d70:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003d74:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003d78:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003d7c:	4692      	mov	sl, r2
 8003d7e:	469b      	mov	fp, r3
 8003d80:	4643      	mov	r3, r8
 8003d82:	eb1a 0303 	adds.w	r3, sl, r3
 8003d86:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003d8a:	464b      	mov	r3, r9
 8003d8c:	eb4b 0303 	adc.w	r3, fp, r3
 8003d90:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003d94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003da0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003da4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003da8:	460b      	mov	r3, r1
 8003daa:	18db      	adds	r3, r3, r3
 8003dac:	643b      	str	r3, [r7, #64]	@ 0x40
 8003dae:	4613      	mov	r3, r2
 8003db0:	eb42 0303 	adc.w	r3, r2, r3
 8003db4:	647b      	str	r3, [r7, #68]	@ 0x44
 8003db6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003dba:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003dbe:	f7fc fe4d 	bl	8000a5c <__aeabi_uldivmod>
 8003dc2:	4602      	mov	r2, r0
 8003dc4:	460b      	mov	r3, r1
 8003dc6:	4611      	mov	r1, r2
 8003dc8:	4b3b      	ldr	r3, [pc, #236]	@ (8003eb8 <UART_SetConfig+0x2d4>)
 8003dca:	fba3 2301 	umull	r2, r3, r3, r1
 8003dce:	095b      	lsrs	r3, r3, #5
 8003dd0:	2264      	movs	r2, #100	@ 0x64
 8003dd2:	fb02 f303 	mul.w	r3, r2, r3
 8003dd6:	1acb      	subs	r3, r1, r3
 8003dd8:	00db      	lsls	r3, r3, #3
 8003dda:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003dde:	4b36      	ldr	r3, [pc, #216]	@ (8003eb8 <UART_SetConfig+0x2d4>)
 8003de0:	fba3 2302 	umull	r2, r3, r3, r2
 8003de4:	095b      	lsrs	r3, r3, #5
 8003de6:	005b      	lsls	r3, r3, #1
 8003de8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003dec:	441c      	add	r4, r3
 8003dee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003df2:	2200      	movs	r2, #0
 8003df4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003df8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003dfc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003e00:	4642      	mov	r2, r8
 8003e02:	464b      	mov	r3, r9
 8003e04:	1891      	adds	r1, r2, r2
 8003e06:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003e08:	415b      	adcs	r3, r3
 8003e0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003e0c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003e10:	4641      	mov	r1, r8
 8003e12:	1851      	adds	r1, r2, r1
 8003e14:	6339      	str	r1, [r7, #48]	@ 0x30
 8003e16:	4649      	mov	r1, r9
 8003e18:	414b      	adcs	r3, r1
 8003e1a:	637b      	str	r3, [r7, #52]	@ 0x34
 8003e1c:	f04f 0200 	mov.w	r2, #0
 8003e20:	f04f 0300 	mov.w	r3, #0
 8003e24:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003e28:	4659      	mov	r1, fp
 8003e2a:	00cb      	lsls	r3, r1, #3
 8003e2c:	4651      	mov	r1, sl
 8003e2e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003e32:	4651      	mov	r1, sl
 8003e34:	00ca      	lsls	r2, r1, #3
 8003e36:	4610      	mov	r0, r2
 8003e38:	4619      	mov	r1, r3
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	4642      	mov	r2, r8
 8003e3e:	189b      	adds	r3, r3, r2
 8003e40:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003e44:	464b      	mov	r3, r9
 8003e46:	460a      	mov	r2, r1
 8003e48:	eb42 0303 	adc.w	r3, r2, r3
 8003e4c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003e50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e54:	685b      	ldr	r3, [r3, #4]
 8003e56:	2200      	movs	r2, #0
 8003e58:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003e5c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003e60:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003e64:	460b      	mov	r3, r1
 8003e66:	18db      	adds	r3, r3, r3
 8003e68:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003e6a:	4613      	mov	r3, r2
 8003e6c:	eb42 0303 	adc.w	r3, r2, r3
 8003e70:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003e72:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003e76:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003e7a:	f7fc fdef 	bl	8000a5c <__aeabi_uldivmod>
 8003e7e:	4602      	mov	r2, r0
 8003e80:	460b      	mov	r3, r1
 8003e82:	4b0d      	ldr	r3, [pc, #52]	@ (8003eb8 <UART_SetConfig+0x2d4>)
 8003e84:	fba3 1302 	umull	r1, r3, r3, r2
 8003e88:	095b      	lsrs	r3, r3, #5
 8003e8a:	2164      	movs	r1, #100	@ 0x64
 8003e8c:	fb01 f303 	mul.w	r3, r1, r3
 8003e90:	1ad3      	subs	r3, r2, r3
 8003e92:	00db      	lsls	r3, r3, #3
 8003e94:	3332      	adds	r3, #50	@ 0x32
 8003e96:	4a08      	ldr	r2, [pc, #32]	@ (8003eb8 <UART_SetConfig+0x2d4>)
 8003e98:	fba2 2303 	umull	r2, r3, r2, r3
 8003e9c:	095b      	lsrs	r3, r3, #5
 8003e9e:	f003 0207 	and.w	r2, r3, #7
 8003ea2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4422      	add	r2, r4
 8003eaa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003eac:	e106      	b.n	80040bc <UART_SetConfig+0x4d8>
 8003eae:	bf00      	nop
 8003eb0:	40011000 	.word	0x40011000
 8003eb4:	40011400 	.word	0x40011400
 8003eb8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003ebc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003ec6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003eca:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003ece:	4642      	mov	r2, r8
 8003ed0:	464b      	mov	r3, r9
 8003ed2:	1891      	adds	r1, r2, r2
 8003ed4:	6239      	str	r1, [r7, #32]
 8003ed6:	415b      	adcs	r3, r3
 8003ed8:	627b      	str	r3, [r7, #36]	@ 0x24
 8003eda:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003ede:	4641      	mov	r1, r8
 8003ee0:	1854      	adds	r4, r2, r1
 8003ee2:	4649      	mov	r1, r9
 8003ee4:	eb43 0501 	adc.w	r5, r3, r1
 8003ee8:	f04f 0200 	mov.w	r2, #0
 8003eec:	f04f 0300 	mov.w	r3, #0
 8003ef0:	00eb      	lsls	r3, r5, #3
 8003ef2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003ef6:	00e2      	lsls	r2, r4, #3
 8003ef8:	4614      	mov	r4, r2
 8003efa:	461d      	mov	r5, r3
 8003efc:	4643      	mov	r3, r8
 8003efe:	18e3      	adds	r3, r4, r3
 8003f00:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003f04:	464b      	mov	r3, r9
 8003f06:	eb45 0303 	adc.w	r3, r5, r3
 8003f0a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003f0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	2200      	movs	r2, #0
 8003f16:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003f1a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003f1e:	f04f 0200 	mov.w	r2, #0
 8003f22:	f04f 0300 	mov.w	r3, #0
 8003f26:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003f2a:	4629      	mov	r1, r5
 8003f2c:	008b      	lsls	r3, r1, #2
 8003f2e:	4621      	mov	r1, r4
 8003f30:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003f34:	4621      	mov	r1, r4
 8003f36:	008a      	lsls	r2, r1, #2
 8003f38:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003f3c:	f7fc fd8e 	bl	8000a5c <__aeabi_uldivmod>
 8003f40:	4602      	mov	r2, r0
 8003f42:	460b      	mov	r3, r1
 8003f44:	4b60      	ldr	r3, [pc, #384]	@ (80040c8 <UART_SetConfig+0x4e4>)
 8003f46:	fba3 2302 	umull	r2, r3, r3, r2
 8003f4a:	095b      	lsrs	r3, r3, #5
 8003f4c:	011c      	lsls	r4, r3, #4
 8003f4e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003f52:	2200      	movs	r2, #0
 8003f54:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003f58:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003f5c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003f60:	4642      	mov	r2, r8
 8003f62:	464b      	mov	r3, r9
 8003f64:	1891      	adds	r1, r2, r2
 8003f66:	61b9      	str	r1, [r7, #24]
 8003f68:	415b      	adcs	r3, r3
 8003f6a:	61fb      	str	r3, [r7, #28]
 8003f6c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003f70:	4641      	mov	r1, r8
 8003f72:	1851      	adds	r1, r2, r1
 8003f74:	6139      	str	r1, [r7, #16]
 8003f76:	4649      	mov	r1, r9
 8003f78:	414b      	adcs	r3, r1
 8003f7a:	617b      	str	r3, [r7, #20]
 8003f7c:	f04f 0200 	mov.w	r2, #0
 8003f80:	f04f 0300 	mov.w	r3, #0
 8003f84:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003f88:	4659      	mov	r1, fp
 8003f8a:	00cb      	lsls	r3, r1, #3
 8003f8c:	4651      	mov	r1, sl
 8003f8e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003f92:	4651      	mov	r1, sl
 8003f94:	00ca      	lsls	r2, r1, #3
 8003f96:	4610      	mov	r0, r2
 8003f98:	4619      	mov	r1, r3
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	4642      	mov	r2, r8
 8003f9e:	189b      	adds	r3, r3, r2
 8003fa0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003fa4:	464b      	mov	r3, r9
 8003fa6:	460a      	mov	r2, r1
 8003fa8:	eb42 0303 	adc.w	r3, r2, r3
 8003fac:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003fb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fb4:	685b      	ldr	r3, [r3, #4]
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003fba:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003fbc:	f04f 0200 	mov.w	r2, #0
 8003fc0:	f04f 0300 	mov.w	r3, #0
 8003fc4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003fc8:	4649      	mov	r1, r9
 8003fca:	008b      	lsls	r3, r1, #2
 8003fcc:	4641      	mov	r1, r8
 8003fce:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003fd2:	4641      	mov	r1, r8
 8003fd4:	008a      	lsls	r2, r1, #2
 8003fd6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003fda:	f7fc fd3f 	bl	8000a5c <__aeabi_uldivmod>
 8003fde:	4602      	mov	r2, r0
 8003fe0:	460b      	mov	r3, r1
 8003fe2:	4611      	mov	r1, r2
 8003fe4:	4b38      	ldr	r3, [pc, #224]	@ (80040c8 <UART_SetConfig+0x4e4>)
 8003fe6:	fba3 2301 	umull	r2, r3, r3, r1
 8003fea:	095b      	lsrs	r3, r3, #5
 8003fec:	2264      	movs	r2, #100	@ 0x64
 8003fee:	fb02 f303 	mul.w	r3, r2, r3
 8003ff2:	1acb      	subs	r3, r1, r3
 8003ff4:	011b      	lsls	r3, r3, #4
 8003ff6:	3332      	adds	r3, #50	@ 0x32
 8003ff8:	4a33      	ldr	r2, [pc, #204]	@ (80040c8 <UART_SetConfig+0x4e4>)
 8003ffa:	fba2 2303 	umull	r2, r3, r2, r3
 8003ffe:	095b      	lsrs	r3, r3, #5
 8004000:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004004:	441c      	add	r4, r3
 8004006:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800400a:	2200      	movs	r2, #0
 800400c:	673b      	str	r3, [r7, #112]	@ 0x70
 800400e:	677a      	str	r2, [r7, #116]	@ 0x74
 8004010:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004014:	4642      	mov	r2, r8
 8004016:	464b      	mov	r3, r9
 8004018:	1891      	adds	r1, r2, r2
 800401a:	60b9      	str	r1, [r7, #8]
 800401c:	415b      	adcs	r3, r3
 800401e:	60fb      	str	r3, [r7, #12]
 8004020:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004024:	4641      	mov	r1, r8
 8004026:	1851      	adds	r1, r2, r1
 8004028:	6039      	str	r1, [r7, #0]
 800402a:	4649      	mov	r1, r9
 800402c:	414b      	adcs	r3, r1
 800402e:	607b      	str	r3, [r7, #4]
 8004030:	f04f 0200 	mov.w	r2, #0
 8004034:	f04f 0300 	mov.w	r3, #0
 8004038:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800403c:	4659      	mov	r1, fp
 800403e:	00cb      	lsls	r3, r1, #3
 8004040:	4651      	mov	r1, sl
 8004042:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004046:	4651      	mov	r1, sl
 8004048:	00ca      	lsls	r2, r1, #3
 800404a:	4610      	mov	r0, r2
 800404c:	4619      	mov	r1, r3
 800404e:	4603      	mov	r3, r0
 8004050:	4642      	mov	r2, r8
 8004052:	189b      	adds	r3, r3, r2
 8004054:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004056:	464b      	mov	r3, r9
 8004058:	460a      	mov	r2, r1
 800405a:	eb42 0303 	adc.w	r3, r2, r3
 800405e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004060:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004064:	685b      	ldr	r3, [r3, #4]
 8004066:	2200      	movs	r2, #0
 8004068:	663b      	str	r3, [r7, #96]	@ 0x60
 800406a:	667a      	str	r2, [r7, #100]	@ 0x64
 800406c:	f04f 0200 	mov.w	r2, #0
 8004070:	f04f 0300 	mov.w	r3, #0
 8004074:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004078:	4649      	mov	r1, r9
 800407a:	008b      	lsls	r3, r1, #2
 800407c:	4641      	mov	r1, r8
 800407e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004082:	4641      	mov	r1, r8
 8004084:	008a      	lsls	r2, r1, #2
 8004086:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800408a:	f7fc fce7 	bl	8000a5c <__aeabi_uldivmod>
 800408e:	4602      	mov	r2, r0
 8004090:	460b      	mov	r3, r1
 8004092:	4b0d      	ldr	r3, [pc, #52]	@ (80040c8 <UART_SetConfig+0x4e4>)
 8004094:	fba3 1302 	umull	r1, r3, r3, r2
 8004098:	095b      	lsrs	r3, r3, #5
 800409a:	2164      	movs	r1, #100	@ 0x64
 800409c:	fb01 f303 	mul.w	r3, r1, r3
 80040a0:	1ad3      	subs	r3, r2, r3
 80040a2:	011b      	lsls	r3, r3, #4
 80040a4:	3332      	adds	r3, #50	@ 0x32
 80040a6:	4a08      	ldr	r2, [pc, #32]	@ (80040c8 <UART_SetConfig+0x4e4>)
 80040a8:	fba2 2303 	umull	r2, r3, r2, r3
 80040ac:	095b      	lsrs	r3, r3, #5
 80040ae:	f003 020f 	and.w	r2, r3, #15
 80040b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4422      	add	r2, r4
 80040ba:	609a      	str	r2, [r3, #8]
}
 80040bc:	bf00      	nop
 80040be:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80040c2:	46bd      	mov	sp, r7
 80040c4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80040c8:	51eb851f 	.word	0x51eb851f

080040cc <malloc>:
 80040cc:	4b02      	ldr	r3, [pc, #8]	@ (80040d8 <malloc+0xc>)
 80040ce:	4601      	mov	r1, r0
 80040d0:	6818      	ldr	r0, [r3, #0]
 80040d2:	f000 b82d 	b.w	8004130 <_malloc_r>
 80040d6:	bf00      	nop
 80040d8:	20000018 	.word	0x20000018

080040dc <free>:
 80040dc:	4b02      	ldr	r3, [pc, #8]	@ (80040e8 <free+0xc>)
 80040de:	4601      	mov	r1, r0
 80040e0:	6818      	ldr	r0, [r3, #0]
 80040e2:	f000 ba63 	b.w	80045ac <_free_r>
 80040e6:	bf00      	nop
 80040e8:	20000018 	.word	0x20000018

080040ec <sbrk_aligned>:
 80040ec:	b570      	push	{r4, r5, r6, lr}
 80040ee:	4e0f      	ldr	r6, [pc, #60]	@ (800412c <sbrk_aligned+0x40>)
 80040f0:	460c      	mov	r4, r1
 80040f2:	6831      	ldr	r1, [r6, #0]
 80040f4:	4605      	mov	r5, r0
 80040f6:	b911      	cbnz	r1, 80040fe <sbrk_aligned+0x12>
 80040f8:	f000 f9fa 	bl	80044f0 <_sbrk_r>
 80040fc:	6030      	str	r0, [r6, #0]
 80040fe:	4621      	mov	r1, r4
 8004100:	4628      	mov	r0, r5
 8004102:	f000 f9f5 	bl	80044f0 <_sbrk_r>
 8004106:	1c43      	adds	r3, r0, #1
 8004108:	d103      	bne.n	8004112 <sbrk_aligned+0x26>
 800410a:	f04f 34ff 	mov.w	r4, #4294967295
 800410e:	4620      	mov	r0, r4
 8004110:	bd70      	pop	{r4, r5, r6, pc}
 8004112:	1cc4      	adds	r4, r0, #3
 8004114:	f024 0403 	bic.w	r4, r4, #3
 8004118:	42a0      	cmp	r0, r4
 800411a:	d0f8      	beq.n	800410e <sbrk_aligned+0x22>
 800411c:	1a21      	subs	r1, r4, r0
 800411e:	4628      	mov	r0, r5
 8004120:	f000 f9e6 	bl	80044f0 <_sbrk_r>
 8004124:	3001      	adds	r0, #1
 8004126:	d1f2      	bne.n	800410e <sbrk_aligned+0x22>
 8004128:	e7ef      	b.n	800410a <sbrk_aligned+0x1e>
 800412a:	bf00      	nop
 800412c:	20000230 	.word	0x20000230

08004130 <_malloc_r>:
 8004130:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004134:	1ccd      	adds	r5, r1, #3
 8004136:	f025 0503 	bic.w	r5, r5, #3
 800413a:	3508      	adds	r5, #8
 800413c:	2d0c      	cmp	r5, #12
 800413e:	bf38      	it	cc
 8004140:	250c      	movcc	r5, #12
 8004142:	2d00      	cmp	r5, #0
 8004144:	4606      	mov	r6, r0
 8004146:	db01      	blt.n	800414c <_malloc_r+0x1c>
 8004148:	42a9      	cmp	r1, r5
 800414a:	d904      	bls.n	8004156 <_malloc_r+0x26>
 800414c:	230c      	movs	r3, #12
 800414e:	6033      	str	r3, [r6, #0]
 8004150:	2000      	movs	r0, #0
 8004152:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004156:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800422c <_malloc_r+0xfc>
 800415a:	f000 f869 	bl	8004230 <__malloc_lock>
 800415e:	f8d8 3000 	ldr.w	r3, [r8]
 8004162:	461c      	mov	r4, r3
 8004164:	bb44      	cbnz	r4, 80041b8 <_malloc_r+0x88>
 8004166:	4629      	mov	r1, r5
 8004168:	4630      	mov	r0, r6
 800416a:	f7ff ffbf 	bl	80040ec <sbrk_aligned>
 800416e:	1c43      	adds	r3, r0, #1
 8004170:	4604      	mov	r4, r0
 8004172:	d158      	bne.n	8004226 <_malloc_r+0xf6>
 8004174:	f8d8 4000 	ldr.w	r4, [r8]
 8004178:	4627      	mov	r7, r4
 800417a:	2f00      	cmp	r7, #0
 800417c:	d143      	bne.n	8004206 <_malloc_r+0xd6>
 800417e:	2c00      	cmp	r4, #0
 8004180:	d04b      	beq.n	800421a <_malloc_r+0xea>
 8004182:	6823      	ldr	r3, [r4, #0]
 8004184:	4639      	mov	r1, r7
 8004186:	4630      	mov	r0, r6
 8004188:	eb04 0903 	add.w	r9, r4, r3
 800418c:	f000 f9b0 	bl	80044f0 <_sbrk_r>
 8004190:	4581      	cmp	r9, r0
 8004192:	d142      	bne.n	800421a <_malloc_r+0xea>
 8004194:	6821      	ldr	r1, [r4, #0]
 8004196:	1a6d      	subs	r5, r5, r1
 8004198:	4629      	mov	r1, r5
 800419a:	4630      	mov	r0, r6
 800419c:	f7ff ffa6 	bl	80040ec <sbrk_aligned>
 80041a0:	3001      	adds	r0, #1
 80041a2:	d03a      	beq.n	800421a <_malloc_r+0xea>
 80041a4:	6823      	ldr	r3, [r4, #0]
 80041a6:	442b      	add	r3, r5
 80041a8:	6023      	str	r3, [r4, #0]
 80041aa:	f8d8 3000 	ldr.w	r3, [r8]
 80041ae:	685a      	ldr	r2, [r3, #4]
 80041b0:	bb62      	cbnz	r2, 800420c <_malloc_r+0xdc>
 80041b2:	f8c8 7000 	str.w	r7, [r8]
 80041b6:	e00f      	b.n	80041d8 <_malloc_r+0xa8>
 80041b8:	6822      	ldr	r2, [r4, #0]
 80041ba:	1b52      	subs	r2, r2, r5
 80041bc:	d420      	bmi.n	8004200 <_malloc_r+0xd0>
 80041be:	2a0b      	cmp	r2, #11
 80041c0:	d917      	bls.n	80041f2 <_malloc_r+0xc2>
 80041c2:	1961      	adds	r1, r4, r5
 80041c4:	42a3      	cmp	r3, r4
 80041c6:	6025      	str	r5, [r4, #0]
 80041c8:	bf18      	it	ne
 80041ca:	6059      	strne	r1, [r3, #4]
 80041cc:	6863      	ldr	r3, [r4, #4]
 80041ce:	bf08      	it	eq
 80041d0:	f8c8 1000 	streq.w	r1, [r8]
 80041d4:	5162      	str	r2, [r4, r5]
 80041d6:	604b      	str	r3, [r1, #4]
 80041d8:	4630      	mov	r0, r6
 80041da:	f000 f82f 	bl	800423c <__malloc_unlock>
 80041de:	f104 000b 	add.w	r0, r4, #11
 80041e2:	1d23      	adds	r3, r4, #4
 80041e4:	f020 0007 	bic.w	r0, r0, #7
 80041e8:	1ac2      	subs	r2, r0, r3
 80041ea:	bf1c      	itt	ne
 80041ec:	1a1b      	subne	r3, r3, r0
 80041ee:	50a3      	strne	r3, [r4, r2]
 80041f0:	e7af      	b.n	8004152 <_malloc_r+0x22>
 80041f2:	6862      	ldr	r2, [r4, #4]
 80041f4:	42a3      	cmp	r3, r4
 80041f6:	bf0c      	ite	eq
 80041f8:	f8c8 2000 	streq.w	r2, [r8]
 80041fc:	605a      	strne	r2, [r3, #4]
 80041fe:	e7eb      	b.n	80041d8 <_malloc_r+0xa8>
 8004200:	4623      	mov	r3, r4
 8004202:	6864      	ldr	r4, [r4, #4]
 8004204:	e7ae      	b.n	8004164 <_malloc_r+0x34>
 8004206:	463c      	mov	r4, r7
 8004208:	687f      	ldr	r7, [r7, #4]
 800420a:	e7b6      	b.n	800417a <_malloc_r+0x4a>
 800420c:	461a      	mov	r2, r3
 800420e:	685b      	ldr	r3, [r3, #4]
 8004210:	42a3      	cmp	r3, r4
 8004212:	d1fb      	bne.n	800420c <_malloc_r+0xdc>
 8004214:	2300      	movs	r3, #0
 8004216:	6053      	str	r3, [r2, #4]
 8004218:	e7de      	b.n	80041d8 <_malloc_r+0xa8>
 800421a:	230c      	movs	r3, #12
 800421c:	6033      	str	r3, [r6, #0]
 800421e:	4630      	mov	r0, r6
 8004220:	f000 f80c 	bl	800423c <__malloc_unlock>
 8004224:	e794      	b.n	8004150 <_malloc_r+0x20>
 8004226:	6005      	str	r5, [r0, #0]
 8004228:	e7d6      	b.n	80041d8 <_malloc_r+0xa8>
 800422a:	bf00      	nop
 800422c:	20000234 	.word	0x20000234

08004230 <__malloc_lock>:
 8004230:	4801      	ldr	r0, [pc, #4]	@ (8004238 <__malloc_lock+0x8>)
 8004232:	f000 b9aa 	b.w	800458a <__retarget_lock_acquire_recursive>
 8004236:	bf00      	nop
 8004238:	20000378 	.word	0x20000378

0800423c <__malloc_unlock>:
 800423c:	4801      	ldr	r0, [pc, #4]	@ (8004244 <__malloc_unlock+0x8>)
 800423e:	f000 b9a5 	b.w	800458c <__retarget_lock_release_recursive>
 8004242:	bf00      	nop
 8004244:	20000378 	.word	0x20000378

08004248 <std>:
 8004248:	2300      	movs	r3, #0
 800424a:	b510      	push	{r4, lr}
 800424c:	4604      	mov	r4, r0
 800424e:	e9c0 3300 	strd	r3, r3, [r0]
 8004252:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004256:	6083      	str	r3, [r0, #8]
 8004258:	8181      	strh	r1, [r0, #12]
 800425a:	6643      	str	r3, [r0, #100]	@ 0x64
 800425c:	81c2      	strh	r2, [r0, #14]
 800425e:	6183      	str	r3, [r0, #24]
 8004260:	4619      	mov	r1, r3
 8004262:	2208      	movs	r2, #8
 8004264:	305c      	adds	r0, #92	@ 0x5c
 8004266:	f000 f906 	bl	8004476 <memset>
 800426a:	4b0d      	ldr	r3, [pc, #52]	@ (80042a0 <std+0x58>)
 800426c:	6263      	str	r3, [r4, #36]	@ 0x24
 800426e:	4b0d      	ldr	r3, [pc, #52]	@ (80042a4 <std+0x5c>)
 8004270:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004272:	4b0d      	ldr	r3, [pc, #52]	@ (80042a8 <std+0x60>)
 8004274:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004276:	4b0d      	ldr	r3, [pc, #52]	@ (80042ac <std+0x64>)
 8004278:	6323      	str	r3, [r4, #48]	@ 0x30
 800427a:	4b0d      	ldr	r3, [pc, #52]	@ (80042b0 <std+0x68>)
 800427c:	6224      	str	r4, [r4, #32]
 800427e:	429c      	cmp	r4, r3
 8004280:	d006      	beq.n	8004290 <std+0x48>
 8004282:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004286:	4294      	cmp	r4, r2
 8004288:	d002      	beq.n	8004290 <std+0x48>
 800428a:	33d0      	adds	r3, #208	@ 0xd0
 800428c:	429c      	cmp	r4, r3
 800428e:	d105      	bne.n	800429c <std+0x54>
 8004290:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004294:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004298:	f000 b976 	b.w	8004588 <__retarget_lock_init_recursive>
 800429c:	bd10      	pop	{r4, pc}
 800429e:	bf00      	nop
 80042a0:	080043f1 	.word	0x080043f1
 80042a4:	08004413 	.word	0x08004413
 80042a8:	0800444b 	.word	0x0800444b
 80042ac:	0800446f 	.word	0x0800446f
 80042b0:	20000238 	.word	0x20000238

080042b4 <stdio_exit_handler>:
 80042b4:	4a02      	ldr	r2, [pc, #8]	@ (80042c0 <stdio_exit_handler+0xc>)
 80042b6:	4903      	ldr	r1, [pc, #12]	@ (80042c4 <stdio_exit_handler+0x10>)
 80042b8:	4803      	ldr	r0, [pc, #12]	@ (80042c8 <stdio_exit_handler+0x14>)
 80042ba:	f000 b869 	b.w	8004390 <_fwalk_sglue>
 80042be:	bf00      	nop
 80042c0:	2000000c 	.word	0x2000000c
 80042c4:	08004ce9 	.word	0x08004ce9
 80042c8:	2000001c 	.word	0x2000001c

080042cc <cleanup_stdio>:
 80042cc:	6841      	ldr	r1, [r0, #4]
 80042ce:	4b0c      	ldr	r3, [pc, #48]	@ (8004300 <cleanup_stdio+0x34>)
 80042d0:	4299      	cmp	r1, r3
 80042d2:	b510      	push	{r4, lr}
 80042d4:	4604      	mov	r4, r0
 80042d6:	d001      	beq.n	80042dc <cleanup_stdio+0x10>
 80042d8:	f000 fd06 	bl	8004ce8 <_fflush_r>
 80042dc:	68a1      	ldr	r1, [r4, #8]
 80042de:	4b09      	ldr	r3, [pc, #36]	@ (8004304 <cleanup_stdio+0x38>)
 80042e0:	4299      	cmp	r1, r3
 80042e2:	d002      	beq.n	80042ea <cleanup_stdio+0x1e>
 80042e4:	4620      	mov	r0, r4
 80042e6:	f000 fcff 	bl	8004ce8 <_fflush_r>
 80042ea:	68e1      	ldr	r1, [r4, #12]
 80042ec:	4b06      	ldr	r3, [pc, #24]	@ (8004308 <cleanup_stdio+0x3c>)
 80042ee:	4299      	cmp	r1, r3
 80042f0:	d004      	beq.n	80042fc <cleanup_stdio+0x30>
 80042f2:	4620      	mov	r0, r4
 80042f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80042f8:	f000 bcf6 	b.w	8004ce8 <_fflush_r>
 80042fc:	bd10      	pop	{r4, pc}
 80042fe:	bf00      	nop
 8004300:	20000238 	.word	0x20000238
 8004304:	200002a0 	.word	0x200002a0
 8004308:	20000308 	.word	0x20000308

0800430c <global_stdio_init.part.0>:
 800430c:	b510      	push	{r4, lr}
 800430e:	4b0b      	ldr	r3, [pc, #44]	@ (800433c <global_stdio_init.part.0+0x30>)
 8004310:	4c0b      	ldr	r4, [pc, #44]	@ (8004340 <global_stdio_init.part.0+0x34>)
 8004312:	4a0c      	ldr	r2, [pc, #48]	@ (8004344 <global_stdio_init.part.0+0x38>)
 8004314:	601a      	str	r2, [r3, #0]
 8004316:	4620      	mov	r0, r4
 8004318:	2200      	movs	r2, #0
 800431a:	2104      	movs	r1, #4
 800431c:	f7ff ff94 	bl	8004248 <std>
 8004320:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004324:	2201      	movs	r2, #1
 8004326:	2109      	movs	r1, #9
 8004328:	f7ff ff8e 	bl	8004248 <std>
 800432c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004330:	2202      	movs	r2, #2
 8004332:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004336:	2112      	movs	r1, #18
 8004338:	f7ff bf86 	b.w	8004248 <std>
 800433c:	20000370 	.word	0x20000370
 8004340:	20000238 	.word	0x20000238
 8004344:	080042b5 	.word	0x080042b5

08004348 <__sfp_lock_acquire>:
 8004348:	4801      	ldr	r0, [pc, #4]	@ (8004350 <__sfp_lock_acquire+0x8>)
 800434a:	f000 b91e 	b.w	800458a <__retarget_lock_acquire_recursive>
 800434e:	bf00      	nop
 8004350:	20000379 	.word	0x20000379

08004354 <__sfp_lock_release>:
 8004354:	4801      	ldr	r0, [pc, #4]	@ (800435c <__sfp_lock_release+0x8>)
 8004356:	f000 b919 	b.w	800458c <__retarget_lock_release_recursive>
 800435a:	bf00      	nop
 800435c:	20000379 	.word	0x20000379

08004360 <__sinit>:
 8004360:	b510      	push	{r4, lr}
 8004362:	4604      	mov	r4, r0
 8004364:	f7ff fff0 	bl	8004348 <__sfp_lock_acquire>
 8004368:	6a23      	ldr	r3, [r4, #32]
 800436a:	b11b      	cbz	r3, 8004374 <__sinit+0x14>
 800436c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004370:	f7ff bff0 	b.w	8004354 <__sfp_lock_release>
 8004374:	4b04      	ldr	r3, [pc, #16]	@ (8004388 <__sinit+0x28>)
 8004376:	6223      	str	r3, [r4, #32]
 8004378:	4b04      	ldr	r3, [pc, #16]	@ (800438c <__sinit+0x2c>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d1f5      	bne.n	800436c <__sinit+0xc>
 8004380:	f7ff ffc4 	bl	800430c <global_stdio_init.part.0>
 8004384:	e7f2      	b.n	800436c <__sinit+0xc>
 8004386:	bf00      	nop
 8004388:	080042cd 	.word	0x080042cd
 800438c:	20000370 	.word	0x20000370

08004390 <_fwalk_sglue>:
 8004390:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004394:	4607      	mov	r7, r0
 8004396:	4688      	mov	r8, r1
 8004398:	4614      	mov	r4, r2
 800439a:	2600      	movs	r6, #0
 800439c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80043a0:	f1b9 0901 	subs.w	r9, r9, #1
 80043a4:	d505      	bpl.n	80043b2 <_fwalk_sglue+0x22>
 80043a6:	6824      	ldr	r4, [r4, #0]
 80043a8:	2c00      	cmp	r4, #0
 80043aa:	d1f7      	bne.n	800439c <_fwalk_sglue+0xc>
 80043ac:	4630      	mov	r0, r6
 80043ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80043b2:	89ab      	ldrh	r3, [r5, #12]
 80043b4:	2b01      	cmp	r3, #1
 80043b6:	d907      	bls.n	80043c8 <_fwalk_sglue+0x38>
 80043b8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80043bc:	3301      	adds	r3, #1
 80043be:	d003      	beq.n	80043c8 <_fwalk_sglue+0x38>
 80043c0:	4629      	mov	r1, r5
 80043c2:	4638      	mov	r0, r7
 80043c4:	47c0      	blx	r8
 80043c6:	4306      	orrs	r6, r0
 80043c8:	3568      	adds	r5, #104	@ 0x68
 80043ca:	e7e9      	b.n	80043a0 <_fwalk_sglue+0x10>

080043cc <iprintf>:
 80043cc:	b40f      	push	{r0, r1, r2, r3}
 80043ce:	b507      	push	{r0, r1, r2, lr}
 80043d0:	4906      	ldr	r1, [pc, #24]	@ (80043ec <iprintf+0x20>)
 80043d2:	ab04      	add	r3, sp, #16
 80043d4:	6808      	ldr	r0, [r1, #0]
 80043d6:	f853 2b04 	ldr.w	r2, [r3], #4
 80043da:	6881      	ldr	r1, [r0, #8]
 80043dc:	9301      	str	r3, [sp, #4]
 80043de:	f000 f959 	bl	8004694 <_vfiprintf_r>
 80043e2:	b003      	add	sp, #12
 80043e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80043e8:	b004      	add	sp, #16
 80043ea:	4770      	bx	lr
 80043ec:	20000018 	.word	0x20000018

080043f0 <__sread>:
 80043f0:	b510      	push	{r4, lr}
 80043f2:	460c      	mov	r4, r1
 80043f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80043f8:	f000 f868 	bl	80044cc <_read_r>
 80043fc:	2800      	cmp	r0, #0
 80043fe:	bfab      	itete	ge
 8004400:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004402:	89a3      	ldrhlt	r3, [r4, #12]
 8004404:	181b      	addge	r3, r3, r0
 8004406:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800440a:	bfac      	ite	ge
 800440c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800440e:	81a3      	strhlt	r3, [r4, #12]
 8004410:	bd10      	pop	{r4, pc}

08004412 <__swrite>:
 8004412:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004416:	461f      	mov	r7, r3
 8004418:	898b      	ldrh	r3, [r1, #12]
 800441a:	05db      	lsls	r3, r3, #23
 800441c:	4605      	mov	r5, r0
 800441e:	460c      	mov	r4, r1
 8004420:	4616      	mov	r6, r2
 8004422:	d505      	bpl.n	8004430 <__swrite+0x1e>
 8004424:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004428:	2302      	movs	r3, #2
 800442a:	2200      	movs	r2, #0
 800442c:	f000 f83c 	bl	80044a8 <_lseek_r>
 8004430:	89a3      	ldrh	r3, [r4, #12]
 8004432:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004436:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800443a:	81a3      	strh	r3, [r4, #12]
 800443c:	4632      	mov	r2, r6
 800443e:	463b      	mov	r3, r7
 8004440:	4628      	mov	r0, r5
 8004442:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004446:	f000 b863 	b.w	8004510 <_write_r>

0800444a <__sseek>:
 800444a:	b510      	push	{r4, lr}
 800444c:	460c      	mov	r4, r1
 800444e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004452:	f000 f829 	bl	80044a8 <_lseek_r>
 8004456:	1c43      	adds	r3, r0, #1
 8004458:	89a3      	ldrh	r3, [r4, #12]
 800445a:	bf15      	itete	ne
 800445c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800445e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004462:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004466:	81a3      	strheq	r3, [r4, #12]
 8004468:	bf18      	it	ne
 800446a:	81a3      	strhne	r3, [r4, #12]
 800446c:	bd10      	pop	{r4, pc}

0800446e <__sclose>:
 800446e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004472:	f000 b809 	b.w	8004488 <_close_r>

08004476 <memset>:
 8004476:	4402      	add	r2, r0
 8004478:	4603      	mov	r3, r0
 800447a:	4293      	cmp	r3, r2
 800447c:	d100      	bne.n	8004480 <memset+0xa>
 800447e:	4770      	bx	lr
 8004480:	f803 1b01 	strb.w	r1, [r3], #1
 8004484:	e7f9      	b.n	800447a <memset+0x4>
	...

08004488 <_close_r>:
 8004488:	b538      	push	{r3, r4, r5, lr}
 800448a:	4d06      	ldr	r5, [pc, #24]	@ (80044a4 <_close_r+0x1c>)
 800448c:	2300      	movs	r3, #0
 800448e:	4604      	mov	r4, r0
 8004490:	4608      	mov	r0, r1
 8004492:	602b      	str	r3, [r5, #0]
 8004494:	f7fc ff0b 	bl	80012ae <_close>
 8004498:	1c43      	adds	r3, r0, #1
 800449a:	d102      	bne.n	80044a2 <_close_r+0x1a>
 800449c:	682b      	ldr	r3, [r5, #0]
 800449e:	b103      	cbz	r3, 80044a2 <_close_r+0x1a>
 80044a0:	6023      	str	r3, [r4, #0]
 80044a2:	bd38      	pop	{r3, r4, r5, pc}
 80044a4:	20000374 	.word	0x20000374

080044a8 <_lseek_r>:
 80044a8:	b538      	push	{r3, r4, r5, lr}
 80044aa:	4d07      	ldr	r5, [pc, #28]	@ (80044c8 <_lseek_r+0x20>)
 80044ac:	4604      	mov	r4, r0
 80044ae:	4608      	mov	r0, r1
 80044b0:	4611      	mov	r1, r2
 80044b2:	2200      	movs	r2, #0
 80044b4:	602a      	str	r2, [r5, #0]
 80044b6:	461a      	mov	r2, r3
 80044b8:	f7fc ff20 	bl	80012fc <_lseek>
 80044bc:	1c43      	adds	r3, r0, #1
 80044be:	d102      	bne.n	80044c6 <_lseek_r+0x1e>
 80044c0:	682b      	ldr	r3, [r5, #0]
 80044c2:	b103      	cbz	r3, 80044c6 <_lseek_r+0x1e>
 80044c4:	6023      	str	r3, [r4, #0]
 80044c6:	bd38      	pop	{r3, r4, r5, pc}
 80044c8:	20000374 	.word	0x20000374

080044cc <_read_r>:
 80044cc:	b538      	push	{r3, r4, r5, lr}
 80044ce:	4d07      	ldr	r5, [pc, #28]	@ (80044ec <_read_r+0x20>)
 80044d0:	4604      	mov	r4, r0
 80044d2:	4608      	mov	r0, r1
 80044d4:	4611      	mov	r1, r2
 80044d6:	2200      	movs	r2, #0
 80044d8:	602a      	str	r2, [r5, #0]
 80044da:	461a      	mov	r2, r3
 80044dc:	f7fc feae 	bl	800123c <_read>
 80044e0:	1c43      	adds	r3, r0, #1
 80044e2:	d102      	bne.n	80044ea <_read_r+0x1e>
 80044e4:	682b      	ldr	r3, [r5, #0]
 80044e6:	b103      	cbz	r3, 80044ea <_read_r+0x1e>
 80044e8:	6023      	str	r3, [r4, #0]
 80044ea:	bd38      	pop	{r3, r4, r5, pc}
 80044ec:	20000374 	.word	0x20000374

080044f0 <_sbrk_r>:
 80044f0:	b538      	push	{r3, r4, r5, lr}
 80044f2:	4d06      	ldr	r5, [pc, #24]	@ (800450c <_sbrk_r+0x1c>)
 80044f4:	2300      	movs	r3, #0
 80044f6:	4604      	mov	r4, r0
 80044f8:	4608      	mov	r0, r1
 80044fa:	602b      	str	r3, [r5, #0]
 80044fc:	f7fc ff0c 	bl	8001318 <_sbrk>
 8004500:	1c43      	adds	r3, r0, #1
 8004502:	d102      	bne.n	800450a <_sbrk_r+0x1a>
 8004504:	682b      	ldr	r3, [r5, #0]
 8004506:	b103      	cbz	r3, 800450a <_sbrk_r+0x1a>
 8004508:	6023      	str	r3, [r4, #0]
 800450a:	bd38      	pop	{r3, r4, r5, pc}
 800450c:	20000374 	.word	0x20000374

08004510 <_write_r>:
 8004510:	b538      	push	{r3, r4, r5, lr}
 8004512:	4d07      	ldr	r5, [pc, #28]	@ (8004530 <_write_r+0x20>)
 8004514:	4604      	mov	r4, r0
 8004516:	4608      	mov	r0, r1
 8004518:	4611      	mov	r1, r2
 800451a:	2200      	movs	r2, #0
 800451c:	602a      	str	r2, [r5, #0]
 800451e:	461a      	mov	r2, r3
 8004520:	f7fc fea9 	bl	8001276 <_write>
 8004524:	1c43      	adds	r3, r0, #1
 8004526:	d102      	bne.n	800452e <_write_r+0x1e>
 8004528:	682b      	ldr	r3, [r5, #0]
 800452a:	b103      	cbz	r3, 800452e <_write_r+0x1e>
 800452c:	6023      	str	r3, [r4, #0]
 800452e:	bd38      	pop	{r3, r4, r5, pc}
 8004530:	20000374 	.word	0x20000374

08004534 <__errno>:
 8004534:	4b01      	ldr	r3, [pc, #4]	@ (800453c <__errno+0x8>)
 8004536:	6818      	ldr	r0, [r3, #0]
 8004538:	4770      	bx	lr
 800453a:	bf00      	nop
 800453c:	20000018 	.word	0x20000018

08004540 <__libc_init_array>:
 8004540:	b570      	push	{r4, r5, r6, lr}
 8004542:	4d0d      	ldr	r5, [pc, #52]	@ (8004578 <__libc_init_array+0x38>)
 8004544:	4c0d      	ldr	r4, [pc, #52]	@ (800457c <__libc_init_array+0x3c>)
 8004546:	1b64      	subs	r4, r4, r5
 8004548:	10a4      	asrs	r4, r4, #2
 800454a:	2600      	movs	r6, #0
 800454c:	42a6      	cmp	r6, r4
 800454e:	d109      	bne.n	8004564 <__libc_init_array+0x24>
 8004550:	4d0b      	ldr	r5, [pc, #44]	@ (8004580 <__libc_init_array+0x40>)
 8004552:	4c0c      	ldr	r4, [pc, #48]	@ (8004584 <__libc_init_array+0x44>)
 8004554:	f000 fd08 	bl	8004f68 <_init>
 8004558:	1b64      	subs	r4, r4, r5
 800455a:	10a4      	asrs	r4, r4, #2
 800455c:	2600      	movs	r6, #0
 800455e:	42a6      	cmp	r6, r4
 8004560:	d105      	bne.n	800456e <__libc_init_array+0x2e>
 8004562:	bd70      	pop	{r4, r5, r6, pc}
 8004564:	f855 3b04 	ldr.w	r3, [r5], #4
 8004568:	4798      	blx	r3
 800456a:	3601      	adds	r6, #1
 800456c:	e7ee      	b.n	800454c <__libc_init_array+0xc>
 800456e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004572:	4798      	blx	r3
 8004574:	3601      	adds	r6, #1
 8004576:	e7f2      	b.n	800455e <__libc_init_array+0x1e>
 8004578:	08004fe0 	.word	0x08004fe0
 800457c:	08004fe0 	.word	0x08004fe0
 8004580:	08004fe0 	.word	0x08004fe0
 8004584:	08004fe4 	.word	0x08004fe4

08004588 <__retarget_lock_init_recursive>:
 8004588:	4770      	bx	lr

0800458a <__retarget_lock_acquire_recursive>:
 800458a:	4770      	bx	lr

0800458c <__retarget_lock_release_recursive>:
 800458c:	4770      	bx	lr

0800458e <memcpy>:
 800458e:	440a      	add	r2, r1
 8004590:	4291      	cmp	r1, r2
 8004592:	f100 33ff 	add.w	r3, r0, #4294967295
 8004596:	d100      	bne.n	800459a <memcpy+0xc>
 8004598:	4770      	bx	lr
 800459a:	b510      	push	{r4, lr}
 800459c:	f811 4b01 	ldrb.w	r4, [r1], #1
 80045a0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80045a4:	4291      	cmp	r1, r2
 80045a6:	d1f9      	bne.n	800459c <memcpy+0xe>
 80045a8:	bd10      	pop	{r4, pc}
	...

080045ac <_free_r>:
 80045ac:	b538      	push	{r3, r4, r5, lr}
 80045ae:	4605      	mov	r5, r0
 80045b0:	2900      	cmp	r1, #0
 80045b2:	d041      	beq.n	8004638 <_free_r+0x8c>
 80045b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80045b8:	1f0c      	subs	r4, r1, #4
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	bfb8      	it	lt
 80045be:	18e4      	addlt	r4, r4, r3
 80045c0:	f7ff fe36 	bl	8004230 <__malloc_lock>
 80045c4:	4a1d      	ldr	r2, [pc, #116]	@ (800463c <_free_r+0x90>)
 80045c6:	6813      	ldr	r3, [r2, #0]
 80045c8:	b933      	cbnz	r3, 80045d8 <_free_r+0x2c>
 80045ca:	6063      	str	r3, [r4, #4]
 80045cc:	6014      	str	r4, [r2, #0]
 80045ce:	4628      	mov	r0, r5
 80045d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80045d4:	f7ff be32 	b.w	800423c <__malloc_unlock>
 80045d8:	42a3      	cmp	r3, r4
 80045da:	d908      	bls.n	80045ee <_free_r+0x42>
 80045dc:	6820      	ldr	r0, [r4, #0]
 80045de:	1821      	adds	r1, r4, r0
 80045e0:	428b      	cmp	r3, r1
 80045e2:	bf01      	itttt	eq
 80045e4:	6819      	ldreq	r1, [r3, #0]
 80045e6:	685b      	ldreq	r3, [r3, #4]
 80045e8:	1809      	addeq	r1, r1, r0
 80045ea:	6021      	streq	r1, [r4, #0]
 80045ec:	e7ed      	b.n	80045ca <_free_r+0x1e>
 80045ee:	461a      	mov	r2, r3
 80045f0:	685b      	ldr	r3, [r3, #4]
 80045f2:	b10b      	cbz	r3, 80045f8 <_free_r+0x4c>
 80045f4:	42a3      	cmp	r3, r4
 80045f6:	d9fa      	bls.n	80045ee <_free_r+0x42>
 80045f8:	6811      	ldr	r1, [r2, #0]
 80045fa:	1850      	adds	r0, r2, r1
 80045fc:	42a0      	cmp	r0, r4
 80045fe:	d10b      	bne.n	8004618 <_free_r+0x6c>
 8004600:	6820      	ldr	r0, [r4, #0]
 8004602:	4401      	add	r1, r0
 8004604:	1850      	adds	r0, r2, r1
 8004606:	4283      	cmp	r3, r0
 8004608:	6011      	str	r1, [r2, #0]
 800460a:	d1e0      	bne.n	80045ce <_free_r+0x22>
 800460c:	6818      	ldr	r0, [r3, #0]
 800460e:	685b      	ldr	r3, [r3, #4]
 8004610:	6053      	str	r3, [r2, #4]
 8004612:	4408      	add	r0, r1
 8004614:	6010      	str	r0, [r2, #0]
 8004616:	e7da      	b.n	80045ce <_free_r+0x22>
 8004618:	d902      	bls.n	8004620 <_free_r+0x74>
 800461a:	230c      	movs	r3, #12
 800461c:	602b      	str	r3, [r5, #0]
 800461e:	e7d6      	b.n	80045ce <_free_r+0x22>
 8004620:	6820      	ldr	r0, [r4, #0]
 8004622:	1821      	adds	r1, r4, r0
 8004624:	428b      	cmp	r3, r1
 8004626:	bf04      	itt	eq
 8004628:	6819      	ldreq	r1, [r3, #0]
 800462a:	685b      	ldreq	r3, [r3, #4]
 800462c:	6063      	str	r3, [r4, #4]
 800462e:	bf04      	itt	eq
 8004630:	1809      	addeq	r1, r1, r0
 8004632:	6021      	streq	r1, [r4, #0]
 8004634:	6054      	str	r4, [r2, #4]
 8004636:	e7ca      	b.n	80045ce <_free_r+0x22>
 8004638:	bd38      	pop	{r3, r4, r5, pc}
 800463a:	bf00      	nop
 800463c:	20000234 	.word	0x20000234

08004640 <__sfputc_r>:
 8004640:	6893      	ldr	r3, [r2, #8]
 8004642:	3b01      	subs	r3, #1
 8004644:	2b00      	cmp	r3, #0
 8004646:	b410      	push	{r4}
 8004648:	6093      	str	r3, [r2, #8]
 800464a:	da08      	bge.n	800465e <__sfputc_r+0x1e>
 800464c:	6994      	ldr	r4, [r2, #24]
 800464e:	42a3      	cmp	r3, r4
 8004650:	db01      	blt.n	8004656 <__sfputc_r+0x16>
 8004652:	290a      	cmp	r1, #10
 8004654:	d103      	bne.n	800465e <__sfputc_r+0x1e>
 8004656:	f85d 4b04 	ldr.w	r4, [sp], #4
 800465a:	f000 bb6d 	b.w	8004d38 <__swbuf_r>
 800465e:	6813      	ldr	r3, [r2, #0]
 8004660:	1c58      	adds	r0, r3, #1
 8004662:	6010      	str	r0, [r2, #0]
 8004664:	7019      	strb	r1, [r3, #0]
 8004666:	4608      	mov	r0, r1
 8004668:	f85d 4b04 	ldr.w	r4, [sp], #4
 800466c:	4770      	bx	lr

0800466e <__sfputs_r>:
 800466e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004670:	4606      	mov	r6, r0
 8004672:	460f      	mov	r7, r1
 8004674:	4614      	mov	r4, r2
 8004676:	18d5      	adds	r5, r2, r3
 8004678:	42ac      	cmp	r4, r5
 800467a:	d101      	bne.n	8004680 <__sfputs_r+0x12>
 800467c:	2000      	movs	r0, #0
 800467e:	e007      	b.n	8004690 <__sfputs_r+0x22>
 8004680:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004684:	463a      	mov	r2, r7
 8004686:	4630      	mov	r0, r6
 8004688:	f7ff ffda 	bl	8004640 <__sfputc_r>
 800468c:	1c43      	adds	r3, r0, #1
 800468e:	d1f3      	bne.n	8004678 <__sfputs_r+0xa>
 8004690:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004694 <_vfiprintf_r>:
 8004694:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004698:	460d      	mov	r5, r1
 800469a:	b09d      	sub	sp, #116	@ 0x74
 800469c:	4614      	mov	r4, r2
 800469e:	4698      	mov	r8, r3
 80046a0:	4606      	mov	r6, r0
 80046a2:	b118      	cbz	r0, 80046ac <_vfiprintf_r+0x18>
 80046a4:	6a03      	ldr	r3, [r0, #32]
 80046a6:	b90b      	cbnz	r3, 80046ac <_vfiprintf_r+0x18>
 80046a8:	f7ff fe5a 	bl	8004360 <__sinit>
 80046ac:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80046ae:	07d9      	lsls	r1, r3, #31
 80046b0:	d405      	bmi.n	80046be <_vfiprintf_r+0x2a>
 80046b2:	89ab      	ldrh	r3, [r5, #12]
 80046b4:	059a      	lsls	r2, r3, #22
 80046b6:	d402      	bmi.n	80046be <_vfiprintf_r+0x2a>
 80046b8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80046ba:	f7ff ff66 	bl	800458a <__retarget_lock_acquire_recursive>
 80046be:	89ab      	ldrh	r3, [r5, #12]
 80046c0:	071b      	lsls	r3, r3, #28
 80046c2:	d501      	bpl.n	80046c8 <_vfiprintf_r+0x34>
 80046c4:	692b      	ldr	r3, [r5, #16]
 80046c6:	b99b      	cbnz	r3, 80046f0 <_vfiprintf_r+0x5c>
 80046c8:	4629      	mov	r1, r5
 80046ca:	4630      	mov	r0, r6
 80046cc:	f000 fb72 	bl	8004db4 <__swsetup_r>
 80046d0:	b170      	cbz	r0, 80046f0 <_vfiprintf_r+0x5c>
 80046d2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80046d4:	07dc      	lsls	r4, r3, #31
 80046d6:	d504      	bpl.n	80046e2 <_vfiprintf_r+0x4e>
 80046d8:	f04f 30ff 	mov.w	r0, #4294967295
 80046dc:	b01d      	add	sp, #116	@ 0x74
 80046de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80046e2:	89ab      	ldrh	r3, [r5, #12]
 80046e4:	0598      	lsls	r0, r3, #22
 80046e6:	d4f7      	bmi.n	80046d8 <_vfiprintf_r+0x44>
 80046e8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80046ea:	f7ff ff4f 	bl	800458c <__retarget_lock_release_recursive>
 80046ee:	e7f3      	b.n	80046d8 <_vfiprintf_r+0x44>
 80046f0:	2300      	movs	r3, #0
 80046f2:	9309      	str	r3, [sp, #36]	@ 0x24
 80046f4:	2320      	movs	r3, #32
 80046f6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80046fa:	f8cd 800c 	str.w	r8, [sp, #12]
 80046fe:	2330      	movs	r3, #48	@ 0x30
 8004700:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80048b0 <_vfiprintf_r+0x21c>
 8004704:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004708:	f04f 0901 	mov.w	r9, #1
 800470c:	4623      	mov	r3, r4
 800470e:	469a      	mov	sl, r3
 8004710:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004714:	b10a      	cbz	r2, 800471a <_vfiprintf_r+0x86>
 8004716:	2a25      	cmp	r2, #37	@ 0x25
 8004718:	d1f9      	bne.n	800470e <_vfiprintf_r+0x7a>
 800471a:	ebba 0b04 	subs.w	fp, sl, r4
 800471e:	d00b      	beq.n	8004738 <_vfiprintf_r+0xa4>
 8004720:	465b      	mov	r3, fp
 8004722:	4622      	mov	r2, r4
 8004724:	4629      	mov	r1, r5
 8004726:	4630      	mov	r0, r6
 8004728:	f7ff ffa1 	bl	800466e <__sfputs_r>
 800472c:	3001      	adds	r0, #1
 800472e:	f000 80a7 	beq.w	8004880 <_vfiprintf_r+0x1ec>
 8004732:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004734:	445a      	add	r2, fp
 8004736:	9209      	str	r2, [sp, #36]	@ 0x24
 8004738:	f89a 3000 	ldrb.w	r3, [sl]
 800473c:	2b00      	cmp	r3, #0
 800473e:	f000 809f 	beq.w	8004880 <_vfiprintf_r+0x1ec>
 8004742:	2300      	movs	r3, #0
 8004744:	f04f 32ff 	mov.w	r2, #4294967295
 8004748:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800474c:	f10a 0a01 	add.w	sl, sl, #1
 8004750:	9304      	str	r3, [sp, #16]
 8004752:	9307      	str	r3, [sp, #28]
 8004754:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004758:	931a      	str	r3, [sp, #104]	@ 0x68
 800475a:	4654      	mov	r4, sl
 800475c:	2205      	movs	r2, #5
 800475e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004762:	4853      	ldr	r0, [pc, #332]	@ (80048b0 <_vfiprintf_r+0x21c>)
 8004764:	f7fb fd3c 	bl	80001e0 <memchr>
 8004768:	9a04      	ldr	r2, [sp, #16]
 800476a:	b9d8      	cbnz	r0, 80047a4 <_vfiprintf_r+0x110>
 800476c:	06d1      	lsls	r1, r2, #27
 800476e:	bf44      	itt	mi
 8004770:	2320      	movmi	r3, #32
 8004772:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004776:	0713      	lsls	r3, r2, #28
 8004778:	bf44      	itt	mi
 800477a:	232b      	movmi	r3, #43	@ 0x2b
 800477c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004780:	f89a 3000 	ldrb.w	r3, [sl]
 8004784:	2b2a      	cmp	r3, #42	@ 0x2a
 8004786:	d015      	beq.n	80047b4 <_vfiprintf_r+0x120>
 8004788:	9a07      	ldr	r2, [sp, #28]
 800478a:	4654      	mov	r4, sl
 800478c:	2000      	movs	r0, #0
 800478e:	f04f 0c0a 	mov.w	ip, #10
 8004792:	4621      	mov	r1, r4
 8004794:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004798:	3b30      	subs	r3, #48	@ 0x30
 800479a:	2b09      	cmp	r3, #9
 800479c:	d94b      	bls.n	8004836 <_vfiprintf_r+0x1a2>
 800479e:	b1b0      	cbz	r0, 80047ce <_vfiprintf_r+0x13a>
 80047a0:	9207      	str	r2, [sp, #28]
 80047a2:	e014      	b.n	80047ce <_vfiprintf_r+0x13a>
 80047a4:	eba0 0308 	sub.w	r3, r0, r8
 80047a8:	fa09 f303 	lsl.w	r3, r9, r3
 80047ac:	4313      	orrs	r3, r2
 80047ae:	9304      	str	r3, [sp, #16]
 80047b0:	46a2      	mov	sl, r4
 80047b2:	e7d2      	b.n	800475a <_vfiprintf_r+0xc6>
 80047b4:	9b03      	ldr	r3, [sp, #12]
 80047b6:	1d19      	adds	r1, r3, #4
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	9103      	str	r1, [sp, #12]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	bfbb      	ittet	lt
 80047c0:	425b      	neglt	r3, r3
 80047c2:	f042 0202 	orrlt.w	r2, r2, #2
 80047c6:	9307      	strge	r3, [sp, #28]
 80047c8:	9307      	strlt	r3, [sp, #28]
 80047ca:	bfb8      	it	lt
 80047cc:	9204      	strlt	r2, [sp, #16]
 80047ce:	7823      	ldrb	r3, [r4, #0]
 80047d0:	2b2e      	cmp	r3, #46	@ 0x2e
 80047d2:	d10a      	bne.n	80047ea <_vfiprintf_r+0x156>
 80047d4:	7863      	ldrb	r3, [r4, #1]
 80047d6:	2b2a      	cmp	r3, #42	@ 0x2a
 80047d8:	d132      	bne.n	8004840 <_vfiprintf_r+0x1ac>
 80047da:	9b03      	ldr	r3, [sp, #12]
 80047dc:	1d1a      	adds	r2, r3, #4
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	9203      	str	r2, [sp, #12]
 80047e2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80047e6:	3402      	adds	r4, #2
 80047e8:	9305      	str	r3, [sp, #20]
 80047ea:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80048c0 <_vfiprintf_r+0x22c>
 80047ee:	7821      	ldrb	r1, [r4, #0]
 80047f0:	2203      	movs	r2, #3
 80047f2:	4650      	mov	r0, sl
 80047f4:	f7fb fcf4 	bl	80001e0 <memchr>
 80047f8:	b138      	cbz	r0, 800480a <_vfiprintf_r+0x176>
 80047fa:	9b04      	ldr	r3, [sp, #16]
 80047fc:	eba0 000a 	sub.w	r0, r0, sl
 8004800:	2240      	movs	r2, #64	@ 0x40
 8004802:	4082      	lsls	r2, r0
 8004804:	4313      	orrs	r3, r2
 8004806:	3401      	adds	r4, #1
 8004808:	9304      	str	r3, [sp, #16]
 800480a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800480e:	4829      	ldr	r0, [pc, #164]	@ (80048b4 <_vfiprintf_r+0x220>)
 8004810:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004814:	2206      	movs	r2, #6
 8004816:	f7fb fce3 	bl	80001e0 <memchr>
 800481a:	2800      	cmp	r0, #0
 800481c:	d03f      	beq.n	800489e <_vfiprintf_r+0x20a>
 800481e:	4b26      	ldr	r3, [pc, #152]	@ (80048b8 <_vfiprintf_r+0x224>)
 8004820:	bb1b      	cbnz	r3, 800486a <_vfiprintf_r+0x1d6>
 8004822:	9b03      	ldr	r3, [sp, #12]
 8004824:	3307      	adds	r3, #7
 8004826:	f023 0307 	bic.w	r3, r3, #7
 800482a:	3308      	adds	r3, #8
 800482c:	9303      	str	r3, [sp, #12]
 800482e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004830:	443b      	add	r3, r7
 8004832:	9309      	str	r3, [sp, #36]	@ 0x24
 8004834:	e76a      	b.n	800470c <_vfiprintf_r+0x78>
 8004836:	fb0c 3202 	mla	r2, ip, r2, r3
 800483a:	460c      	mov	r4, r1
 800483c:	2001      	movs	r0, #1
 800483e:	e7a8      	b.n	8004792 <_vfiprintf_r+0xfe>
 8004840:	2300      	movs	r3, #0
 8004842:	3401      	adds	r4, #1
 8004844:	9305      	str	r3, [sp, #20]
 8004846:	4619      	mov	r1, r3
 8004848:	f04f 0c0a 	mov.w	ip, #10
 800484c:	4620      	mov	r0, r4
 800484e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004852:	3a30      	subs	r2, #48	@ 0x30
 8004854:	2a09      	cmp	r2, #9
 8004856:	d903      	bls.n	8004860 <_vfiprintf_r+0x1cc>
 8004858:	2b00      	cmp	r3, #0
 800485a:	d0c6      	beq.n	80047ea <_vfiprintf_r+0x156>
 800485c:	9105      	str	r1, [sp, #20]
 800485e:	e7c4      	b.n	80047ea <_vfiprintf_r+0x156>
 8004860:	fb0c 2101 	mla	r1, ip, r1, r2
 8004864:	4604      	mov	r4, r0
 8004866:	2301      	movs	r3, #1
 8004868:	e7f0      	b.n	800484c <_vfiprintf_r+0x1b8>
 800486a:	ab03      	add	r3, sp, #12
 800486c:	9300      	str	r3, [sp, #0]
 800486e:	462a      	mov	r2, r5
 8004870:	4b12      	ldr	r3, [pc, #72]	@ (80048bc <_vfiprintf_r+0x228>)
 8004872:	a904      	add	r1, sp, #16
 8004874:	4630      	mov	r0, r6
 8004876:	f3af 8000 	nop.w
 800487a:	4607      	mov	r7, r0
 800487c:	1c78      	adds	r0, r7, #1
 800487e:	d1d6      	bne.n	800482e <_vfiprintf_r+0x19a>
 8004880:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004882:	07d9      	lsls	r1, r3, #31
 8004884:	d405      	bmi.n	8004892 <_vfiprintf_r+0x1fe>
 8004886:	89ab      	ldrh	r3, [r5, #12]
 8004888:	059a      	lsls	r2, r3, #22
 800488a:	d402      	bmi.n	8004892 <_vfiprintf_r+0x1fe>
 800488c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800488e:	f7ff fe7d 	bl	800458c <__retarget_lock_release_recursive>
 8004892:	89ab      	ldrh	r3, [r5, #12]
 8004894:	065b      	lsls	r3, r3, #25
 8004896:	f53f af1f 	bmi.w	80046d8 <_vfiprintf_r+0x44>
 800489a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800489c:	e71e      	b.n	80046dc <_vfiprintf_r+0x48>
 800489e:	ab03      	add	r3, sp, #12
 80048a0:	9300      	str	r3, [sp, #0]
 80048a2:	462a      	mov	r2, r5
 80048a4:	4b05      	ldr	r3, [pc, #20]	@ (80048bc <_vfiprintf_r+0x228>)
 80048a6:	a904      	add	r1, sp, #16
 80048a8:	4630      	mov	r0, r6
 80048aa:	f000 f879 	bl	80049a0 <_printf_i>
 80048ae:	e7e4      	b.n	800487a <_vfiprintf_r+0x1e6>
 80048b0:	08004fa4 	.word	0x08004fa4
 80048b4:	08004fae 	.word	0x08004fae
 80048b8:	00000000 	.word	0x00000000
 80048bc:	0800466f 	.word	0x0800466f
 80048c0:	08004faa 	.word	0x08004faa

080048c4 <_printf_common>:
 80048c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80048c8:	4616      	mov	r6, r2
 80048ca:	4698      	mov	r8, r3
 80048cc:	688a      	ldr	r2, [r1, #8]
 80048ce:	690b      	ldr	r3, [r1, #16]
 80048d0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80048d4:	4293      	cmp	r3, r2
 80048d6:	bfb8      	it	lt
 80048d8:	4613      	movlt	r3, r2
 80048da:	6033      	str	r3, [r6, #0]
 80048dc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80048e0:	4607      	mov	r7, r0
 80048e2:	460c      	mov	r4, r1
 80048e4:	b10a      	cbz	r2, 80048ea <_printf_common+0x26>
 80048e6:	3301      	adds	r3, #1
 80048e8:	6033      	str	r3, [r6, #0]
 80048ea:	6823      	ldr	r3, [r4, #0]
 80048ec:	0699      	lsls	r1, r3, #26
 80048ee:	bf42      	ittt	mi
 80048f0:	6833      	ldrmi	r3, [r6, #0]
 80048f2:	3302      	addmi	r3, #2
 80048f4:	6033      	strmi	r3, [r6, #0]
 80048f6:	6825      	ldr	r5, [r4, #0]
 80048f8:	f015 0506 	ands.w	r5, r5, #6
 80048fc:	d106      	bne.n	800490c <_printf_common+0x48>
 80048fe:	f104 0a19 	add.w	sl, r4, #25
 8004902:	68e3      	ldr	r3, [r4, #12]
 8004904:	6832      	ldr	r2, [r6, #0]
 8004906:	1a9b      	subs	r3, r3, r2
 8004908:	42ab      	cmp	r3, r5
 800490a:	dc26      	bgt.n	800495a <_printf_common+0x96>
 800490c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004910:	6822      	ldr	r2, [r4, #0]
 8004912:	3b00      	subs	r3, #0
 8004914:	bf18      	it	ne
 8004916:	2301      	movne	r3, #1
 8004918:	0692      	lsls	r2, r2, #26
 800491a:	d42b      	bmi.n	8004974 <_printf_common+0xb0>
 800491c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004920:	4641      	mov	r1, r8
 8004922:	4638      	mov	r0, r7
 8004924:	47c8      	blx	r9
 8004926:	3001      	adds	r0, #1
 8004928:	d01e      	beq.n	8004968 <_printf_common+0xa4>
 800492a:	6823      	ldr	r3, [r4, #0]
 800492c:	6922      	ldr	r2, [r4, #16]
 800492e:	f003 0306 	and.w	r3, r3, #6
 8004932:	2b04      	cmp	r3, #4
 8004934:	bf02      	ittt	eq
 8004936:	68e5      	ldreq	r5, [r4, #12]
 8004938:	6833      	ldreq	r3, [r6, #0]
 800493a:	1aed      	subeq	r5, r5, r3
 800493c:	68a3      	ldr	r3, [r4, #8]
 800493e:	bf0c      	ite	eq
 8004940:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004944:	2500      	movne	r5, #0
 8004946:	4293      	cmp	r3, r2
 8004948:	bfc4      	itt	gt
 800494a:	1a9b      	subgt	r3, r3, r2
 800494c:	18ed      	addgt	r5, r5, r3
 800494e:	2600      	movs	r6, #0
 8004950:	341a      	adds	r4, #26
 8004952:	42b5      	cmp	r5, r6
 8004954:	d11a      	bne.n	800498c <_printf_common+0xc8>
 8004956:	2000      	movs	r0, #0
 8004958:	e008      	b.n	800496c <_printf_common+0xa8>
 800495a:	2301      	movs	r3, #1
 800495c:	4652      	mov	r2, sl
 800495e:	4641      	mov	r1, r8
 8004960:	4638      	mov	r0, r7
 8004962:	47c8      	blx	r9
 8004964:	3001      	adds	r0, #1
 8004966:	d103      	bne.n	8004970 <_printf_common+0xac>
 8004968:	f04f 30ff 	mov.w	r0, #4294967295
 800496c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004970:	3501      	adds	r5, #1
 8004972:	e7c6      	b.n	8004902 <_printf_common+0x3e>
 8004974:	18e1      	adds	r1, r4, r3
 8004976:	1c5a      	adds	r2, r3, #1
 8004978:	2030      	movs	r0, #48	@ 0x30
 800497a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800497e:	4422      	add	r2, r4
 8004980:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004984:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004988:	3302      	adds	r3, #2
 800498a:	e7c7      	b.n	800491c <_printf_common+0x58>
 800498c:	2301      	movs	r3, #1
 800498e:	4622      	mov	r2, r4
 8004990:	4641      	mov	r1, r8
 8004992:	4638      	mov	r0, r7
 8004994:	47c8      	blx	r9
 8004996:	3001      	adds	r0, #1
 8004998:	d0e6      	beq.n	8004968 <_printf_common+0xa4>
 800499a:	3601      	adds	r6, #1
 800499c:	e7d9      	b.n	8004952 <_printf_common+0x8e>
	...

080049a0 <_printf_i>:
 80049a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80049a4:	7e0f      	ldrb	r7, [r1, #24]
 80049a6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80049a8:	2f78      	cmp	r7, #120	@ 0x78
 80049aa:	4691      	mov	r9, r2
 80049ac:	4680      	mov	r8, r0
 80049ae:	460c      	mov	r4, r1
 80049b0:	469a      	mov	sl, r3
 80049b2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80049b6:	d807      	bhi.n	80049c8 <_printf_i+0x28>
 80049b8:	2f62      	cmp	r7, #98	@ 0x62
 80049ba:	d80a      	bhi.n	80049d2 <_printf_i+0x32>
 80049bc:	2f00      	cmp	r7, #0
 80049be:	f000 80d2 	beq.w	8004b66 <_printf_i+0x1c6>
 80049c2:	2f58      	cmp	r7, #88	@ 0x58
 80049c4:	f000 80b9 	beq.w	8004b3a <_printf_i+0x19a>
 80049c8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80049cc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80049d0:	e03a      	b.n	8004a48 <_printf_i+0xa8>
 80049d2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80049d6:	2b15      	cmp	r3, #21
 80049d8:	d8f6      	bhi.n	80049c8 <_printf_i+0x28>
 80049da:	a101      	add	r1, pc, #4	@ (adr r1, 80049e0 <_printf_i+0x40>)
 80049dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80049e0:	08004a39 	.word	0x08004a39
 80049e4:	08004a4d 	.word	0x08004a4d
 80049e8:	080049c9 	.word	0x080049c9
 80049ec:	080049c9 	.word	0x080049c9
 80049f0:	080049c9 	.word	0x080049c9
 80049f4:	080049c9 	.word	0x080049c9
 80049f8:	08004a4d 	.word	0x08004a4d
 80049fc:	080049c9 	.word	0x080049c9
 8004a00:	080049c9 	.word	0x080049c9
 8004a04:	080049c9 	.word	0x080049c9
 8004a08:	080049c9 	.word	0x080049c9
 8004a0c:	08004b4d 	.word	0x08004b4d
 8004a10:	08004a77 	.word	0x08004a77
 8004a14:	08004b07 	.word	0x08004b07
 8004a18:	080049c9 	.word	0x080049c9
 8004a1c:	080049c9 	.word	0x080049c9
 8004a20:	08004b6f 	.word	0x08004b6f
 8004a24:	080049c9 	.word	0x080049c9
 8004a28:	08004a77 	.word	0x08004a77
 8004a2c:	080049c9 	.word	0x080049c9
 8004a30:	080049c9 	.word	0x080049c9
 8004a34:	08004b0f 	.word	0x08004b0f
 8004a38:	6833      	ldr	r3, [r6, #0]
 8004a3a:	1d1a      	adds	r2, r3, #4
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	6032      	str	r2, [r6, #0]
 8004a40:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004a44:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004a48:	2301      	movs	r3, #1
 8004a4a:	e09d      	b.n	8004b88 <_printf_i+0x1e8>
 8004a4c:	6833      	ldr	r3, [r6, #0]
 8004a4e:	6820      	ldr	r0, [r4, #0]
 8004a50:	1d19      	adds	r1, r3, #4
 8004a52:	6031      	str	r1, [r6, #0]
 8004a54:	0606      	lsls	r6, r0, #24
 8004a56:	d501      	bpl.n	8004a5c <_printf_i+0xbc>
 8004a58:	681d      	ldr	r5, [r3, #0]
 8004a5a:	e003      	b.n	8004a64 <_printf_i+0xc4>
 8004a5c:	0645      	lsls	r5, r0, #25
 8004a5e:	d5fb      	bpl.n	8004a58 <_printf_i+0xb8>
 8004a60:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004a64:	2d00      	cmp	r5, #0
 8004a66:	da03      	bge.n	8004a70 <_printf_i+0xd0>
 8004a68:	232d      	movs	r3, #45	@ 0x2d
 8004a6a:	426d      	negs	r5, r5
 8004a6c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004a70:	4859      	ldr	r0, [pc, #356]	@ (8004bd8 <_printf_i+0x238>)
 8004a72:	230a      	movs	r3, #10
 8004a74:	e011      	b.n	8004a9a <_printf_i+0xfa>
 8004a76:	6821      	ldr	r1, [r4, #0]
 8004a78:	6833      	ldr	r3, [r6, #0]
 8004a7a:	0608      	lsls	r0, r1, #24
 8004a7c:	f853 5b04 	ldr.w	r5, [r3], #4
 8004a80:	d402      	bmi.n	8004a88 <_printf_i+0xe8>
 8004a82:	0649      	lsls	r1, r1, #25
 8004a84:	bf48      	it	mi
 8004a86:	b2ad      	uxthmi	r5, r5
 8004a88:	2f6f      	cmp	r7, #111	@ 0x6f
 8004a8a:	4853      	ldr	r0, [pc, #332]	@ (8004bd8 <_printf_i+0x238>)
 8004a8c:	6033      	str	r3, [r6, #0]
 8004a8e:	bf14      	ite	ne
 8004a90:	230a      	movne	r3, #10
 8004a92:	2308      	moveq	r3, #8
 8004a94:	2100      	movs	r1, #0
 8004a96:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004a9a:	6866      	ldr	r6, [r4, #4]
 8004a9c:	60a6      	str	r6, [r4, #8]
 8004a9e:	2e00      	cmp	r6, #0
 8004aa0:	bfa2      	ittt	ge
 8004aa2:	6821      	ldrge	r1, [r4, #0]
 8004aa4:	f021 0104 	bicge.w	r1, r1, #4
 8004aa8:	6021      	strge	r1, [r4, #0]
 8004aaa:	b90d      	cbnz	r5, 8004ab0 <_printf_i+0x110>
 8004aac:	2e00      	cmp	r6, #0
 8004aae:	d04b      	beq.n	8004b48 <_printf_i+0x1a8>
 8004ab0:	4616      	mov	r6, r2
 8004ab2:	fbb5 f1f3 	udiv	r1, r5, r3
 8004ab6:	fb03 5711 	mls	r7, r3, r1, r5
 8004aba:	5dc7      	ldrb	r7, [r0, r7]
 8004abc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004ac0:	462f      	mov	r7, r5
 8004ac2:	42bb      	cmp	r3, r7
 8004ac4:	460d      	mov	r5, r1
 8004ac6:	d9f4      	bls.n	8004ab2 <_printf_i+0x112>
 8004ac8:	2b08      	cmp	r3, #8
 8004aca:	d10b      	bne.n	8004ae4 <_printf_i+0x144>
 8004acc:	6823      	ldr	r3, [r4, #0]
 8004ace:	07df      	lsls	r7, r3, #31
 8004ad0:	d508      	bpl.n	8004ae4 <_printf_i+0x144>
 8004ad2:	6923      	ldr	r3, [r4, #16]
 8004ad4:	6861      	ldr	r1, [r4, #4]
 8004ad6:	4299      	cmp	r1, r3
 8004ad8:	bfde      	ittt	le
 8004ada:	2330      	movle	r3, #48	@ 0x30
 8004adc:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004ae0:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004ae4:	1b92      	subs	r2, r2, r6
 8004ae6:	6122      	str	r2, [r4, #16]
 8004ae8:	f8cd a000 	str.w	sl, [sp]
 8004aec:	464b      	mov	r3, r9
 8004aee:	aa03      	add	r2, sp, #12
 8004af0:	4621      	mov	r1, r4
 8004af2:	4640      	mov	r0, r8
 8004af4:	f7ff fee6 	bl	80048c4 <_printf_common>
 8004af8:	3001      	adds	r0, #1
 8004afa:	d14a      	bne.n	8004b92 <_printf_i+0x1f2>
 8004afc:	f04f 30ff 	mov.w	r0, #4294967295
 8004b00:	b004      	add	sp, #16
 8004b02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b06:	6823      	ldr	r3, [r4, #0]
 8004b08:	f043 0320 	orr.w	r3, r3, #32
 8004b0c:	6023      	str	r3, [r4, #0]
 8004b0e:	4833      	ldr	r0, [pc, #204]	@ (8004bdc <_printf_i+0x23c>)
 8004b10:	2778      	movs	r7, #120	@ 0x78
 8004b12:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004b16:	6823      	ldr	r3, [r4, #0]
 8004b18:	6831      	ldr	r1, [r6, #0]
 8004b1a:	061f      	lsls	r7, r3, #24
 8004b1c:	f851 5b04 	ldr.w	r5, [r1], #4
 8004b20:	d402      	bmi.n	8004b28 <_printf_i+0x188>
 8004b22:	065f      	lsls	r7, r3, #25
 8004b24:	bf48      	it	mi
 8004b26:	b2ad      	uxthmi	r5, r5
 8004b28:	6031      	str	r1, [r6, #0]
 8004b2a:	07d9      	lsls	r1, r3, #31
 8004b2c:	bf44      	itt	mi
 8004b2e:	f043 0320 	orrmi.w	r3, r3, #32
 8004b32:	6023      	strmi	r3, [r4, #0]
 8004b34:	b11d      	cbz	r5, 8004b3e <_printf_i+0x19e>
 8004b36:	2310      	movs	r3, #16
 8004b38:	e7ac      	b.n	8004a94 <_printf_i+0xf4>
 8004b3a:	4827      	ldr	r0, [pc, #156]	@ (8004bd8 <_printf_i+0x238>)
 8004b3c:	e7e9      	b.n	8004b12 <_printf_i+0x172>
 8004b3e:	6823      	ldr	r3, [r4, #0]
 8004b40:	f023 0320 	bic.w	r3, r3, #32
 8004b44:	6023      	str	r3, [r4, #0]
 8004b46:	e7f6      	b.n	8004b36 <_printf_i+0x196>
 8004b48:	4616      	mov	r6, r2
 8004b4a:	e7bd      	b.n	8004ac8 <_printf_i+0x128>
 8004b4c:	6833      	ldr	r3, [r6, #0]
 8004b4e:	6825      	ldr	r5, [r4, #0]
 8004b50:	6961      	ldr	r1, [r4, #20]
 8004b52:	1d18      	adds	r0, r3, #4
 8004b54:	6030      	str	r0, [r6, #0]
 8004b56:	062e      	lsls	r6, r5, #24
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	d501      	bpl.n	8004b60 <_printf_i+0x1c0>
 8004b5c:	6019      	str	r1, [r3, #0]
 8004b5e:	e002      	b.n	8004b66 <_printf_i+0x1c6>
 8004b60:	0668      	lsls	r0, r5, #25
 8004b62:	d5fb      	bpl.n	8004b5c <_printf_i+0x1bc>
 8004b64:	8019      	strh	r1, [r3, #0]
 8004b66:	2300      	movs	r3, #0
 8004b68:	6123      	str	r3, [r4, #16]
 8004b6a:	4616      	mov	r6, r2
 8004b6c:	e7bc      	b.n	8004ae8 <_printf_i+0x148>
 8004b6e:	6833      	ldr	r3, [r6, #0]
 8004b70:	1d1a      	adds	r2, r3, #4
 8004b72:	6032      	str	r2, [r6, #0]
 8004b74:	681e      	ldr	r6, [r3, #0]
 8004b76:	6862      	ldr	r2, [r4, #4]
 8004b78:	2100      	movs	r1, #0
 8004b7a:	4630      	mov	r0, r6
 8004b7c:	f7fb fb30 	bl	80001e0 <memchr>
 8004b80:	b108      	cbz	r0, 8004b86 <_printf_i+0x1e6>
 8004b82:	1b80      	subs	r0, r0, r6
 8004b84:	6060      	str	r0, [r4, #4]
 8004b86:	6863      	ldr	r3, [r4, #4]
 8004b88:	6123      	str	r3, [r4, #16]
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004b90:	e7aa      	b.n	8004ae8 <_printf_i+0x148>
 8004b92:	6923      	ldr	r3, [r4, #16]
 8004b94:	4632      	mov	r2, r6
 8004b96:	4649      	mov	r1, r9
 8004b98:	4640      	mov	r0, r8
 8004b9a:	47d0      	blx	sl
 8004b9c:	3001      	adds	r0, #1
 8004b9e:	d0ad      	beq.n	8004afc <_printf_i+0x15c>
 8004ba0:	6823      	ldr	r3, [r4, #0]
 8004ba2:	079b      	lsls	r3, r3, #30
 8004ba4:	d413      	bmi.n	8004bce <_printf_i+0x22e>
 8004ba6:	68e0      	ldr	r0, [r4, #12]
 8004ba8:	9b03      	ldr	r3, [sp, #12]
 8004baa:	4298      	cmp	r0, r3
 8004bac:	bfb8      	it	lt
 8004bae:	4618      	movlt	r0, r3
 8004bb0:	e7a6      	b.n	8004b00 <_printf_i+0x160>
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	4632      	mov	r2, r6
 8004bb6:	4649      	mov	r1, r9
 8004bb8:	4640      	mov	r0, r8
 8004bba:	47d0      	blx	sl
 8004bbc:	3001      	adds	r0, #1
 8004bbe:	d09d      	beq.n	8004afc <_printf_i+0x15c>
 8004bc0:	3501      	adds	r5, #1
 8004bc2:	68e3      	ldr	r3, [r4, #12]
 8004bc4:	9903      	ldr	r1, [sp, #12]
 8004bc6:	1a5b      	subs	r3, r3, r1
 8004bc8:	42ab      	cmp	r3, r5
 8004bca:	dcf2      	bgt.n	8004bb2 <_printf_i+0x212>
 8004bcc:	e7eb      	b.n	8004ba6 <_printf_i+0x206>
 8004bce:	2500      	movs	r5, #0
 8004bd0:	f104 0619 	add.w	r6, r4, #25
 8004bd4:	e7f5      	b.n	8004bc2 <_printf_i+0x222>
 8004bd6:	bf00      	nop
 8004bd8:	08004fb5 	.word	0x08004fb5
 8004bdc:	08004fc6 	.word	0x08004fc6

08004be0 <__sflush_r>:
 8004be0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004be4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004be8:	0716      	lsls	r6, r2, #28
 8004bea:	4605      	mov	r5, r0
 8004bec:	460c      	mov	r4, r1
 8004bee:	d454      	bmi.n	8004c9a <__sflush_r+0xba>
 8004bf0:	684b      	ldr	r3, [r1, #4]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	dc02      	bgt.n	8004bfc <__sflush_r+0x1c>
 8004bf6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	dd48      	ble.n	8004c8e <__sflush_r+0xae>
 8004bfc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004bfe:	2e00      	cmp	r6, #0
 8004c00:	d045      	beq.n	8004c8e <__sflush_r+0xae>
 8004c02:	2300      	movs	r3, #0
 8004c04:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004c08:	682f      	ldr	r7, [r5, #0]
 8004c0a:	6a21      	ldr	r1, [r4, #32]
 8004c0c:	602b      	str	r3, [r5, #0]
 8004c0e:	d030      	beq.n	8004c72 <__sflush_r+0x92>
 8004c10:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004c12:	89a3      	ldrh	r3, [r4, #12]
 8004c14:	0759      	lsls	r1, r3, #29
 8004c16:	d505      	bpl.n	8004c24 <__sflush_r+0x44>
 8004c18:	6863      	ldr	r3, [r4, #4]
 8004c1a:	1ad2      	subs	r2, r2, r3
 8004c1c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004c1e:	b10b      	cbz	r3, 8004c24 <__sflush_r+0x44>
 8004c20:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004c22:	1ad2      	subs	r2, r2, r3
 8004c24:	2300      	movs	r3, #0
 8004c26:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004c28:	6a21      	ldr	r1, [r4, #32]
 8004c2a:	4628      	mov	r0, r5
 8004c2c:	47b0      	blx	r6
 8004c2e:	1c43      	adds	r3, r0, #1
 8004c30:	89a3      	ldrh	r3, [r4, #12]
 8004c32:	d106      	bne.n	8004c42 <__sflush_r+0x62>
 8004c34:	6829      	ldr	r1, [r5, #0]
 8004c36:	291d      	cmp	r1, #29
 8004c38:	d82b      	bhi.n	8004c92 <__sflush_r+0xb2>
 8004c3a:	4a2a      	ldr	r2, [pc, #168]	@ (8004ce4 <__sflush_r+0x104>)
 8004c3c:	410a      	asrs	r2, r1
 8004c3e:	07d6      	lsls	r6, r2, #31
 8004c40:	d427      	bmi.n	8004c92 <__sflush_r+0xb2>
 8004c42:	2200      	movs	r2, #0
 8004c44:	6062      	str	r2, [r4, #4]
 8004c46:	04d9      	lsls	r1, r3, #19
 8004c48:	6922      	ldr	r2, [r4, #16]
 8004c4a:	6022      	str	r2, [r4, #0]
 8004c4c:	d504      	bpl.n	8004c58 <__sflush_r+0x78>
 8004c4e:	1c42      	adds	r2, r0, #1
 8004c50:	d101      	bne.n	8004c56 <__sflush_r+0x76>
 8004c52:	682b      	ldr	r3, [r5, #0]
 8004c54:	b903      	cbnz	r3, 8004c58 <__sflush_r+0x78>
 8004c56:	6560      	str	r0, [r4, #84]	@ 0x54
 8004c58:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004c5a:	602f      	str	r7, [r5, #0]
 8004c5c:	b1b9      	cbz	r1, 8004c8e <__sflush_r+0xae>
 8004c5e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004c62:	4299      	cmp	r1, r3
 8004c64:	d002      	beq.n	8004c6c <__sflush_r+0x8c>
 8004c66:	4628      	mov	r0, r5
 8004c68:	f7ff fca0 	bl	80045ac <_free_r>
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	6363      	str	r3, [r4, #52]	@ 0x34
 8004c70:	e00d      	b.n	8004c8e <__sflush_r+0xae>
 8004c72:	2301      	movs	r3, #1
 8004c74:	4628      	mov	r0, r5
 8004c76:	47b0      	blx	r6
 8004c78:	4602      	mov	r2, r0
 8004c7a:	1c50      	adds	r0, r2, #1
 8004c7c:	d1c9      	bne.n	8004c12 <__sflush_r+0x32>
 8004c7e:	682b      	ldr	r3, [r5, #0]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d0c6      	beq.n	8004c12 <__sflush_r+0x32>
 8004c84:	2b1d      	cmp	r3, #29
 8004c86:	d001      	beq.n	8004c8c <__sflush_r+0xac>
 8004c88:	2b16      	cmp	r3, #22
 8004c8a:	d11e      	bne.n	8004cca <__sflush_r+0xea>
 8004c8c:	602f      	str	r7, [r5, #0]
 8004c8e:	2000      	movs	r0, #0
 8004c90:	e022      	b.n	8004cd8 <__sflush_r+0xf8>
 8004c92:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004c96:	b21b      	sxth	r3, r3
 8004c98:	e01b      	b.n	8004cd2 <__sflush_r+0xf2>
 8004c9a:	690f      	ldr	r7, [r1, #16]
 8004c9c:	2f00      	cmp	r7, #0
 8004c9e:	d0f6      	beq.n	8004c8e <__sflush_r+0xae>
 8004ca0:	0793      	lsls	r3, r2, #30
 8004ca2:	680e      	ldr	r6, [r1, #0]
 8004ca4:	bf08      	it	eq
 8004ca6:	694b      	ldreq	r3, [r1, #20]
 8004ca8:	600f      	str	r7, [r1, #0]
 8004caa:	bf18      	it	ne
 8004cac:	2300      	movne	r3, #0
 8004cae:	eba6 0807 	sub.w	r8, r6, r7
 8004cb2:	608b      	str	r3, [r1, #8]
 8004cb4:	f1b8 0f00 	cmp.w	r8, #0
 8004cb8:	dde9      	ble.n	8004c8e <__sflush_r+0xae>
 8004cba:	6a21      	ldr	r1, [r4, #32]
 8004cbc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8004cbe:	4643      	mov	r3, r8
 8004cc0:	463a      	mov	r2, r7
 8004cc2:	4628      	mov	r0, r5
 8004cc4:	47b0      	blx	r6
 8004cc6:	2800      	cmp	r0, #0
 8004cc8:	dc08      	bgt.n	8004cdc <__sflush_r+0xfc>
 8004cca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004cce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004cd2:	81a3      	strh	r3, [r4, #12]
 8004cd4:	f04f 30ff 	mov.w	r0, #4294967295
 8004cd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004cdc:	4407      	add	r7, r0
 8004cde:	eba8 0800 	sub.w	r8, r8, r0
 8004ce2:	e7e7      	b.n	8004cb4 <__sflush_r+0xd4>
 8004ce4:	dfbffffe 	.word	0xdfbffffe

08004ce8 <_fflush_r>:
 8004ce8:	b538      	push	{r3, r4, r5, lr}
 8004cea:	690b      	ldr	r3, [r1, #16]
 8004cec:	4605      	mov	r5, r0
 8004cee:	460c      	mov	r4, r1
 8004cf0:	b913      	cbnz	r3, 8004cf8 <_fflush_r+0x10>
 8004cf2:	2500      	movs	r5, #0
 8004cf4:	4628      	mov	r0, r5
 8004cf6:	bd38      	pop	{r3, r4, r5, pc}
 8004cf8:	b118      	cbz	r0, 8004d02 <_fflush_r+0x1a>
 8004cfa:	6a03      	ldr	r3, [r0, #32]
 8004cfc:	b90b      	cbnz	r3, 8004d02 <_fflush_r+0x1a>
 8004cfe:	f7ff fb2f 	bl	8004360 <__sinit>
 8004d02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d0f3      	beq.n	8004cf2 <_fflush_r+0xa>
 8004d0a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004d0c:	07d0      	lsls	r0, r2, #31
 8004d0e:	d404      	bmi.n	8004d1a <_fflush_r+0x32>
 8004d10:	0599      	lsls	r1, r3, #22
 8004d12:	d402      	bmi.n	8004d1a <_fflush_r+0x32>
 8004d14:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004d16:	f7ff fc38 	bl	800458a <__retarget_lock_acquire_recursive>
 8004d1a:	4628      	mov	r0, r5
 8004d1c:	4621      	mov	r1, r4
 8004d1e:	f7ff ff5f 	bl	8004be0 <__sflush_r>
 8004d22:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004d24:	07da      	lsls	r2, r3, #31
 8004d26:	4605      	mov	r5, r0
 8004d28:	d4e4      	bmi.n	8004cf4 <_fflush_r+0xc>
 8004d2a:	89a3      	ldrh	r3, [r4, #12]
 8004d2c:	059b      	lsls	r3, r3, #22
 8004d2e:	d4e1      	bmi.n	8004cf4 <_fflush_r+0xc>
 8004d30:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004d32:	f7ff fc2b 	bl	800458c <__retarget_lock_release_recursive>
 8004d36:	e7dd      	b.n	8004cf4 <_fflush_r+0xc>

08004d38 <__swbuf_r>:
 8004d38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d3a:	460e      	mov	r6, r1
 8004d3c:	4614      	mov	r4, r2
 8004d3e:	4605      	mov	r5, r0
 8004d40:	b118      	cbz	r0, 8004d4a <__swbuf_r+0x12>
 8004d42:	6a03      	ldr	r3, [r0, #32]
 8004d44:	b90b      	cbnz	r3, 8004d4a <__swbuf_r+0x12>
 8004d46:	f7ff fb0b 	bl	8004360 <__sinit>
 8004d4a:	69a3      	ldr	r3, [r4, #24]
 8004d4c:	60a3      	str	r3, [r4, #8]
 8004d4e:	89a3      	ldrh	r3, [r4, #12]
 8004d50:	071a      	lsls	r2, r3, #28
 8004d52:	d501      	bpl.n	8004d58 <__swbuf_r+0x20>
 8004d54:	6923      	ldr	r3, [r4, #16]
 8004d56:	b943      	cbnz	r3, 8004d6a <__swbuf_r+0x32>
 8004d58:	4621      	mov	r1, r4
 8004d5a:	4628      	mov	r0, r5
 8004d5c:	f000 f82a 	bl	8004db4 <__swsetup_r>
 8004d60:	b118      	cbz	r0, 8004d6a <__swbuf_r+0x32>
 8004d62:	f04f 37ff 	mov.w	r7, #4294967295
 8004d66:	4638      	mov	r0, r7
 8004d68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004d6a:	6823      	ldr	r3, [r4, #0]
 8004d6c:	6922      	ldr	r2, [r4, #16]
 8004d6e:	1a98      	subs	r0, r3, r2
 8004d70:	6963      	ldr	r3, [r4, #20]
 8004d72:	b2f6      	uxtb	r6, r6
 8004d74:	4283      	cmp	r3, r0
 8004d76:	4637      	mov	r7, r6
 8004d78:	dc05      	bgt.n	8004d86 <__swbuf_r+0x4e>
 8004d7a:	4621      	mov	r1, r4
 8004d7c:	4628      	mov	r0, r5
 8004d7e:	f7ff ffb3 	bl	8004ce8 <_fflush_r>
 8004d82:	2800      	cmp	r0, #0
 8004d84:	d1ed      	bne.n	8004d62 <__swbuf_r+0x2a>
 8004d86:	68a3      	ldr	r3, [r4, #8]
 8004d88:	3b01      	subs	r3, #1
 8004d8a:	60a3      	str	r3, [r4, #8]
 8004d8c:	6823      	ldr	r3, [r4, #0]
 8004d8e:	1c5a      	adds	r2, r3, #1
 8004d90:	6022      	str	r2, [r4, #0]
 8004d92:	701e      	strb	r6, [r3, #0]
 8004d94:	6962      	ldr	r2, [r4, #20]
 8004d96:	1c43      	adds	r3, r0, #1
 8004d98:	429a      	cmp	r2, r3
 8004d9a:	d004      	beq.n	8004da6 <__swbuf_r+0x6e>
 8004d9c:	89a3      	ldrh	r3, [r4, #12]
 8004d9e:	07db      	lsls	r3, r3, #31
 8004da0:	d5e1      	bpl.n	8004d66 <__swbuf_r+0x2e>
 8004da2:	2e0a      	cmp	r6, #10
 8004da4:	d1df      	bne.n	8004d66 <__swbuf_r+0x2e>
 8004da6:	4621      	mov	r1, r4
 8004da8:	4628      	mov	r0, r5
 8004daa:	f7ff ff9d 	bl	8004ce8 <_fflush_r>
 8004dae:	2800      	cmp	r0, #0
 8004db0:	d0d9      	beq.n	8004d66 <__swbuf_r+0x2e>
 8004db2:	e7d6      	b.n	8004d62 <__swbuf_r+0x2a>

08004db4 <__swsetup_r>:
 8004db4:	b538      	push	{r3, r4, r5, lr}
 8004db6:	4b29      	ldr	r3, [pc, #164]	@ (8004e5c <__swsetup_r+0xa8>)
 8004db8:	4605      	mov	r5, r0
 8004dba:	6818      	ldr	r0, [r3, #0]
 8004dbc:	460c      	mov	r4, r1
 8004dbe:	b118      	cbz	r0, 8004dc8 <__swsetup_r+0x14>
 8004dc0:	6a03      	ldr	r3, [r0, #32]
 8004dc2:	b90b      	cbnz	r3, 8004dc8 <__swsetup_r+0x14>
 8004dc4:	f7ff facc 	bl	8004360 <__sinit>
 8004dc8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004dcc:	0719      	lsls	r1, r3, #28
 8004dce:	d422      	bmi.n	8004e16 <__swsetup_r+0x62>
 8004dd0:	06da      	lsls	r2, r3, #27
 8004dd2:	d407      	bmi.n	8004de4 <__swsetup_r+0x30>
 8004dd4:	2209      	movs	r2, #9
 8004dd6:	602a      	str	r2, [r5, #0]
 8004dd8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004ddc:	81a3      	strh	r3, [r4, #12]
 8004dde:	f04f 30ff 	mov.w	r0, #4294967295
 8004de2:	e033      	b.n	8004e4c <__swsetup_r+0x98>
 8004de4:	0758      	lsls	r0, r3, #29
 8004de6:	d512      	bpl.n	8004e0e <__swsetup_r+0x5a>
 8004de8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004dea:	b141      	cbz	r1, 8004dfe <__swsetup_r+0x4a>
 8004dec:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004df0:	4299      	cmp	r1, r3
 8004df2:	d002      	beq.n	8004dfa <__swsetup_r+0x46>
 8004df4:	4628      	mov	r0, r5
 8004df6:	f7ff fbd9 	bl	80045ac <_free_r>
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	6363      	str	r3, [r4, #52]	@ 0x34
 8004dfe:	89a3      	ldrh	r3, [r4, #12]
 8004e00:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004e04:	81a3      	strh	r3, [r4, #12]
 8004e06:	2300      	movs	r3, #0
 8004e08:	6063      	str	r3, [r4, #4]
 8004e0a:	6923      	ldr	r3, [r4, #16]
 8004e0c:	6023      	str	r3, [r4, #0]
 8004e0e:	89a3      	ldrh	r3, [r4, #12]
 8004e10:	f043 0308 	orr.w	r3, r3, #8
 8004e14:	81a3      	strh	r3, [r4, #12]
 8004e16:	6923      	ldr	r3, [r4, #16]
 8004e18:	b94b      	cbnz	r3, 8004e2e <__swsetup_r+0x7a>
 8004e1a:	89a3      	ldrh	r3, [r4, #12]
 8004e1c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004e20:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004e24:	d003      	beq.n	8004e2e <__swsetup_r+0x7a>
 8004e26:	4621      	mov	r1, r4
 8004e28:	4628      	mov	r0, r5
 8004e2a:	f000 f83f 	bl	8004eac <__smakebuf_r>
 8004e2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004e32:	f013 0201 	ands.w	r2, r3, #1
 8004e36:	d00a      	beq.n	8004e4e <__swsetup_r+0x9a>
 8004e38:	2200      	movs	r2, #0
 8004e3a:	60a2      	str	r2, [r4, #8]
 8004e3c:	6962      	ldr	r2, [r4, #20]
 8004e3e:	4252      	negs	r2, r2
 8004e40:	61a2      	str	r2, [r4, #24]
 8004e42:	6922      	ldr	r2, [r4, #16]
 8004e44:	b942      	cbnz	r2, 8004e58 <__swsetup_r+0xa4>
 8004e46:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004e4a:	d1c5      	bne.n	8004dd8 <__swsetup_r+0x24>
 8004e4c:	bd38      	pop	{r3, r4, r5, pc}
 8004e4e:	0799      	lsls	r1, r3, #30
 8004e50:	bf58      	it	pl
 8004e52:	6962      	ldrpl	r2, [r4, #20]
 8004e54:	60a2      	str	r2, [r4, #8]
 8004e56:	e7f4      	b.n	8004e42 <__swsetup_r+0x8e>
 8004e58:	2000      	movs	r0, #0
 8004e5a:	e7f7      	b.n	8004e4c <__swsetup_r+0x98>
 8004e5c:	20000018 	.word	0x20000018

08004e60 <__swhatbuf_r>:
 8004e60:	b570      	push	{r4, r5, r6, lr}
 8004e62:	460c      	mov	r4, r1
 8004e64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e68:	2900      	cmp	r1, #0
 8004e6a:	b096      	sub	sp, #88	@ 0x58
 8004e6c:	4615      	mov	r5, r2
 8004e6e:	461e      	mov	r6, r3
 8004e70:	da0d      	bge.n	8004e8e <__swhatbuf_r+0x2e>
 8004e72:	89a3      	ldrh	r3, [r4, #12]
 8004e74:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004e78:	f04f 0100 	mov.w	r1, #0
 8004e7c:	bf14      	ite	ne
 8004e7e:	2340      	movne	r3, #64	@ 0x40
 8004e80:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004e84:	2000      	movs	r0, #0
 8004e86:	6031      	str	r1, [r6, #0]
 8004e88:	602b      	str	r3, [r5, #0]
 8004e8a:	b016      	add	sp, #88	@ 0x58
 8004e8c:	bd70      	pop	{r4, r5, r6, pc}
 8004e8e:	466a      	mov	r2, sp
 8004e90:	f000 f848 	bl	8004f24 <_fstat_r>
 8004e94:	2800      	cmp	r0, #0
 8004e96:	dbec      	blt.n	8004e72 <__swhatbuf_r+0x12>
 8004e98:	9901      	ldr	r1, [sp, #4]
 8004e9a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8004e9e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8004ea2:	4259      	negs	r1, r3
 8004ea4:	4159      	adcs	r1, r3
 8004ea6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004eaa:	e7eb      	b.n	8004e84 <__swhatbuf_r+0x24>

08004eac <__smakebuf_r>:
 8004eac:	898b      	ldrh	r3, [r1, #12]
 8004eae:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004eb0:	079d      	lsls	r5, r3, #30
 8004eb2:	4606      	mov	r6, r0
 8004eb4:	460c      	mov	r4, r1
 8004eb6:	d507      	bpl.n	8004ec8 <__smakebuf_r+0x1c>
 8004eb8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004ebc:	6023      	str	r3, [r4, #0]
 8004ebe:	6123      	str	r3, [r4, #16]
 8004ec0:	2301      	movs	r3, #1
 8004ec2:	6163      	str	r3, [r4, #20]
 8004ec4:	b003      	add	sp, #12
 8004ec6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004ec8:	ab01      	add	r3, sp, #4
 8004eca:	466a      	mov	r2, sp
 8004ecc:	f7ff ffc8 	bl	8004e60 <__swhatbuf_r>
 8004ed0:	9f00      	ldr	r7, [sp, #0]
 8004ed2:	4605      	mov	r5, r0
 8004ed4:	4639      	mov	r1, r7
 8004ed6:	4630      	mov	r0, r6
 8004ed8:	f7ff f92a 	bl	8004130 <_malloc_r>
 8004edc:	b948      	cbnz	r0, 8004ef2 <__smakebuf_r+0x46>
 8004ede:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004ee2:	059a      	lsls	r2, r3, #22
 8004ee4:	d4ee      	bmi.n	8004ec4 <__smakebuf_r+0x18>
 8004ee6:	f023 0303 	bic.w	r3, r3, #3
 8004eea:	f043 0302 	orr.w	r3, r3, #2
 8004eee:	81a3      	strh	r3, [r4, #12]
 8004ef0:	e7e2      	b.n	8004eb8 <__smakebuf_r+0xc>
 8004ef2:	89a3      	ldrh	r3, [r4, #12]
 8004ef4:	6020      	str	r0, [r4, #0]
 8004ef6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004efa:	81a3      	strh	r3, [r4, #12]
 8004efc:	9b01      	ldr	r3, [sp, #4]
 8004efe:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8004f02:	b15b      	cbz	r3, 8004f1c <__smakebuf_r+0x70>
 8004f04:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004f08:	4630      	mov	r0, r6
 8004f0a:	f000 f81d 	bl	8004f48 <_isatty_r>
 8004f0e:	b128      	cbz	r0, 8004f1c <__smakebuf_r+0x70>
 8004f10:	89a3      	ldrh	r3, [r4, #12]
 8004f12:	f023 0303 	bic.w	r3, r3, #3
 8004f16:	f043 0301 	orr.w	r3, r3, #1
 8004f1a:	81a3      	strh	r3, [r4, #12]
 8004f1c:	89a3      	ldrh	r3, [r4, #12]
 8004f1e:	431d      	orrs	r5, r3
 8004f20:	81a5      	strh	r5, [r4, #12]
 8004f22:	e7cf      	b.n	8004ec4 <__smakebuf_r+0x18>

08004f24 <_fstat_r>:
 8004f24:	b538      	push	{r3, r4, r5, lr}
 8004f26:	4d07      	ldr	r5, [pc, #28]	@ (8004f44 <_fstat_r+0x20>)
 8004f28:	2300      	movs	r3, #0
 8004f2a:	4604      	mov	r4, r0
 8004f2c:	4608      	mov	r0, r1
 8004f2e:	4611      	mov	r1, r2
 8004f30:	602b      	str	r3, [r5, #0]
 8004f32:	f7fc f9c8 	bl	80012c6 <_fstat>
 8004f36:	1c43      	adds	r3, r0, #1
 8004f38:	d102      	bne.n	8004f40 <_fstat_r+0x1c>
 8004f3a:	682b      	ldr	r3, [r5, #0]
 8004f3c:	b103      	cbz	r3, 8004f40 <_fstat_r+0x1c>
 8004f3e:	6023      	str	r3, [r4, #0]
 8004f40:	bd38      	pop	{r3, r4, r5, pc}
 8004f42:	bf00      	nop
 8004f44:	20000374 	.word	0x20000374

08004f48 <_isatty_r>:
 8004f48:	b538      	push	{r3, r4, r5, lr}
 8004f4a:	4d06      	ldr	r5, [pc, #24]	@ (8004f64 <_isatty_r+0x1c>)
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	4604      	mov	r4, r0
 8004f50:	4608      	mov	r0, r1
 8004f52:	602b      	str	r3, [r5, #0]
 8004f54:	f7fc f9c7 	bl	80012e6 <_isatty>
 8004f58:	1c43      	adds	r3, r0, #1
 8004f5a:	d102      	bne.n	8004f62 <_isatty_r+0x1a>
 8004f5c:	682b      	ldr	r3, [r5, #0]
 8004f5e:	b103      	cbz	r3, 8004f62 <_isatty_r+0x1a>
 8004f60:	6023      	str	r3, [r4, #0]
 8004f62:	bd38      	pop	{r3, r4, r5, pc}
 8004f64:	20000374 	.word	0x20000374

08004f68 <_init>:
 8004f68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f6a:	bf00      	nop
 8004f6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f6e:	bc08      	pop	{r3}
 8004f70:	469e      	mov	lr, r3
 8004f72:	4770      	bx	lr

08004f74 <_fini>:
 8004f74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f76:	bf00      	nop
 8004f78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f7a:	bc08      	pop	{r3}
 8004f7c:	469e      	mov	lr, r3
 8004f7e:	4770      	bx	lr
